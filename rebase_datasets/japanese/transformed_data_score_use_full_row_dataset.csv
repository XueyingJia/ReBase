input,output
与えられた文字列`text`の中で、スペースは'_'に、'_'はスペースに置き換える関数を書いてください,"def replace_spaces(text):
  return ''.join(' ' if c == '_' else ('_' if c == ' ' else c) for c in text)"
入力された文字列の単語の順序を逆にして出力する,"def reverse_words(s):
    return ' '.join(reversed(s.split()))"
文字列`text`内の空白、カンマ、ドットを全て半角コロンに置き換える,"import re
def replace_specialchar(text):
    return re.sub(r'[ ,.]', ':', text)"
文字列`test_str`をタプルに変換する,"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return res"
ファイル'sample.txt'の中身を1行ずつ表示する,with open('sample.txt') as f: for line in f: print(line.strip())
文字列`test_str`をfloatの要素からなるタプルに変換する関数を書いてください,"def float_to_tuple(test_str):
  return tuple(map(float, test_str.split(', ')))"
タプル`t`をセットに変換する,set(t)
文字列`text`内の空白を'_'に、'_'を空白に置き換える関数を作成する,"import re
def replace_spaces(text):
  return re.sub(r' ', '_', text.replace('_', ' '))"
文字列`text`から全ての空白文字を削除する,"text.replace(' ', '')"
与えられた文字列の中の大文字で始まる単語の間にスペースを入れる関数を書いてください,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)"
入力文字列`text`を大文字の部分で分割し、リストとして返す,"import re
def split_uppercase(text):
    return re.findall('[A-Z][^A-Z]*', text)"
文字列`word`を大文字に変換する,word.upper()
入力された文字列を大文字に変換する関数を書く,"def to_uppercase(s):
    return s.upper()"
リスト`words`内の単語の出現頻度を降順でカウントする,Counter(words).most_common()
リストの要素を一つの整数に変換する,"def convert(lst): return int(''.join(map(str, lst)))"
与えられた文字列の単語順序を逆転させる,"def reverse_words(s):
    return ' '.join(reversed(s.split()))"
タプル内の隣り合う要素を掛け合わせる関数を作成する,"def multiply_adjacent(tup):
    return tuple(a * b for a, b in zip(tup, tup[1:]))"
文字列`text`をスネークケースに変換する関数を作成する,"import re

def convert_to_snake_case(text):
    str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()"
スペース区切りの文字列`text`から、大文字で始まる単語を抽出して表示する,"import re
print(re.findall('[A-Z][^A-Z]*', text))"
リストの中の重複した文字を1つにまとめる,list(set(my_list))
ファイル'data.txt'から、引用符で囲まれた文字列を抽出するPythonコードを書いてください,"import re
with open('data.txt', 'r') as f:
    text = f.read()
    quotes = re.findall(r'""(.*?)""', text)
    print(quotes)"
直方体の体積を計算する,"def volume_cuboid(length, width, height):
  return length * width * height"
与えられた辺の長さ`side`から正四面体の表面積を計算する,"import math
def area_tetrahedron(side):
  return (math.sqrt(3) * side ** 2)"
タプル`test_tup`を隣接する要素を使ってキーと値のディクショナリに変換する関数を書いてください,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return res"
リストのタプル内の空のタプルを削除する関数を作成する,"def remove_empty(tuple1):
    return [t for t in tuple1 if t]"
文字列`text`内の大文字を小文字に変換する,text.lower()
ソート済みのリスト`a`と値`x`を与えられたら、`x`を挿入するべき左側のインデックスを返す関数を書いてください,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i"
ソート済みのリスト`a`に対して、値`x`の左挿入点を求める関数を書いてください,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i"
2つのネストされたタプル`test_tup1`と`test_tup2`を受け取り、各要素の差分を計算したタプルを返す関数を作成する,"def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2)) 
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return res"
タプル`test_tup`から入れ子のレコードを除去する関数を作成する,"def remove_nested(test_tup):
  res = tuple()
  for ele in test_tup:
    if not isinstance(ele, tuple):
      res += (ele,)
  return res"
ソート済みのリスト`a`に対して、値`x`の正しい挿入位置を見つける関数を書く,"import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i"
リスト `word_list` 内の単語の出現頻度をディクショナリーで返す,"from collections import Counter
Counter(word_list)"
リストの中の偶数番目の要素と奇数番目の要素の位置を交換する,"def exchange_elements(lst):
    return [lst[i+1] if i%2==0 else lst[i-1] for i in range(len(lst))]"
文字列`text`から数字とその位置を抽出して表示する,"import re
def extract_nums(text):
    for m in re.finditer(r'\d+', text):
        print(m.group(), m.start())"
リストの中から偶数だけを抽出して新しいリストを作る,even_nums = [num for num in nums if num % 2 == 0]
リスト`test_tup`からキーと値のペアを持つ辞書を作成する,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return res"
長方形の対角線の長さが`a`と`b`の場合、その面積を計算する,"def rectangle_area(a, b):
  return (a * b) / 2"
与えられた文字列`text`の中から、文字列`pattern`の出現位置とマッチした部分文字列を返す関数を書く,"import re
def occurance_substring(text, pattern):
    for match in re.finditer(pattern, text):
        s = match.start()
        e = match.end()
        return (text[s:e], s, e)"
数値を含む文字列`str`から数値の個数を数える関数を作成する,"def count_nums(s):
    count = 0
    for c in s:
        if c.isdigit():
            count += 1
    return count"
文字列`text`内の数字の個数を数える,sum(char.isdigit() for char in text)
整数`num`を受け取り、その数より小さい最大のパリンドローム数を返す関数を書く,"def previous_palindrome(num):
    for x in range(num-1, 0, -1):
        if str(x) == str(x)[::-1]:
            return x"
リストをヒープキューアルゴリズムを使って変換する関数を書いてください,"import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap"
ファイル`file.txt`から各行を読み込み、長さの短い順にソートして表示する,"with open('file.txt') as f: lines = [line.strip() for line in f] print(sorted(lines, key=len))"
ファイル'text.txt'から1行ずつ読み込み、各行の単語数を表示する,"with open('text.txt', 'r') as f: for line in f: print(len(line.split()))"
半径`r`と中心角`a`を受け取り、扇形の面積を計算する,"import math
def sector_area(r, a):
    if a >= 360:
        return None
    return (math.pi * r**2) * (a / 360)"
文字列`sentence`から重複する単語を削除して表示する,"from collections import OrderedDict
def remove_duplicates(sentence):
  return ' '.join(OrderedDict.fromkeys(sentence.split()).keys())"
長さ`a`と`b`、高さ`h`の台形の面積を計算する,"def area_trapezium(a, b, h):
    return 0.5 * (a + b) * h"
テキストファイル'data.txt'を開き、各行を小文字に変換し、行を連結して文字列として表示する,"with open('data.txt', 'r') as f: print(''.join(line.lower() for line in f))"
リストから偶数の要素を抽出する,"def extract_even(lst):
    return [x for x in lst if x % 2 == 0]"
リスト`test_tup`から、ネストされたタプルを除去する関数を作成する,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return res"
リストに格納された数値をラジアンに変換する,"import math
radians = [x * (math.pi/180) for x in numbers]"
"座標`(x, y)`を受け取り、その周囲8つの座標を返す関数を作成する","def get_coordinates(x, y):
        return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]"
文字列`test_str`内の数字をすべて末尾に移動させる,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return res"
IM 6.5.5-8以降のバージョンのRMagickライブラリの `interline_spacing` メソッドのドキュメンテーションを表示する,"print(""IM 6.5.5-8 and later"")"
数値を受け取り、それを対応するローマ数字に変換する関数を作成する,"def soln(num):
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    numerals = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
    result = ''
    for i, v in enumerate(values):
        count = int(num / v)
        result += (numerals[i] * count)
        num -= v * count
    return result"
リストの各要素の排他的論理和の合計を求める,"def soln(arr):
        total = 0
        for i in range(len(arr)):
            for j in range(i+1, len(arr)):
                total += arr[i] ^ arr[j]
        return total"
2つの日付文字列'2021-04-30'と'2022-05-01'の間の日数を計算する,"from datetime import datetime
start = datetime.strptime('2021-04-30', '%Y-%m-%d')
end = datetime.strptime('2022-05-01', '%Y-%m-%d')
print((end - start).days)"
配列 `arr` の要素の逆転数を数える関数を書いてください,"def get_inv_count(arr, n):
    inv_count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (arr[i] > arr[j]):
                inv_count += 1
    return inv_count"
長方形の辺の長さ`a`と`b`を変数に格納し、その長方形の面積を計算する,a * b
配列`arr`内の全ての数値の組み合わせのXORの和を計算する関数を作成する,"def pair_XOR_Sum(arr):
    ans = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            ans += arr[i] ^ arr[j]
    return ans"
与えられた変数`v`の指定された部分データを表示する,print(v[sectionSpec])
与えられたリスト`numbers`の要素の積が偶数かどうかを判定する,"def is_product_even(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product % 2 == 0"
リストに含まれる単語の出現回数をカウントする,"from collections import Counter
word_counts = Counter(word_list)"
リストの中の数値を小さい順にソートするPythonのコードを書いてください,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]"
リストの中の重複しない要素の合計を計算する関数を書いてください,"def find_sum(arr):
    seen = set()
    total = 0
    for x in arr:
        if x not in seen:
            seen.add(x)
            total += x
    return total"
2つのタプル`test_tup1`と`test_tup2`を連結してネストされたタプルを作る,"def concatenate_nested(test_tup1, test_tup2):
  return test_tup1 + test_tup2"
リスト`arr`内の同じ要素のペアの数を数える,"def count_Pairs(arr, n):
    cnt = 0
    for i in range(n):
        for j in range(i + 1, n):
            if arr[i] == arr[j]:
                cnt += 1
    return cnt"
整数のリスト`S`と整数`n`が与えられたとき、n円を作るのに必要な硬貨の組み合わせの数を求める関数を作成する,"def coin_change(S, n):
    dp = [0] * (n+1)
    dp[0] = 1
    for s in S:
        for i in range(s, n+1):
            dp[i] += dp[i-s]
    return dp[n]"
文字列`text`から、長さ`k`の単語を削除して表示する,"def remove_length(text, k):
  words = text.split()
  result = [w for w in words if len(w) != k]
  return ' '.join(result)"
関数`_t_gen_mov_env_TN`の引数`offset`が`sizeof(CPUCRISState)`より大きい場合の処理を記述する,"if offset > sizeof(CPUCRISState):
    print(f'wrong store to env at off={offset}')"
リストを文字列に変換し、改行を含めずに表示する,"print(' '.join(map(str, li)))"
リストの要素をランダムに並び替える,"import random
random.shuffle(my_list)"
リストの前半部分を逆順にする,"def reverse_front(lst, k): return lst[:k][::-1] + lst[k:]"
四角形の対角線の長さが`a`の場合、ひし形の周囲長を求める,"def rhombus_perimeter(a):
  return 4 * a"
曲線`path`を直線セグメントに変換し、セグメントの情報を保持する,"flatten(path, Flattener(), float64)"
リスト内のタプルペアの差の絶対値の最小値を見つける,"def min_difference(test_list):
  return min(abs(b - a) for a, b in test_list)"
リスト`test_list`内のタプルを、リスト`ord_list`の順番に並び替える,"def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return res"
回転回数を数えるPythonの関数を書いてください。https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/,"def count_rotation(arr):
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            return i
    return 0"
与えられた範囲内の数字で、各桁の数字で割り切れる数字を見つける関数を書いてください。,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) 
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
リストの各要素を繰り返し、その回数を表示する,"from collections import Counter
def repeat_elements(lst):
  c = Counter(lst)
  return list(c.elements())"
辞書`test_dict`の値から重複のない値のリストを作成する,list(sorted({ele for val in test_dict.values() for ele in val}))
タプルのリストからユニークな行のみを抽出する関数を作成してください,"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return list(res)"
リスト`li`内のネストされたリストから、最小値が13以上かつ最大値が17以下のリストを抽出する,result = [i for i in li if min(i) >= 13 and max(i) <= 17]
ソート済みの配列`arr1`と`arr2`があり、`arr2`には`arr1`にない要素が1つ追加されています。その追加された要素のインデックスを返す関数を書いてください。,"def find_Extra(arr1, arr2, n):
    for i in range(n):
        if arr1[i] != arr2[i]:
            return i
    return n"
括弧内にタブや空白が使えることを示す例を生成する,"print('(   )'), print('(    )'), print('(     )')"
リストの中の奇数長のサブリストの和を計算する,"def odd_length_sum(arr):
    return sum(arr[i:i+j+1] for i in range(len(arr)) for j in range(i,len(arr)) if (j-i+1)%2==1)"
単語の長さが偶数かどうかを判定する関数を書く,"def is_even_length(word):
    return len(word) % 2 == 0"
文字列`word`に含まれるアルファベットの数を数える,len(word)
文字列`text`から数字と英字以外の文字を全て削除する,"import re
def remove_non_alphanumeric(text):
  return re.sub(r'[^a-zA-Z0-9]', '', text)"
リストのリスト`li`の最初と最後の要素を別々にマージする関数を書いてください,"def merge(li):
    return [list(x) for x in zip(*li)]"
リストの要素の中で最大値を見つける,max(my_list)
リスト`arr`の中から2つの数の和が`sum`になるペアの数を数える関数を作成する,"def get_pairs_count(arr, sum):
    count = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == sum:
                count += 1
    return count"
リストの要素の合計を計算する,sum(lst)
リストの各要素の合計を求める,sum(lst)
ファイル'data.txt'の内容を読み込み、各行の単語数を表示する,"with open('data.txt', 'r') as f: for line in f: print(len(line.split()))"
配列`arr1`が配列`arr2`のサブセットかどうかを判定する関数を書いてください,"def is_subset(arr1, m, arr2, n):
    hashset = set()
    for i in range(m):
        hashset.add(arr1[i])
    for i in range(n):
        if arr2[i] not in hashset:
            return False
    return True"
Solargraph.Source.tree_atメソッドの引数に与える線数と列数を取得し、そのメソッドを呼び出す,"line = 99
column = 105
tree = Solargraph.Source.tree_at(line, column)"
リスト内の数値の4乗の合計を計算する,"def sum_of_fourth_power(nums):
    return sum(x**4 for x in nums)"
リストの各要素を小文字のスネークケースに変換する,"[x.lower().replace('-', '_') for x in li]"
ネストされたリストから、リストの要素の長さが3以上のものだけを抽出して表示する,[x for x in nested_list if len(x) >= 3]
指定された行列の範囲から、A1表記のセル範囲を取得する,"def convert_name_area(row_num_1, col_num_1, row_num_2, col_num_2):
    col_char_1 = chr(col_num_1 + ord('A') - 1)
    col_char_2 = chr(col_num_2 + ord('A') - 1)
    range1 = f'{col_char_1}{row_num_1}'
    range2 = f'{col_char_2}{row_num_2}'
    return f'[{range1}, {range2}]'"
Ruby関数'position_letters_in_word'の内容を表示する,"print(""def position_letters_in_word(word, line_width)\n      # Strip tags before measuring word.\n      word.gsub(ENTITIES_AND_TAGS_PATTERN, '').each_char do |c|\n        char_width = font.text_width(c)\n        line_width += char_width\n        @caret_pos..."")"
データベースのテーブル'products'から'price'列の最大値を取得する,Product.objects.aggregate(Max('price'))
2つのタプル`test_tup1`と`test_tup2`を受け取り、それぞれの要素の剰余を計算してタプルで返す関数を書いてください,"def tuple_modulo(test_tup1, test_tup2):
    return tuple(a % b for a, b in zip(test_tup1, test_tup2))"
半円に内接する最大の三角形の面積を求める関数を作成する,"def triangle_area(r):
        if r < 0:
            return -1
        return r * r * 3.14159 / 2"
リスト`EXPORT`の要素を走査し、そのシンボルを使ってメソッドを呼び出してSegmentオブジェクトを得る。得られたSegmentオブジェクトをキーと値のペアでハッシュに格納する。,"def segments
  EXPORT.map do |sym|
    seg = __send__(sym)
    [sym, seg] if seg.is_a?(Segment)
  end.compact.to_h
end"
リストに含まれる要素が全て同一かどうかを確認する,def is_all_same(lst):return len(set(lst)) == 1
文字列`word`に母音が5つ以上含まれていれば'accepted'を返し、そうでなければ'not accepted'を返す関数を作成する,"def check(word):
  if len(set(word) & set('AEIOUaeiou')) >= 5:
    return 'accepted'
  else:
    return 'not accepted'"
nCr mod pの値を計算する関数を書いてください,"def nCr_mod_p(n, r, p):
	if (r > n - r):
		r = n - r
	C = [0 for i in range(r + 1)]
	C[0] = 1
	for i in range(1, n + 1):
		for j in range(min(i, r), 0, -1):
			C[j] = (C[j] + C[j-1]) % p
	return C[r]"
クラス`SpatialArgsParser`の`writeSpatialArgs`メソッドを使い、オブジェクトの文字列表現を得る,return SpatialArgsParser.writeSpatialArgs(self)
三角形の各行の数値を持つリスト`A`から、最小の経路合計値を求める,"def min_sum_path(A):
        memo = [None] * len(A)
        n = len(A) - 1
        for i in range(len(A[n])):
            memo[i] = A[n][i]
        for i in range(len(A) - 2, -1, -1):
            for j in range(len(A[i])):
                memo[j] = A[i][j] + min(memo[j], memo[j+1])"
文字列`text`を含むJSONファイル'data.json'を読み込み、その中身を辞書型の変数`data`に格納する,"with open('data.json', 'r') as f: data = json.load(f)"
半径`r`と角度`a`を受け取り、扇形の面積を計算する関数を作成してください。ただし、角度が360度を超える場合はNoneを返してください。,"import math
def sector_area(r, a):
    if a > 360:
        return None
    return (math.pi * r**2) * (a / 360)"
文字列`s`の中に重複する文字がないかチェックする,len(set(s)) == len(s)
ファイル'data.txt'から文字列'a'で始まり'b'で終わる行を抽出する,"import re
with open('data.txt', 'r') as f:
    for line in f:
        if re.match(r'^a.*b$', line):
            print(line.strip())"
文字列`text`の長さを返す関数を作成する,"def get_string_length(text):
    return len(text)"
リスト`func_code_tokens`内の単語数を数える,len(func_code_tokens.split())
リストの先頭と末尾の要素を入れ替える,"def swap_elements(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst"
リスト`numbers`の先頭と末尾の要素を入れ替える,"numbers[0], numbers[-1] = numbers[-1], numbers[0]"
配列`arr`の中で奇数回数出現する数字を見つける,"from collections import Counter
def get_odd_occurrence(arr):
  count = Counter(arr)
  for num, freq in count.items():
    if freq % 2 != 0:
      return num
  return -1"
リストの中から偶数を抽出し、その合計値を求める,"sum(filter(lambda x: x % 2 == 0, lst))"
"RGB色空間の色`r, g, b`をHSV色空間に変換する関数を作成する","def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v"
整数のリスト`arr`を受け取り、その積が偶数かどうかを判定する関数を作成する,"def is_Product_Even(arr):
        product = 1
        for num in arr:
            product *= num
        return product % 2 == 0"
与えられたタプルレコードの先頭と最後のデータにアクセスする関数を作成する,"def get_first_and_last(tup):
  return (tup[0], tup[-1])"
文字列`text`の中に含まれる単語の出現頻度をカウントする,Counter(text.split())
リスト`test_tup`内の各要素の頻度を求める関数を書いてください。,"from collections import defaultdict
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return dict(res)"
文字列`text`内の文字`char`の出現回数を返す関数を作成する,"def count_char(text, char):
    return text.count(char)"
リスト`nums`の偶数インデックスの要素が全て偶数かどうかを判定する,"def is_even_at_even_index(nums):
    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))"
文字列'split'を含む文章を表示する,"print(sentence1, sentence2)"
指定されたローカル変数インデックスの出力フレームに格納されている抽象型を置き換える,"def setLocal(localIndex, abstractType):
    if outputLocals is None:
        outputLocals = []
    outputLocals[localIndex] = abstractType"
リストの中の正の数と負の数を分離して、ラムダ関数を使って並び替える,"def rearrange_numbs(array_nums):
    result = sorted(array_nums, key=lambda x: (0, x) if x < 0 else (1, x))
    return result"
ビット数が32ビットの整数`n`を`d`ビット左にローテーションする,"def left_Rotate(n, d):
    return (n << d) | (n >> (32 - d))"
タプル`tup`から指定したインデックスの要素を取得する関数を作成する,"def get_item(tup, index):
    return tup[index]"
Rubyのライブラリ'looksee'の'editor.rb'ファイルにある'command_for'関数の引数に与えられたファイル名とラインを使って、そのファイルのコマンドを返す,"def command_for(file, line):
    line = line.to_s
    words = Shellwords.shellwords(command)
    words.map! do |word|
        word.gsub!(/%f/, file)
        word.gsub!(/%l/, line)
        word.gsub!(/%%/, '%')
        word
    end
    words"
リストの要素の最大値と最小値の差を求める,max(li) - min(li)
配列`arr`の中から2つの数字の和が`sum`になるペアの数を数える,"def get_Pairs_Count(arr, n, sum):
    count = 0
    for i in range(n):
        for j in range(i+1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count"
2つの文字列 `str1` と `str2` を受け取り、`str1` を `str2` に変換するのに必要な最小のスワップ数を返す,"def min_Swaps(str1, str2):
    count = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            count += 1
    return count // 2 if count % 2 == 0 else 'Not Possible'"
リストの奇数番目の要素が奇数であるかどうかを確認する関数を書いてください,"def check_odd_elements(nums):
    return all(nums[i] % 2 == i % 2 for i in range(len(nums)))"
リスト`nums`の偶数番目の要素が偶数、奇数番目の要素が奇数であるかをチェックする,"def check_odd_even(nums):
    return all(nums[i]%2 == i%2 for i in range(len(nums)))"
リストの中の文字列が特定の数字で始まるかを確認する,"def check_starts_with(string_list, start_with):
    return [s for s in string_list if s.startswith(start_with)]"
指定された長さ`colwidth`の水平線を生成し、列の配置を表す記号を付ける,"def _line_segment_with_colons(linefmt, align, colwidth):
    line = linefmt.hline(w=colwidth)
    if align in ['right', 'decimal']:
        return ':' + line + ':'"
"整数 n, a, b, c を受け取り、n を a, b, c の長さの最大の分割数に分割する関数を作成する","def maximum_segments(n, a, b, c):
    dp = [0] * (n + 1)
    for i in range(1, n + 1):
        dp[i] = max(dp[i - a] + 1 if i >= a else 0, 
                   dp[i - b] + 1 if i >= b else 0,
                   dp[i - c] + 1 if i >= c else 0)
    return dp[n]"
ビット列`n`において、範囲`l`から`r`の間のビットがすべて1であるかどうかを確認するPython関数を書く,"def all_Bits_Set_In_The_Given_Range(n, l, r):
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)
    new_num = n & num
    return num == new_num"
ファイル'data.csv'の1列目と2列目の値を変数`col1`と`col2`に代入する,"with open('data.csv', 'r') as f: col1, col2 = [line.split(',') for line in f][0]"
バイナリ配列`arr`を最小の隣接スワップ回数で昇順にソートするPython関数を書く,"def find_Min_Swaps(arr, n):
    noOfZeroes = [0] * n
    count = 0
    noOfZeroes[n - 1] = 1 - arr[n - 1]
    for i in range(n-2, -1, -1):
        noOfZeroes[i] = noOfZeroes[i + 1]
        if (arr[i] == 0):
            noOfZeroes[i] += 1
    count = 0
    for i in range(n):
        if (noOfZeroes[i] > i):
            count += noOfZeroes[i] - i
    return count"
リストの中から重複する要素を削除する,list(set(li))
二つの辞書`dict1`と`dict2`を一つの辞書にマージする,"import collections as ct
def merge_dictionaries(dict1, dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict"
タプル`tuplex`内の各要素の出現回数を数える,collections.Counter(tuplex)
与えられたタプルのタプルの数値の平均を求める関数を作成する,"def average_tuple(nums):
    return [sum(x) / len(x) for x in zip(*nums)]"
日本語で書かれた質問をpythonで1行のコードで回答する,"print(translation.get('ja', 'No translation available'))"
正n角形の周長を計算するPythonコードを書いてください。正n角形の辺の長さを変数`l`、辺の数を変数`n`とします。,"import math
def perimeter_polygon(n, l):
  return n * l"
入力文字列`str`をバッファ`buf`に追加する,buf.append(str)
テキストオブジェクト'text'をutf-8で文字列として得る,text.decode('utf-8')
URLから年、月、日を抜き出すPythonの関数を書いてください,"import re
def extract_date(url):
    return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)"
リストの中のタプルの値をクリアする,"def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  return tuple(temp)"
各説明行の先頭のスペースを削除する,"def trimDesc(desc):
    lines = desc.split('\n')
    for i, line in enumerate(lines):
        lines[i] = line.lstrip()"
リスト`numbers`の要素が全て同一の値であるかどうかを判定する,"def check_unique_element(numbers):
    return len(set(numbers)) == 1"
数値`base`と`power`を引数に取り、baseをpowerまで累乗した結果の各桁の和を計算する関数を書いてください。,"def power_base_sum(base, power):
    return sum(int(d) for d in str(base**power))"
整数`base`と`power`を受け取り、`base`の`power`乗の各桁の和を返す関数を作成する,"def power_base_sum(base, power):
    return sum(int(d) for d in str(base**power))"
スタックIDが`stack_id`、スタック属性が`stack_attributes`のハッシュの場合、スタックの属性を保存する,"def save_expanded_stack(stack_id, stack_attributes):
    current_stacks = json.loads(cached_stacks)
    with stacks_lock:
        logging.info(f""Saving expanded stack attributes in cache ({stack_id})"")
        current_stacks[stack_id] = stack_attributes
        cached_stacks = json.dumps(current_stacks)"
与えられた配列の中から、任意の2つの要素間の差の最小値を見つける,"def find_min_diff(arr):
    arr = sorted(arr)
    min_diff = float('inf')
    for i in range(len(arr)-1):
        min_diff = min(min_diff, arr[i+1] - arr[i])
    return min_diff"
文字列`a_letter`に1バイトの領域を確保し、'd'で初期化する,a_letter = 'd'
リスト`test_list`にタプル`test_tup`を追加する関数を作成する,"def add_tuple(test_list, test_tup):
  return test_list + list(test_tup)"
整数の範囲`startnum`から`endnum`までの中から、各桁の数字で割り切れる数を見つける,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
リストの要素から、隣接する要素のペアを作成する,"def pair_wise(l1):
    pairs = []
    for i in range(len(l1) - 1):
        pairs.append((l1[i], l1[i+1]))
    return pairs"
リストの中から重複している要素を見つけ、要素と出現回数のディクショナリを作る,"from collections import Counter
Counter(my_list)"
リストの中から数値のみを抽出し、合計値を表示する,"sum([i for i in li if isinstance(i, int)])"
指定されたタプルのリストから、全要素の累積和を計算する,"def cumulative_sum(tuples):
    return sum(sum(t) for t in tuples)"
リストのネストされた要素の合計を計算する,"def sum_nested_list(lst):
  return sum(sum(x) for x in lst)"
文字列`string`の先頭の空白文字数を取得する,"def indent(string): i = 0

for b in string:
    if b != ' ':
        break
    i += 1

return i"
リストのエントリーを最小値と最大値で並び替える,"min(li), max(li)"
自然数 n の5乗の和を計算するPythonの関数を作成する,"def fifth_Power_Sum(n):
        return sum(i**5 for i in range(1, n+1))"
関数`print_syscall_ret()`の引数`num`と`ret`を使って、システムコールの名称とリターンコードを表示する,"for i in range(nsyscalls):
    if scnames[i].nr == num:
        if scnames[i].result:
            scnames[i].result(scnames[i], ret)"
文字列`test`と整数`num`を受け取り、`test`を`num`回繰り返した文字列を返す関数を作る,"def repeat_string(test, num):
  return test * num"
テキストファイルから読み取った行を処理する前に準備する,"def _prepare_lines(self, lines):
    result = []
    for line in lines:
        line = line.strip()"
"Rack.Responseオブジェクトの`write`メソッドの機能を説明し、そのメソッドを使って文字列`'Hello, World!'`をレスポンスボディに書き込む","response.write('Hello, World!')"
データベースのクエリ結果を`pandas.DataFrame`で表示する,pd.DataFrame(query_result)
リストの要素数が10以下の場合に、そのリストの要素を昇順で表示する,if len(li) <= 10: print(sorted(li))
リスト`line_segments`とリスト`points`を受け取り、それらをヒートマップ配列として描画する,"draw_heatmap_array(line_segments, points, image_shape)"
辞書`test_dict`内のキーをタプルの積の順に並べ替える関数を書いてください,"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return res"
2つのリスト`arr1`と`arr2`が等しいかどうかを確認する関数を書いてください,"def are_equal(arr1, arr2):
    return sorted(arr1) == sorted(arr2)"
リスト`nums`から連続する重複要素を削除するPythonのコードを書いてください。,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)]"
リストに含まれる連続した重複要素を削除する関数を書いてください,"from itertools import groupby
def remove_consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)]"
与えられた文字列`expression`が適切にバランスが取れているかどうかを判断する関数を作成してください,"from collections import deque

def is_balanced(expression):
    stack = deque()
    for char in expression:
        if char in ['(', '{', '[']:
            stack.append(char)
        elif char == ')':
            if not stack or stack.pop() != '(':
                return False
        elif char == '}':
            if not stack or stack.pop() != '{':
                return False
        elif char == ']':
            if not stack or stack.pop() != '[':
                return False
    return len(stack) == 0"
指定されたリスト`nums`から重複要素を除去し、リストとして返す,list(set(nums))
リストの中の重複する要素を除去する,list(set(my_list))
整数のタプル`test_tup1`と`test_tup2`を受け取り、要素ごとの剰余を計算して返す関数を書いてください。,"def tuple_modulo(test_tup1, test_tup2):
  return tuple(a % b for a, b in zip(test_tup1, test_tup2))"
半径rの半円に内接できる最大の三角形の面積を計算するPythonの関数を書く,"import math

def triangle_area(r):
    if r < 0:
        return None
    return r**2 * math.sqrt(3) / 4"
配列`a`の要素を`m`個ずつシフトさせる,"def change(p, n, m):
    a = p[:]
    for i in range(n):
        p[i] = a[(i+m)%n]"
文字列`str`に文字列`substr`が含まれている場合、その位置から文字列`rpl`に置き換える,start = str.find(substr) if start != -1: str = str[:start] + rpl + str[start+len(substr):]
整数`n`が豊富数かどうかを判定する関数を作成する,"def is_abundant(n):
    divisors = [i for i in range(1, n) if n % i == 0]
    return sum(divisors) > n"
3つの文字列のうち最長の共通部分文字列の長さを求める,"def lcs_of_three(X, Y, Z):
  m, n, o = len(X), len(Y), len(Z)
  L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]
  for i in range(1, m+1):
    for j in range(1, n+1):
      for k in range(1, o+1):
        if X[i-1] == Y[j-1] == Z[k-1]:
          L[i][j][k] = L[i-1][j-1][k-1] + 1
        else:
          L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])
  return L[m][n][o]"
リスト`test_list`内にある、要素の順番が逆になっている文字列のペアの数を数える,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return str(res)"
数値`n`と`k`を受け取り、二項係数を計算する関数`binomial_coeff`を実装する,"def binomial_coeff(n, k):
        C = [[0 for j in range(k + 1)] for i in range(n + 1)]
        for i in range(0, n + 1):
            for j in range(0, min(i, k) + 1):
                if (j == 0 or j == i):
                    C[i][j] = 1
                else:
                    C[i][j] = C[i-1][j-1] + C[i-1][j]
        return C[n][k]"
与えられた文字列が'a'の後に3つの'b'が続いているかどうかチェックする,"import re
def text_match_three(text):
    patterns = 'ab{3}?'
    return bool(re.search(patterns, text))"
リスト`nl_tokens`内の単語を使って、リスト内の要素をjoinする,' '.join(nl_tokens)
辞書`res_dict`にキーを数える関数を適用し、ネストされたリスト`test_list`から得られる結果を表示する,"for key, value in get_unique(test_list).items(): print(f'{key}: {len(value)}')"
リストの全ての部分リストの積の和を求める,"def sum_of_subarray_prod(arr):
    ans = 0
    res = 0
    for i in range(len(arr)-1, -1, -1):
        incr = arr[i] * (1 + res)
        ans += incr
        res = incr
    return ans"
リストの中にリストが含まれているリスト`nested_list`の要素数を数える,len(nested_list)
リストから隣接する要素のペアを作る,"def soln(l):
    pairs = []
    for i in range(len(l)-1):
        pairs.append((l[i], l[i+1]))
    return pairs"
複素数の長さを求める関数を書く,"import cmath
def len_complex(a, b):
  c = complex(a, b)
  return abs(c)"
リストに要素をタプルとして追加する,"def add_tuple(lst, tup):
  return lst + list(tup)"
辞書オブジェクト`config`をコマンドラインの引数として変換する,"import argparse
parser = argparse.ArgumentParser()
for k, v in config.items():
    parser.add_argument(f'--{k}', default=v)
args = parser.parse_args()"
文字列`s`を改行文字で分割し、リストとして取得する,"s.split('
')"
リスト`data`の中に含まれるタプルを、2番目の要素でグループ化してディクショナリとして返す関数を作成する,"from itertools import groupby

def group_data(data):
    res = {}
    for key, group in groupby(sorted(data, key=lambda x: x[1]), key=lambda x: x[1]):
        res[key] = [x[0] for x in group]
    return res"
プロジェクト'qemu'のコミットID'22951aaaebb6c4c314c58ad576960a9c57695bbc'に含まれる関数'print_type_size'を使って、オブジェクト'obj'のサイズを表示する,"print_type_size(v, 'obj', obj, &err)"
与えられた3つの文字列から最長の共通部分列を見つける関数を作成する,"def lcs_of_three(X, Y, Z):
    m, n, o = len(X), len(Y), len(Z)
    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]
    for i in range(1, m+1):
        for j in range(1, n+1):
            for k in range(1, o+1):
                if X[i-1] == Y[j-1] == Z[k-1]:
                    L[i][j][k] = L[i-1][j-1][k-1] + 1
                else:
                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])
    return L[m][n][o]"
リストのサブリストを生成する関数を作成する,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs"
指定された配列から等高線を抽出する,"def extract_contours(array, tile, interval=100, field='elev', base=0):
    import matplotlib.pyplot as plt
    levels = _get_contour_values(array, interval=interval, field=field, base=base)
    plt.contour(array, levels=levels)"
ネストされたタプルのリスト`nums`を受け取り、各タプルの平均値をリストで返す関数を作る,"def average_tuple(nums):
    return [sum(x) / len(x) for x in zip(*nums)]"
データ空間内のブレークを計算し、変換後の空間で返す,"def breaks(self, limits):
        vmin = np.clip(self.domain[0], limits[0])
        vmax = np.clip(self.domain[1], limits[1])
        return np.linspace(vmin, vmax, len(self.domain))"
ファイル'data.csv'からデータを読み込み、各行を要素とするリスト'data'を作成する,"with open('data.csv', 'r') as f: data = [line.strip() for line in f]"
ファイル'test.csv'の内容をリスト'data'に読み込む,"with open('test.csv', 'r') as f: data = [line.strip().split(',') for line in f]"
リストの中の数値の積の和を求める,"def sum_of_subarray_products(arr):
    total = 0
    for i in range(len(arr)):
        product = 1
        for j in range(i, len(arr)):
            product *= arr[j]
            total += product
    return total"
辞書`dict1`の各リストを昇順でソートする,"def sorted_dict(dict1):
  return {k: sorted(v) for k, v in dict1.items()}"
リストのインデックス`segmentIndex`、オフセット`off`、長さ`len`を使って`buffer`にセグメントを追加する,"buffer.append(str(segmentIndex), off, len)"
n次の正方形のマトリックスを生成し、1からn^2までの数字を螺旋状に埋めよ,"def generate_matrix(n):
    if n <= 0:
        return []
    matrix = [[0 for _ in range(n)] for _ in range(n)]
    row_start, row_end = 0, n-1
    col_start, col_end = 0, n-1
    num = 1
    while row_start <= row_end and col_start <= col_end:
        for i in range(col_start, col_end+1):
            matrix[row_start][i] = num
            num += 1
        row_start += 1
        for i in range(row_start, row_end+1):
            matrix[i][col_end] = num
            num += 1
        col_end -= 1
        if row_start <= row_end:
            for i in range(col_end, col_start-1, -1):
                matrix[row_end][i] = num
                num += 1
            row_end -= 1
        if col_start <= col_end:
            for i in range(row_end, row_start-1, -1):
                matrix[i][col_start] = num
                num += 1
            col_start += 1
    return matrix"
ファイル'test.xlsx'の内容を解析し、数値セルの値を表示する,"book = xlrd.open_workbook('test.xlsx') sheet = book.sheet_by_index(0) for row in range(sheet.nrows): for col in range(sheet.ncols): if sheet.cell(row, col).ctype == 2: print(sheet.cell_value(row, col))"
リスト`nl_tokens`の要素を空白で連結して表示する,' '.join(nl_tokens)
辞書`dict`の値の和を計算する,"def return_sum(d):
    return sum(d.values())"
辞書`dic`の値の合計を計算する,sum(dic.values())
ネストされたリスト`li`を`DeepDive.::Enumerable._replicate`メソッドを使って複製する,DeepDive.::Enumerable._replicate(li)
入力文字列`input_string`をトリミングし、空文字列の場合はエラーを返す,"trimmed := strings.TrimRight(input_string, "" "")
if trimmed == """" {
    return """", errors.New(""input string is empty"")
}"
文字列`text`内で最初に重複する文字を見つける,"def first_repeated_char(text):
  for i, c in enumerate(text):
    if text[:i+1].count(c) > 1:
      return c
  return 'None'"
リストのそれぞれの要素について、他の要素と重複しない範囲を見つける,"def find_ranges(lst):
    ranges = []
    for l, r in lst:
        x = min(l, l2 for l2, r2 in lst if l2 != l) if lst else l
        y = max(r, r2 for l2, r2 in lst if r2 != r) if lst else r
        ranges.append((x, y))
    return ranges"
ファイル'test.txt'の内容を読み取り、文字列の長さを表示する,"with open('test.txt', 'r') as f: print(len(f.read()))"
リストの要素`chunks`から、文字列の終端を修正するPythonの1行のコードを生成してください,for i in range(len(chunks)-1): chunks[i+1] = chunks[i+1].strip('.')}
Rubyのメソッド`break_in_defining_scope`の中で、`break`文を使って値を返す,"def break_in_defining_scope(value=true):
    note :a
    note lambda:
        note :b
        if value:
            return :break
        else:
            return
        note :c
    .call()
    note :d"
リストの中から重複している要素を見つけ出し、リストで返す,"def Repeat(x):
    seen = set()
    duplicates = set()
    for i in x:
        if i in seen:
            duplicates.add(i)
        else:
            seen.add(i)
    return list(duplicates)"
システムプロパティとEnvironmentから変数を補完する,"import os
def interpolate(s):
    return s.format(user_home=os.path.expanduser('~'), env_home=os.environ['HOME'])"
データベースのクエリを実行し、結果を表示する,cursor = connection.cursor() cursor.execute(query) print(cursor.fetchall())
結婚式に空手で出席するのは適切かどうか判断する,print('結婚式に空手で出席するのは控えましょう')
Ruby のプログラミングモードで、行のインデントを計算するメソッド `indent_line` の機能を実装する,"def indent_line
      result = false
      level = calculate_indentation
      return result if level.nil?
      @buffer.save_excursion do
        @buffer.beginning_of_line
        @buffer.composite_edit do
          if @buffer.looking_at?(/[...]"
正規表現を使って、'a'の後に0個以上の'b'が続く文字列を検出する関数を書く,"import re
def text_match(text):
    patterns = 'ab*'
    if re.search(patterns, text):
        return 'Found a match!'
    else:
        return 'Not matched!'"
ネットワーク内のすべてのPCの IPアドレスを取得する,"import socket
for i in range(1,255):
    try:
        print(socket.gethostbyname(f'192.168.1.{i}'))
    except:
        pass"
ファイル名'test.html'のファイルを開き、Digestモジュールを使ってファイル名のMD5ハッシュを取得する,"import hashlib
with open('test.html', 'r') as f:
    file_hash = hashlib.md5()
    file_hash.update(f.read().encode('utf-8'))
    print(file_hash.hexdigest())"
n個目の非対角数を見つける関数を書く,"def nonagonal(n):
    return int(n * (7 * n - 5) / 2)"
六角数を求める関数を書く,"def is_hexagonal(n): 
	return int(n * (2 * n - 1))"
Rubyのライブラリ'procodile'にある関数'environment_variables'の実装を表示する,"def environment_variables
      vars = @process.environment_variables.merge({
        'PROC_NAME' => self.description,
        'PID_FILE' => self.pid_file_path,
        'APP_ROOT' => @process.config.root
      })
      vars['PORT'] = @port.to_..."
クラレジスタ`cl`の値だけ、EDIレジスタ`edi`の内容を右シフトする,edi >> cl
リスト`numbers`の中から奇数の数値だけを取り出し、その3乗の合計を求める,sum([(x**3) for x in numbers if x % 2 != 0])
ファイルのuidとgidを変更する関数`ShiftOwner`を定義する,"def ShiftOwner(basepath, path, uid, gid):
    cbasepath = C.CString(basepath)
    defer C.free(unsafe.Pointer(cbasepath))
    # 関数の実装"
"リストの中にタプル`(10, 4, 5, 6, 8)`が与えられたとき、数値`6`が含まれているかどうかを確認する","def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res)"
与えられたタプル`test_tup`が全て有効な値を含んでいるかどうかを確認する関数を作成する,"def check_valid(test_tup):
  return all(test_tup)"
文字列リスト`test_list`の数値要素を`K`だけ増加させる,"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res"
ソースコード内の関数`JsDuck.Merger.merge`の説明を表示する,"print(""""""Takes a docset and merges the :comment and :code inside it,
producing hash as a result."""""")"
リストの中からパリンドロームを見つける関数を、lambdaを使って作成してください。,"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result"
リスト`arr`の要素を使って、ソートが可能かどうかを判定する関数を書いてください,"def check(arr, n):
    left, right = 0, n-1
    while left < right:
        if arr[left] > arr[right]:
            return False
        left += 1
        right -= 1
    return True"
location_idとshift_idを使ってキャッシュドロワーシフトの詳細を取得する,"SquareConnect.V1EmployeesApi.retrieve_cash_drawer_shift(location_id, shift_id)"
リスト`arr`の平衡インデックスを見つける関数を作成する,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum = 0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1"
すべてのファイルの変更を'dev'ブランチにマージする,"git checkout dev
git merge --no-ff"
引数のリスト`li`の中身を逆順に表示する,print(list(reversed(li)))
ネストされた辞書`nested_dict`から、キー`'key1'`の値を取得する,nested_dict['key1']
リストにある文字列をすべて小文字に変換する,[s.lower() for s in lst]
qemu_acl_append関数を使い、ACLエントリを追加する,"entry = qemu_acl_append(acl, 0, match)"
リスト`li`内のすべての要素の型を取得する,[type(x) for x in li]
ネストされたリスト'li'内の各要素に含まれる単語の出現回数を表示する,"from collections import Counter
for item in li:
    print(Counter(item))"
リストの中にある文字列が逆順になった文字列ペアの数を数える,"def count_reverse_pairs(test_list):
  return sum(1 for i in range(len(test_list)) for j in range(i+1, len(test_list)) if test_list[i] == test_list[j][::-1])"
リストの中にあるユニークなリストの数を数える関数を作成する,"def count_unique_sublists(lst):
    seen = {}
    for sublst in lst:
        sublst = tuple(sublst)
        seen[sublst] = seen.get(sublst, 0) + 1
    return seen"
ファイルオブジェクト`fobj`に、サイズ`size`のバイトを、オフセット`offset`から挿入する,"def insert_bytes(fobj, size, offset, BUFFER_SIZE=2**16): assert 0 < size; assert 0 <= offset; locked = False; fobj.seek(0, 2); file_size = fobj.tell(); fobj.seek(offset); fobj.write(b'\0'*size); fobj.seek(offset)"
ファイルオブジェクト`fobj`に、サイズ`size`のバイトを、オフセット`offset`から挿入する,"def insert_bytes(fobj, size, offset, BUFFER_SIZE=2**16):
    assert 0 < size
    assert 0 <= offset
    locked = False
    fobj.seek(0, 2)
    fobj.write(b'\x00' * size)
    fobj.seek(offset)
    fobj.write(b'\x00' * size)"
Ruoteライブラリのflow_expression.rbファイルにあるto_dotメソッドのドキュメンテーションを表示する,"print(""Returns a Graphviz dot string representing this expression (and its\n children)."")"
データベースの接続設定を表示する,print(settings.DATABASES)
リスト`numbers`の中から最初の奇数を見つける,"next((x for x in numbers if x % 2 != 0), -1)"
関数'at_line'のドキュメンテーション文字列を表示する,"print(""--- Callbacks from debugger C extension ---"")"
ファイル'sample.csv'から行ごとにデータを読み込み、各行をリストとして保存する,"with open('sample.csv', 'r') as f: data = [line.strip().split(',') for line in f]"
ファイル'test.txt'の内容を読み込み、その長さを表示する,"with open('test.txt', 'r') as f: print(len(f.read()))"
長方形の辺の長さ`length`と`width`を与えられたら、その長方形の周囲の長さを計算する,"def rectangle_perimeter(length, width):
  return 2 * (length + width)"
Pythonファイル内の変数`__version__`や他のプロパティを取得する,"def get_variable(relpath, keyword='__version__'):
    for line in open(os.path.join(os.path.dirname(__file__), relpath), encoding='utf-8'):
        if keyword in line:
            return line.split('=')[1].strip()"
ツリー構造のデータ構造`OptreeNode`を持つ変数`root`を受け取り、再帰的に深さを表示しながら出力する,"def pprint(root, depth=0, space_unit=""    ""): 
    spacing = space_unit * depth
    if isinstance(root, OptreeNode):
        print(f""{spacing}Operator ({root})"")"
与えられた集合内の最長の連鎖を見つける関数を作成する,"def max_chain_length(arr, n):
    max = 0
    mcl = [1 for i in range(n)]
    for i in range(1, n):
        for j in range(0, i):
            if (arr[i].a > arr[j].b):
                mcl[i] = max(mcl[i], mcl[j] + 1)
        max = max if max > mcl[i] else mcl[i]
    return max"
esiレジスタの内容をメモリ位置[esp-4]のdwordに移動する,"mov dword [esp-4], esi"
プレイヤーをポジション別に交代させる方法を説明する,line_change
タプル `nums` の中の数字の積を計算する,"def multiply_tuple(nums):
    result = 1
    for num in nums:
        result *= num
    return result"
リストの要素を全て乗算する関数を作成する,"def multiply_list(items):
    result = 1
    for x in items:
        result *= x
    return result"
コレクションの各アイテムのtoString()値を行ごとにデフォルトの文字エンコーディングでOutputStream に書き出す,for item in collection: output.write(str(item).encode())
スタックにシェルスクリプト'/bin/sh'をプッシュし、eaxレジスタをスタックレジスタを指すように設定する,"push 0x68732f2f
push 0x6e69622f
mov eax, esp"
要素`input`のタイプを'range'に設定し、属性を追加する,"input = createElement('input', {'type': 'range'})"
ファイルの内容をインポート文に置き換える,"def inlineImports(imports, data, declaration):
    modified = len(imports) > 0
    for i, item in enumerate(reversed(imports)):
        pass"
ある文章のリスト`context_list`から、目的の単語`target_word`が出現する位置を見つける,"for i, text in enumerate(context_list):
    if target_word in text:
        print(f'単語{target_word}は{i+1}番目の文章の{text.index(target_word)}文字目に出現しています'"
文脈から'line'の意味を判断する,print(contexts) # 文脈を表示し、'line'の意味を判断する
文脈1と文脈2の中で'line'という単語がどのように使われているかを説明する,文脈1では'line'は軍隊の陣形を表し、文脈2では舞台上の俳優らの列を表している
"文脈 1: ""They were arrayed in line of battle.""
文脈 2: ""The cast stood in line for the curtain call.""
目標の単語: ""line""
単語の品詞: ""N""
目標の単語の位置 1: 文字数 21 から 25
目標の単語の位置 2: 文字数 18 から 22
言語: ""EN""
正解ラベル: ""1""
この情報から、目標の単語 ""line"" がどのような意味で使われているかを判断してください。","if 'battle' in context_1 and 'curtain call' in context_2:
    print('line' in this context means a formation of people or things arranged in a row.')
else:
    print('line' in this context means a row of people or things.')"
文字列'/etc/passwd'をバイト列として定義する,string = b'/etc/passwd'
文字列`text`の中に'a'の後に0個または1個の'b'が含まれているかを確認する関数を作成する,"import re
def text_match_zero_one(text):
    patterns = 'ab?'
    if re.search(patterns, text):
        return 'Found a match!'
    else:
        return 'Not matched!'"
文字列`string1`と`string2`が互いに回転した文字列であるかどうかを確認する関数を作成する,"def are_rotations(string1, string2):
    if len(string1) != len(string2):
        return False
    temp = string1 + string1
    return string2 in temp"
リストのキーを使って、辞書`data_dict`の値を表示する,for key in data_dict: print(data_dict[key])
ファイルオブジェクト`f`を使って、関数`qed_plug_allocating_write_reqs()`の内容を表示する,print(f.read())
スタックに'//sh'を追加する,stack.append('//sh')
ストレージからストリームを直接取得する,"public boolean stream(final MetaKey key, final IOConsumer<InputStream> consumer) throws IOException { return streamFrom(this.dataPath, key, consumer); }"
ファイル名'client.rb'内の関数'create_a_record'のバックトレースを表示する,e.backtrace.first
指定のJSONファイルからデータを読み込み、各キーの長さを計算し表示する,"import json
with open('file.json', 'r') as f:
    data = json.load(f)
for key, value in data.items():
    print(f'{key}: {len(str(value))}')"
gitコマンドを使い、指定されたリビジョン間の変更されたファイルを一覧で取得する,git diff-tree -r --no-commit-id {rev_from} {rev}
データフレーム`df`の各行を反復処理し、条件に合う行の値を変数`result`に格納する,"result = [] for i, row in df.iterrows(): if condition: result.append(row['column'])"
ファイル `buffer` の内容を `PrintStream` オブジェクト `out` に出力する,"dumpSegment(out, messageDumpLimit, buffer)"
qemu_paio_writeメソッドの定義を示す,"def qemu_paio_write(aiocb):
    return qemu_paio_submit(aiocb, QEMU_PAIO_WRITE)"
データベースに接続し、テーブル'books'の内容を取得して表示する,"import sqlite3
conn = sqlite3.connect('database.db')
cursor = conn.cursor()
cursor.execute('SELECT * FROM books')
results = cursor.fetchall()
for row in results:
    print(row)"
リスト内の要素の平均値を計算する,def avg(lst): return sum(lst) / len(lst)
リスト`nl_tokens`内の単語を使ってPythonの関数を定義する,"def namespaceToNamespaceSummary(namespace):
    if namespace == None:
        return None
    return sd.NamespaceSummary"
スペースで囲まれた文字列を生成する,"def format_column(text, width, offset_left=3, offset_right=3):
    return ' ' * offset_left + text + ' ' * offset_right"
ファイル'books.txt'から、行ごとに本のタイトルを読み込み、タイトルの長さが10文字以上の本のタイトルだけを表示する,with open('books.txt') as f: for line in f: if len(line.strip()) >= 10: print(line.strip())
リスト内のタプルに特定の値`K`が含まれているかを確認する関数を書く,"def check_K(test_tup, K):
  return K in test_tup"
リスト`arr`から最大の積を持つ2つの要素を見つける,"def max_product(arr):
    max_pair = (arr[0], arr[1])
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] * arr[j] > max_pair[0] * max_pair[1]:
                max_pair = (arr[i], arr[j])
    return max_pair"
リスト`li`の最小値と最大値を取得する,"min(li), max(li)"
リストのインデックス0の要素が空の場合は削除し、コメントラインも削除する,lines = [line for line in lines if line.strip() and not line.startswith('#')]
ネストされたリスト`li`から、各要素の長さを表示する,[len(x) for x in li]
文字列`in_str`の中から、指定した位置`pos`から始まる部分文字列を取得する,in_str[pos:]
文字列`lengthStr`をintに変換して返す,return int(lengthStr)
文字列`text`に'a'が1つ、続いて'b'が3つあるかどうかを判断する,"import re
def text_match_three(text):
    patterns = 'ab{3}?'
    if re.search(patterns, text):
        return 'Found a match!'
    else:
        return 'Not matched!'"
文字列`test_str`内の、母音の隣に位置する文字の数を数える,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  return res"
文字列`text`の中に含まれる母音の隣の文字の数を数える,"def count_vowels(text):
  res = 0
  vowels = ['a', 'e', 'i', 'o', 'u']
  for i in range(1, len(text)-1):
    if text[i] not in vowels and (text[i-1] in vowels or text[i+1] in vowels):
      res += 1
  return res"
FFmpeg 内のサブタイトルの初期化を行うコードを生成する,"def init_subtitle(sub):
    sub.clear()"
データフレーム`df`の列名を表示する,print(df.columns)
与えられたバイト配列`bs`と整数配列`fails`を使って、`RingItem`オブジェクト`ri`をマークする,"MarkMode.mark(bs, fails)"
"Jacobsthal数列の第n項を求める関数を書いてください。Jacobsthal数列は0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...という数列です。","def jacobsthal_num(n):
    dp = [0] * (n + 1)
    dp[0] = 0
    dp[1] = 1
    for i in range(2, n+1):
        dp[i] = dp[i - 1] + 2 * dp[i - 2]
    return dp[n]"
ヤコビの数列の第n項を求める関数を書いてください,"def jacobsthal(n):
    dp = [0] * (n + 1)
    dp[0] = 0
    dp[1] = 1
    for i in range(2, n+1):
        dp[i] = dp[i - 1] + 2 * dp[i - 2]
    return dp[n]"
FFmpegプロジェクトのff_jref_idct_put関数の処理内容を説明する,"def ff_jref_idct_put(dest, line_size, block):
        ff_j_rev_dct(block)
        ff_put_pixels_clamped(block, dest, line_size)"
リストの要素を逆順に並べ替える,li[::-1]
N*Nの正方行列の各セルに特定のコストが割り当てられています。左上のセルから右または下にしか移動できず、右下のセルで終了する経路の平均コストを求めてください。,"def maxAverageOfPath(cost):
    N = len(cost)
    dp = [[0 for i in range(N)] for j in range(N)]
    dp[0][0] = cost[0][0]
    for i in range(1, N):
        dp[i][0] = dp[i-1][0] + cost[i][0]
        dp[0][i] = dp[0][i-1] + cost[0][i]
    for i in range(1, N):
        for j in range(1, N):
            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]
    return dp[N-1][N-1] / (2*N-1)"
Rubyのphonyライブラリの'Phony.Country.format'関数を使って、国内番号'national_number'をフォーマットし、オプションの設定を行う,"Phony.Country.format(national_number, format: @format, spaces: @space || @@default_space, local_spaces: @local_space || @space)"
データベースのクエリ結果を辞書形式で取得する,result = dict(cursor.fetchall())
ネストされたリスト`li`をprintで見やすく表示する,"from pprint import pprint
pprint(li)"
スワップファイルの変換行列をスタックに保存する関数を生成する,def swf_popmatrix(): pass
数値リスト`nums`が降順かどうかを判定する,"def is_decreasing(nums):
    return nums == sorted(nums, reverse=True)"
文字列`text`を含むファイルを開き、そのファイルのエンコーディングを'utf-8'に設定して表示する,"with open(text, 'r', encoding='utf-8') as f: print(f.read())"
"配列 `A`, `B`, `C`から、それぞれ3つの要素を選び、その合計が最小になるようにする","def soln(A, B, C):
    a, b, c = A[0], B[0], C[0]
    min_sum = abs(a - b) + abs(b - c) + abs(c - a)
    for i in range(len(A)):
        for j in range(len(B)):
            for k in range(len(C)):
                curr_sum = abs(A[i] - B[j]) + abs(B[j] - C[k]) + abs(C[k] - A[i])
                if curr_sum < min_sum:
                    min_sum = curr_sum
                    a, b, c = A[i], B[j], C[k]
    return a, b, c"
リスト`numbers`内の要素を昇順にソートする,sorted(numbers)
リスト`numbers`の中で最大の値を見つける,max(numbers)
ネパール語の文章を英語に翻訳する,"text = '""There is a tradition of the shrine from first to last.""'
print(text)"
リスト`printable_chars`に含まれる文字のみからなる文字列を作成する,"import string
printable_chars = set(string.printable) - set(string.whitespace)
''.join(random.choices(printable_chars, k=10))"
配列`array`に`insert`を`at`のインデックスに挿入する,"array.insert(at, insert)"
ファイル'test.c'の関数't_gen_raise_exception'を呼び出し、引数'index'を渡す,t_gen_raise_exception(index)
ネストされたリストのデータを整形して表示する,"import pprint
pprint.pprint(nested_list)"
リストの中の連続した重複要素をサブリストとしてパックする関数を書いてください,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]"
リスト`list1`内の連続する重複要素をサブリストにパックする関数を作成する,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]"
指定されたディレクトリ内にあるファイルのリストを取得する,os.listdir(directory)
指定したIDとネームスペースを使って、BlueprintClientのHierarchyApiクラスのget_descendants関数を呼び出す,"BlueprintClient.HierarchyApi.get_descendants(id, namespace, type, opts={})"
データフレーム`df`の列`col1`の平均値を計算する,df['col1'].mean()
データベースエンジンの設定を変更する,settings.DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'
"配列`$ancestor`, `$local`, `$remote`の中から、行の削除や修正が行われた行数を取得する","def linesRemovedOrModified($ancestor, $local, $remote, $count_ancestor, $count_local, $count_remote):
    merged = []"
メモリ上のグローバル変数の位置を表示する,"import ctypes
print(ctypes.addressof(variable))"
関数`v7m_push_stack`の中で、CPUの状態`env`から`xpsr`を読み取る方法を示す,xpsr = xpsr_read(env)
与えられたデータベースの設定を表示する,print(settings.DATABASES)
レジスタ`eax`の内容をスタックにプッシュする,push eax
ファミリーフィウド(Family Feud)の質問「バスルームの棚に置いてあると期待されるアイテムを答えよ」を解く,"['towels', 'toilet paper', 'medicine', 'toothpaste', 'soap/shampoo', 'makeup']"
関数 'qemu_ram_alloc'の定義を1行で表現する,"def qemu_ram_alloc(size, mr, errp): return qemu_ram_alloc_from_ptr(size, None, mr, errp)"
ファイルから設定を読み込み、環境変数と引数の設定を統合して表示する,"config_from_file = load_from_config(args.get('config_file', None)) config = {**config_from_file, **args} print(config)"
Obtenir les dimensions de la imatge 'Retrat d'una noia jove',Image.open('Retrat d'una noia jove').size
文字列`str`をUint8Arrayに変換する,b = bytearray(str.encode('utf-8'))
HTMLファイルから、'<pre>'タグ内の先頭のスペースを除去する,"def sanitize_code_blocks(text):
    text.gsub(/\s+/, '')"
esiレジスタの内容をalレジスタに移動する,"mov al, [esi]"
与えられた経緯度の境界ボックス`bounds`をメルカトル座標系の`tile_index`に変換する,"tfm = partial(pyproj.transform, pyproj.Proj(init=""epsg:4326""), pyproj.Proj(init=""epsg:3857"")) tile_coords = [int(x / 256) for x in tfm(bounds)]"
リポジトリ'cloudhead/mutter'の'lib/mutter/mutterer.rb'にある'Mutter.Mutterer.parse'関数の内容を表示する,"def parse(string)
      self.styles.inject(string) do |str, (name, options)|
        glyph, style = options[:match], options[:style]
        if glyph.is_a? Array
          str.gsub(/#{Regexp.escape(glyph.first)}(.*?)\n                    #{Regexp..."
指定された文字列を暗号化する,"import base64
encrypted_text = base64.b64encode(text.encode('utf-8')).decode('utf-8')"
リストの要素を昇順にソートする,sorted(li)
ScreenクラスのメソッドでVimの画面サイズを取得する,self.screen_size
要素数がKのリスト`test_list`を、各要素のうち2番目の値の小さい順にソートし、先頭K個の要素を返す関数を作成する,"def min_k(test_list, K):
  return sorted(test_list, key=lambda x: x[1])[:K]"
数値のリスト`nums`が昇順になっているかどうかを判断する,"def is_increasing(nums):
    return sorted(nums) == nums"
配列`arr`の要素が最大ステップ数を表しており、配列の最後まで到達するために必要な最小のジャンプ数を求める,"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
	return jumps[n-1]"
ホテルの部屋に必ず見られるものを列挙する,"['bed', 'towels', 'tv', 'bible', 'soap', 'coffeemaker']"
n x y 座標の2次元配列 a から、最大の面積を持つ長方形を見つける,"max_area = 0
for i in range(n):
    for j in range(n):
        for k in range(i, n):
            for l in range(j, n):
                area = (k - i + 1) * (l - j + 1)
                if area > max_area:
                    max_area = area
                    x[0], y[0] = i, j
                    x[1], y[1] = k, l
print(max_area)"
整数 `n` の最後の立っているビットの位置を取得する,"def get_last_set_bit_pos(n):
    return n.bit_length() - (n & -n).bit_length() + 1"
レジスタebxの内容をスタックにプッシュし、eaxをスタックレジスタを指すように設定する,"push ebx
mov eax, esp"
バイト`chmod_call`をスタックにプッシュする,stack.append(chmod_call)
ファイルオブジェクトwに対して、usageTemplateを使ってコマンドの使用方法を出力する,"func printUsage(w io.Writer) { bw := bufio.NewWriter(w) tmpl(bw, usageTemplate, commands) bw.Flush() }"
ファイルの内容を読み取り、空の場所に保存する,"with open('file.txt', 'r') as f: text = f.read() with open('empty_file.txt', 'w') as e: e.write(text)"
ある頂点IDに対して、placeholderとなる変数を追加する,"for placeHolderVariable in placeHolderVariables:
    if placeHolderVariable not in variableMap:
        variableMap.put(placeHolderVariable, new DifferentialFunction(placeHolderVariable))"
ファイルサイズ`filesize`と範囲文字列`rangetext`から、コンテンツの範囲をリストで返す,"def obtain_content_ranges(rangetext, filesize):
    listReturn = []
    seqRanges = rangetext.split("","")
    for subrange in seqRanges:
        matched = False
        if not matched:
            # process subrange"
文字列`text`の中から、単語`word`が何回出現するかを数える,text.count(word)
リストのリスト`li`の中でユニークなリストの出現回数を辞書で返す関数を書いてください,"def unique_sublists(li):
    result = {}
    for l in li:
        result[tuple(l)] = result.get(tuple(l), 0) + 1
    return result"
スタックにアドレス0x6e7a762dをプッシュし、ebxレジスタをスタックポインタに設定する,"push 0x6e7a762d
mov ebx, esp"
辞書 d1 と d2 を加算して共通のキーの値を足し合わせる関数を作成する,"from collections import Counter
def add_dict(d1, d2):
    return dict(Counter(d1) + Counter(d2))"
Rattler::Parsers.BackReference.parseメソッドの機能を説明し、1行のPythonコードを生成してください。,"def parse(scanner, rules, scope=ParserScope.empty):
    return scanner.scan(re.compile(re.escape(scope[ref_label])))"
文字列`method`をドメイン名とメソッド名に分割する,"def splitName(method):
    pos = method.find('.')
    if pos < 0:
        return [None, method]
    domainName = method[:pos]
    methodName = method[pos+1:]
    return [domainName, methodName]"
データベースの全テーブルの名称を取得する,print(connection.introspection.get_table_list(connection.cursor()))
プリントログに書式付きの文字列を出力するコードを生成する,"fmt.Printf(format, val...)"
ネストされたリスト'li'内のデータを数値に変換し、平均値を求める,"import numpy as np
mean(list(map(float, [item for sublist in li for item in sublist])))"
変数を名前空間から削除して、可能な限りそれへの隠れた参照を持たないようにする,"def del_var(self, varname, by_name=False):
    if varname in ('__builtin__', '__builtins__'):
        raise ValueError(""Refusing to delete %s"" % varname)"
ESIレジスタの中身をCXレジスタに移動する,"mov cx, [esi]"
edxレジスタの内容をスタックにプッシュする,push edx
文字列`input`を日付オブジェクトに変換する,"from datetime import datetime
datetime.strptime(input, '%Y-%m-%d')"
リストのindexを使ってそれぞれの要素を表示する,"for i, x in enumerate(lst): print(i, x)"
テキスト`text`内に文字列`pattern`が含まれているかを確認し、その位置を開始位置と終了位置で返す関数を作成する,"import re
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)"
ハッシュ型`attributes`から、キーに`lines`を持つ要素を取得する,attributes['lines']
リスト`numbers`内の奇数の要素のみを抽出する,[num for num in numbers if num % 2 != 0]
大きな整数`a`と`b`を受け取り、`a`を`b`で割った商と余りを表示する,"a = gmp_init(""0x41682179fbf5"") b = gmp_init(""0xDEFE75"") res = gmp_div_qr(a, b) print(f""Result is: q - {gmp_strval(res[0])}, r - {gmp_strval(res[1])}"")"
リストに含まれる要素を検索し、結果をブール値で返す,"def check_element(test_tup, check_list):
  return any(elem in test_tup for elem in check_list)"
プロジェクトのコミットID `a2b257d6212ade772473f86bf0637480b2578a7e` で、 `phys_mem_set_alloc` 関数の定義を表示する,"print(""void phys_mem_set_alloc(void *(*alloc)(size_t))\n\n{\n\n    phys_mem_alloc = alloc;\n\n}\n"")"
文字列`sublimation`を含むフェーズ変化の種類を表示する,"print([x for x in ['sublimation', 'deposition', 'condensation', 'evaporation'] if 'sublimation' in x])"
ファイル名`file_name`を指定し、そのファイルの内容を表示する,"with open(file_name, 'r') as f: print(f.read())"
文字列`documents`の中から、単語`trailer`を見つけ出し、その単語の位置を表示する,print(documents.index('trailer'))
与えられた整数`N`の階乗の下2桁を返す関数を作成する,"def soln(N):
        fac = 1
        for i in range(1, N+1):
            fac *= i
        return fac % 100"
ジェネレータ関数`find_combinations()`を使い、リスト`test_list`内のタプルの組み合わせの和を求める,"from itertools import combinations
def find_combinations(test_list):
  res = [(a1 + b1, a2 + b2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return res"
与えられた文字列の中で最長の大文字の連続する部分文字列の長さを求める,"def max_run_uppercase(s):
  max_count = 0
  current_count = 0
  for c in s:
    if c.isupper():
      current_count += 1
      max_count = max(max_count, current_count)
    else:
      current_count = 0
  return max_count"
文字列`test_str`内の最大の大文字連続文字数を求める,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = max(res, cnt)
      cnt = 0
  return max(res, cnt)"
ファイル名とラインナンバーをバックトレースから取得する,"def file_name_and_line(short_name=False): stack = backtrace || exception&.backtrace extract_file_and_line(stack, short_name)"
リストの各要素をn乗する関数を作成する,"def nth_nums(nums, n):
    return [x**n for x in nums]"
指定されたコンポーネントがダイレクトチャイルドである場合、フォーカスを削除し、focusable配列の中でのインデックスを@focusに設定する,if self.children.include?(ns): remove_focus(); @focus = focusable.index(ns)
指定されたインデックスの出力フレームローカル変数の型を設定する,"private void set(final int local, final int type)"
関数`bit_copy`の中で、`GetBitContext`インスタンスから16ビットずつ取得し、`PutBitContext`インスタンスに書き込む,"while bits_left >= 16: put_bits(pb, 16, get_bits(gb, 16)) bits_left -= 16"
スクリーンサイズに合わせてbounding boxを調整する,"def recalcFromBoundingBox():
    if debugRecalc:
        print(f""Navigation recalcFromBoundingBox= {bb}"")"
リポジトリ'rom-rb/rom'の'core/lib/rom/command_compiler.rb'ファイルにある'ROM.CommandCompiler.call'メソッドの機能を説明する,"""""""Return a specific command type for a given adapter and relation AST

 This class holds its own registry where all generated commands are being
 stored

 CommandProxy is returned for complex command graphs as they expect root
 relation name to ..."""""""
正規表現を使って、文字列'a'の後に1つ以上の'b'が続く文字列を判定する関数を作成する,"import re
def text_match_one_or_more_b(text):
    patterns = r'ab+'
    return bool(re.search(patterns, text))"
リスト`nums`から偶数だけを抽出する,[x for x in nums if x % 2 == 0]
ドメイン名が'www'で始まっていない場合、'www.'をURLの先頭に追加する,parsed = urlparse(url) if parsed.netloc.startswith('www') == False: return parsed.scheme + '://www.' + parsed.netloc + parsed.path
リストの中のタプルを逆順に並び替える,list(reversed(li))
入力として与えられたリスト`li`の要素を逆順に表示する,print(list(reversed(li)))
RubyのREXML.Elementクラスのnamespaceメソッドの機能を説明する,"def namespace(prefix=nil):
    if prefix is None:
        prefix = prefix()
    if prefix == '':
        prefix = 'xmlns'
    else:
        prefix = f'xmlns:{prefix}' unless prefix.startswith('xmlns')
    ns = attribute(prefix)
    return ns"
メソッド`Squib.Deck.save_png`を使って、Squibライブラリを使ってPNGファイルを保存する,Squib.Deck.save_png()
キーと値のリスト`pairs`を受け取り、キーごとに値のリストを作る,"from collections import defaultdict
def soln(pairs):
    d = defaultdict(list)
    for key, value in pairs:
        d[key].append(value)
    return d"
タプルのリストから最小のK個のレコードを見つける関数を書いてください。https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - この場合、テストケースを丸写しします。,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res)"
文字列'text'の中に含まれるひらがなを抽出する,[char for char in text if 'ぁ' <= char <= 'ゖ']
ドメイン名`example.com`のウェブサイトを簡単にスクレイピングする,requests.get('https://example.com').text
リストのネストを深さ3まで表示する,"import pprint
li = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
pprint.pprint(li, depth=3)"
ネストされたリスト`li`の各要素の長さを取得する,[len(x) for x in li]
自然数nまでの4乗の偶数の和を計算する関数を作成する,"def even_power_sum(n):
    return sum([(2*i)**4 for i in range(1, n+1)])"
"Goの関数`Star`を使い、中心点(x, y)と幅と高さを持つ図形を描く","func Star(gc draw2d.GraphicContext, x, y, width, height float64) {
    gc.Save()
    gc.Translate(x+width/2, y+height/2)
    // 星の描画処理
    gc.Restore()
}"
数値`n`の階乗の最初の桁を求める,"import math
def first_digit(n):
    fact = math.factorial(n)
    while fact >= 10:
        fact //= 10
    return fact"
リスト`numbers`から最小の欠落数を見つける,"def find_first_missing(numbers): 
    i = 0
    while i in numbers:
        i += 1
    return i"
データベースの設定を表示する,print(settings.DATABASES)
整数`n`の中間のビットを反転させる関数を作成する,"def toggle_middle_bits(n):
    if n <= 3:
        return n
    return n ^ ((n >> 1) & ~1)"
ファイル'fa.wikipedia.org/wiki/نیشکر'の内容を表示する,"import requests
response = requests.get('https://fa.wikipedia.org/wiki/%D9%86%DB%8C%D8%B4%DA%A9%D8%B1')
print(response.text)"
リストに含まれるユニークな要素の数を数える,len(set(li))
Pythonで、Farsi語の文字列からリストを作成し、その中の'کیسه صفرا'という要素を表示する,"text = '\u0635\u0641\u0631\u0627 \u062f\u0631 \u06a9\u062c\u0627 \u0630\u062e\u06cc\u0631\u0647 \u0645\u06cc\u0634\u0648\u062f\u061f'
li = text.split()
print('کیسه صفرا' in li)"
リストのインデックス`index`を使ってリスト`li`の要素を表示する,for i in range(len(li)): print(li[i])
ファイルをCSVファイルに変換する,"import csv

def convert_to_csv(filename, skiprows=0, delimiter=','):
    if not delimiter:
        delimiter = '\t'
    with open(filename, 'r') as input_file:
        reader = csv.reader(input_file, delimiter=delimiter)
        rows = [row for i, row in enumerate(reader) if i >= skiprows]
    with open(f'{filename.split('.')[0]}.csv', 'w', newline='') as output_file:
        writer = csv.writer(output_file, delimiter=',')
        writer.writerows(rows)"
リスト`word_list`内の単語を降順でソートして表示する,"sorted(word_list, reverse=True)"
数値`n`の奇数因数の和を求める関数を作成する,"import math
def sum_of_odd_Factors(n):
    res = 1
    while n % 2 == 0:
        n = n // 2
    for i in range(3,int(math.sqrt(n) + 1)):
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0:
            count += 1
            curr_term *= i
            curr_sum += curr_term
            n //= i
    if n > 2:
        curr_sum *= n
    return curr_sum"
ファイル名を修正するために、inspect.getinnerframes()の出力からリストの各レコードを処理する,"def fix_frame_records_filenames(records):
    fixed_records = []
    for frame, filename, line_no, func_name, lines, index in records:
        # ファイル名を修正する処理を実装"
データベースのテーブル名`table_name`から、カラム`column_name`の値をリストとして取得する,cursor.execute(f'SELECT {column_name} FROM {table_name}') table_data = [row[0] for row in cursor.fetchall()]
リスト`list1`から`L`番目の要素を削除する,"def remove_kth_element(list1, L):
    return list1[:L-1] + list1[L:]"
JSON内のデータを使って、ディスクチェンジの信号の性質を説明するPythonコードを1行で書いてください,print(f'Disk Change is a pulse signal changing a status register in a controller')
スタック上に値0x61702f2fと0x6374652fをプッシュし、esiレジスタをスタックポインタに設定する,"push 0x61702f2f
push 0x6374652f
mov esi, esp"
関数 `copy_elf_strings` の引数 `argc` と `argv` を使って、リストに文字列を格納する,strings = [arg for arg in argv]
ASCIIコードの'/bin/sh'をスタックにプッシュし、ebxレジスタをスタックレジスタを指すように設定する,"push 0x68732f2f
push 0x6e69622f
mov ebx, esp"
スタックに'sswd'を追加する,stack.append('sswd')
文中空白处应该填写的词语是：动物冬眠研究对航天业的发展有着重要的意义,这段话主要告诉我们: 动物冬眠的研究对航天业的发展有着重要的意义
正方形のマトリックス`cost`を受け取り、すべての経路の中で最大の平均値を持つ経路を見つける関数を作成する,"def maxAverageOfPath(cost, N):
    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]
    dp[0][0] = cost[0][0]
    for i in range(1, N):
        dp[i][0] = dp[i - 1][0] + cost[i][0]
    for j in range(1, N):
        dp[0][j] = dp[0][j - 1] + cost[0][j]
    for i in range(1, N):
        for j in range(1, N):
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]
    return dp[N - 1][N - 1] / (2 * N - 1)"
ディスクからconfigファイルを読み込み、空行とコメントアウトされた行を飛ばす,"with open(path) as f:
    lines = [line.strip() for line in f if line.strip() and not line.startswith('#')]"
リストのタプルから、指定の列の最大値を見つける関数を作成する,"def max_of_nth(test_list, N):
  return max([sub[N] for sub in test_list])"
データフレーム`data`を特徴量クラスタリングを使って分割し、`n_segments`個のセグメントに分割する,"subsegment(data, frames, n_segments=4, axis=-1)"
リストの中の最大値を見つける,max(li)
データベースに保存されている変種`variant`のカテゴリが'str'の場合、変種の座標を取得する,"def parse_coordinates(variant, category):
    if category == 'str':
        ref = variant.REF
        alt = variant.ALT[0]"
双曲面の性質を説明する,each_timelike_interval_generates_a_hyperboloid_of_one_sheet_while_each_spacelike_interval_generates_a_hyperboloid_of_two_sheets
指定されたパラメータからストレージキーを生成する,"def getStorageKey(formDefIdParam, formContIdParam, formFieldIdParam):
    return f'{formDefIdParam}_{formContIdParam}_{formFieldIdParam}'"
リストのキーを取得して新しいリストを作成する,list(dict.keys())
2つのラインセットの類似点を見つける,"def find_similarities(lineset1, lineset2):
    lines1 = lineset1.enumerate_stripped()
    lines2 = lineset2.enumerate_stripped()
    for line1, line2 in zip(lines1, lines2):
        if line1 != line2:
            print(f""Difference found at line {line1[0]}: {line1[1]} vs {line2[1]}"")"
指定されたNamespaceの中のレコードを効率的に削除する,"def truncate(namespace, set_name=None, before_last_update=None, options={})"
テキストファイルの各行をチェックし、名前が定義されているかを確認する,"def add_default_name(text):
    lines = text.split(""\n"")
    records = []
    for line in lines:
        tokens = tokenize_line(line)
        # 名前が定義されているかを確認して処理する"
スタックにアドレス0x6873732fと0x6374652fをプッシュし、esiレジスタをスタックポインタに設定する,"push 0x6873732f
push 0x6374652f
mov esi, esp"
日付をYYYY-MM-DD形式に変換する,datetime.date.today().strftime('%Y-%m-%d')
FFmpegのmodified_levinson_durbin関数の引数を説明する,"def modified_levinson_durbin(window, window_entries, out, out_entries, channels, tap_quant):
    pass"
リスト`nums`から重複する要素を削除し、新しいリストを作成する,list(set(nums))
レジスタ`bl`の値がレジスタ`al`の値と等しい場合に、ラベル`loop_2`にジャンプする,"if bl == al:
    goto loop_2"
生徒が学校で受ける処罰の例を挙げる,"['detention', 'stand in corner', 'suspension', 'write lines', ""principal's office"", 'no recess']"
整数の`code`を受け取り、ANSIトークンタイプに変換する,"def categoryForCode(code):
    code = int(code)
    if code == 0:
        return 'all'
    elif code == 1:
        return 'bold'
    elif code == 2:
        return 'italic'
    # add more conditions for other ANSI token types"
ファイルパス'ref'を解決し、絶対パスを取得する,"def resolve_path(ref):
    if ref.startswith('/'):
        return Path(ref[1:])
    else:
        return path.parent / ref"
FFmpegのarm_idct_put関数の内部処理を1行のコードで記述する,"j_rev_dct_ARM(block); put_pixels_clamped(block, dest, line_size)"
リスト`nums`から指定したインデックスのリスト`list_index`の要素を取り出す,"def get_elements(nums, list_index):
    return [nums[i] for i in list_index]"
3つのリストから共通のインデックス要素を抽出する関数を作成する,"def extract_index_list(l1, l2, l3):
    result = []
    for i, (x, y, z) in enumerate(zip(l1, l2, l3)):
        if x == y == z:
            result.append(i)
    return result"
"3つのリスト`l1`, `l2`, `l3`から、同じインデックスに同じ値が含まれている要素のリストを作る","def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if m == n == o:
            result.append(m)
    return result"
InputStream `is`から`length`バイトを読み取り、それをバイト配列に格納する,"is.read(bytearray, 0, int(length))"
スタックにダブルワード0x74652f2fをプッシュし、ebxレジスタをスタックレジスタに指すようにする,"push dword 0x74652f2f
mov ebx, esp"
QEMU の op_udivx_T1_T0 関数の中で、T0をT1で割って結果を返す,T0 = T0 / T1
データベースの接続情報を表示する,print(settings.DATABASES)
リストに含まれる単語の出現頻度を数える,"from collections import Counter
Counter(word_list)"
リストに含まれる単語の出現回数を取得する,collections.Counter(word_list)
データベースから取得した辞書型のデータ`data`を、キーと値をそれぞれ別のリストとして取り出す,"[list(data.keys()), list(data.values())]"
文脈1と文脈2から、「line」という単語の意味が異なることを示す,"context1 = 'The line stretched clear around the corner.'
context2 = 'You must wait in a long line at the checkout counter.'
# 'line'は文脈1では'列'の意味で、文脈2では'行'の意味で使われている"
与えられた3つの整数a、b、cから2次方程式の根が数値的に等しいが符号が反対かどうかを判断する,"def check_roots(a, b, c):
    if b ** 2 - 4 * a * c == 0:
        return 'Yes'
    else:
        return 'No'"
リストの中から最大値を見つける,max(li)
リスト`p.memory.mappings`内のアドレス`a`が含まれるマッピングを見つける,"for _, m in enumerate(p.memory.mappings): if a >= m.min and a <= m.max: break"
文字列`line`からBoundingBoxを生成する,BoundingBox(line)
リスト`li`の中の要素を逆順に表示する,print(list(reversed(li)))
リスト`nl_tokens`の中から単語`'Inlets'`の位置を見つける,nl_tokens.index('Inlets')
リストのインデックスを使って、指定された範囲のリスト要素を表示する,print(li[start:end])
リスト`items`の中から最初の10個の要素を取り出す,items[:10]
スタックにダブルワード'0x74652f2f'をプッシュし、eaxレジスタをスタックレジスタに指すようにする,"push dword 0x74652f2f
mov eax, esp"
リストから重複した要素を削除し、その結果を表示する,print(list(set(li)))
入力整数 n 以下の全てのルーディック数を取得する関数を書いてください。,"def get_ludic(n):
    ludics = []
    for i in range(1, n + 1):
        ludics.append(i)
    index = 1
    while index != len(ludics):
        first_ludic = ludics[index]
        remove_index = index + first_ludic
        while remove_index < len(ludics):
            ludics.pop(remove_index)
            remove_index += first_ludic
        index += 1
    return ludics"
データベースの接続情報を表示する,print(settings.DATABASES)
リスト内の重複する要素を数える,"from collections import Counter
Counter(list_name)"
ファイル'hpo_to_gene.txt'から、HPOターム(Human Phenotype Ontology)から遺伝子シンボルへのマッピングを抽出する,"def parse_hpo_to_genes(filename):
    hpo_to_gene = {}
    with open(filename, 'r') as f:
        for line in f:
            if line.startswith('#') or len(line.strip()) < 1:
                continue
            terms = line.strip().split(':')
            hpo = terms[0].strip()
            genes = [gene.strip() for gene in terms[1].split(',')]
            hpo_to_gene[hpo] = genes
    return hpo_to_gene"
HTML 파일 'test.html'의 내용을 UTF-8로 읽어와 출력하세요.,"with open('test.html', 'r', encoding='utf-8') as f:
    print(f.read())"
ebxレジスタの内容をスタックにプッシュする,push ebx
リストの中からランダムに要素を取り出す,"import random
random.choice(my_list)"
データフレーム`df`の中にある重複する行を削除する,df.drop_duplicates()
二次方程式の根が相互の逆数であるかどうかを確認する,"def check_reciprocal_roots(a, b, c):
    if a == c:
        return 'Yes'
    else:
        return 'No'"
リスト`li`の各要素を3つずつグループ化して表示する,"for i in range(0, len(li), 3): print(li[i:i+3])"
ネストされたリスト'li'を含むデータフレーム'df'を作成し、それをPretty Printで表示する,"import pandas as pd
pprint.pprint(df)"
幅`width`で単一の段落のテキスト`text`を折り返し、折り返された行のリストを返す,"def wrap(text, width=70, **kwargs): w = TextWrapper(width=width, **kwargs) return w.wrap(text)"
n桁の最小の三角数のインデックスを見つける関数を作成する,"import math
def find_index(n):
    x = math.sqrt(2 * 10**(n - 1))
    return round(x)"
ファイル'data.txt'を読み込み、各行を要素とするリストを作成する,"with open('data.txt', 'r') as f: data = f.readlines()"
CSV ファイル 'data.csv' から DataFrame を作成し、ファイルに書き出す,df = pd.read_csv('data.csv') df.to_csv('data.csv')
スタックに値0x6168732fと0x6374652fをプッシュし、ebxレジスタをスタックポインタに設定する,"push 0x6168732f
push 0x6374652f
mov ebx, esp"
三角形の内角の和が180度であることを確認し、三角不等式を満たすかどうかを判定する関数を作成する,"def is_triangle_exists(a, b, c):
    if a + b + c == 180 and a > 0 and b > 0 and c > 0:
        return a + b > c and b + c > a and a + c > b
    else:
        return False"
複数行の文字列`lines`から共通のインデントを除去する,"def unindent(lines):
    indent = min(len(line) - len(line.lstrip()) for line in lines if line)"
SegmentID '4102'の翻訳テキストを表示する,print(translation.si)
整数`a`と`b`の最小公倍数を求める,"def lcm(a, b):
    return abs(a*b) // gcd(a, b)"
与えられた周期関数の最小値を見つける関数を書く,"def floor_Min(A, B, N):
    x = max(B - 1, N)
    return (A * x) // B"
スタックにアドレス0x6475732fと0x6374652fをプッシュし、ediレジスタをスタックポインタに設定する,"push 0x6475732f
push 0x6374652f
mov edi, esp"
文字列`word`を含むツイートをページネーションを使って全て取得する,"tweets = [] max_id = None while True: search = api.search(q=word, max_id=max_id, count=100) tweets.extend(search) if not search.search_metadata.get('next_results'): break max_id = min(tweet.id for tweet in search) - 1"
リストに格納されているHTML要素のテキストを連結して表示する,print(''.join([element.text for element in html_elements]))
テキスト内の{@link com.linkedin.android.spyglass.ui.MentionsEditText.PlaceholderSpan}を{@link MentionSpan}に置き換える,"text.replace(PlaceholderSpan, MentionSpan)"
テキスト内の{@link com.linkedin.android.spyglass.ui.MentionsEditText.PlaceholderSpan}を{@link MentionSpan}に置き換える,"text.replace(PlaceholderSpan, MentionSpan)"
ストリームから6単語ずつ読み込み、EOFまで続ける,"while True:
    line = stream.gets
    if line.nil?
        break
    words = line.scan(/\S+/)
    for i in range(0, len(words), 6):
        print(words[i:i+6])"
GTK ライブラリの `gtk_range_get_value()` 関数をPythonで使い、 `v` 変数の値を取得する,v.gtk_range_get_value()
リストの要素を昇順にソートする,sorted(li)
リストからランダムに要素を選択する,random.choice(list)
以前定義したようにセグメントのフィールドをインスタンス化する,"def process_segment(segment):
    pass"
ネストされたリスト'scores'内の平均値を計算する,sum(scores) / len(scores)
リスト`tokens`から深さの最大値を持つ要素を見つけ、その要素を縦方向に整列させる,max_depth = max(len(token) for token in tokens) for token in tokens: print(token.rjust(max_depth))
電話での口座変更の依頼を受け付ける,print('お客様の口座変更のお手続きを受け付けました。後日申請書を郵送させていただきます。')
"座標(x1, y1)から座標(x2, y2)までの線を描画する","self.moveto(x1, y1)
self.lineto(x2, y2)
self.stroke()"
スタックにアドレス0x6e69622fと0x7273752fをプッシュし、edxレジスタをスタックポインタに設定する,"push 0x6e69622f
push 0x7273752f
mov edx, esp"
ソート済みの配列`A`から、数値`x`の最初の出現位置を見つける関数を書いてください,"def find_first_occurrence(A, x):
    left, right = 0, len(A) - 1
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if A[mid] == x:
            result = mid
            right = mid - 1
        elif A[mid] < x:
            left = mid + 1
        else:
            right = mid - 1
    return result"
文字列`text`に含まれる単語の出現回数を辞書形式で表示する,"from collections import Counter
print(dict(Counter(text.split())))"
データベース'wmt21.news'から'fr-de'のペアの'696'番目の文章の'wmt-raw'値を取得する,data['wmt-raw']
リストの中の正の数の合計を求める,"sum(list(filter(lambda x: x > 0, nums)))"
"3つのリスト`a`, `b`, `c`の共通要素を見つける",set(a) & set(b) & set(c)
スタックにアドレス0x6873732fと0x6374652fをプッシュし、eaxレジスタをスタックポインタに設定する,"push 0x6873732f
push 0x6374652f
mov eax, esp"
32バイトに圧縮されたデータ`s`を展開する,"def point_decompress(s):
    if len(s) != 32:
        raise ArgumentError('Invalid input length for decompression')
    y = int.from_bytes(s, byteorder='big')
    return y"
周期関数 f(x) = (A * x) // B で、最大の値を求める関数を書く,"def floor_Max(A, B, N):
    return (A * min(B - 1, N)) // B"
リスト`sentence_list`内の各文章の品詞を表示する,for sentence in sentence_list: print(nltk.pos_tag(sentence.split()))
2つのトークン `left` と `right` を受け取り、`right` が'Line'トークンの場合はスペースを許可しない,"def shouldOpenerRejectSpace(left, right):
    if right.value == 'Line':
        return False
    if not astUtils.isTokenOnSameLine(left, right):
        return False
    return True"
与えられた時刻表から、必要な最小プラットフォーム数を求める関数を作成してください。,"def find_platform(arr, dep, n):
    arr.sort()
    dep.sort()
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    while (i < n and j < n):
        if (arr[i] <= dep[j]):
            plat_needed += 1
        else:
            j += 1
        if (plat_needed > result):
            result = plat_needed
        i += 1
    return result"
リスト`card_list`内のカードを空のTableauに移動する,for card in card_list: Tableau.append(card)
リストに含まれる要素のサイズを、コンプレッサーの値で割った値を最小値と最大値の間に収まるように調整する,"for item in items: item.style.fontSize = str(max(min(item.width() / (compressor * 10), settings.maxFontSize), settings.minFontSize)) + 'px'"
オブジェクトの幅を10で割ったものをfont-sizeに設定する,"def Resizer(): self.css('font-size', Math.min(self.width() / (compressor * 10), parseFloat(settings.maxFontSize)))"
データベースの設定を表示する,print(settings.DATABASES)
ファイルパス`path`から、Gym.config[:output_directory]に指定されたディレクトリにファイルをコピーする,"def copy_files_from_path(path):
    print('Exporting Files:')
    for f in os.listdir(path):
        existing_file = os.path.join(os.path.expanduser(Gym.config['output_directory']), os.path.basename(f))
        # If the target file already exists in the output directory, skip it"
ストアブルを保持する新しいサブコンテナを作成する。必要に応じて入れ子のサブコンテナを作成する。,"def add_to_new_subcontainer(storable):
    scs = sorted(subcontainers, key=lambda sc: (sc.position.coordinate, sc.position.coordinate))
    for sc in scs:
        if sc.can_hold(storable):
            sc.add(storable)
            return
    new_sc = create_subcontainer(storable)
    subcontainers.append(new_sc)"
リスト`nl_tokens`内の単語を1行で表示する,print(' '.join(nl_tokens))
データベースのテーブル`users`から性別が'female'のユーザーの数を数える,User.objects.filter(gender='female').count()
リストからNth番目のpolite数を求める,"def soln(n): return n + int(math.log(n + math.log(n, 2), 2))"
Sinhala-to-English translation を行う,"translator = Translator() translation = translator.translate(text, dest='en')"
ファイル'sample.txt'の内容を行ごとにリストに格納する,"with open('sample.txt', 'r') as f: content = f.readlines()"
ネストされたリスト'li'から、各サブリストの最大値を取得する,[max(sublist) for sublist in li]
Suxodrevの川が流れるリージョンを特定する,print('Suxodrevは、Kaluzhskaya oblastの川です')
リストの中の要素の最大値と最小値を表示する,"print(min(li), max(li))"
2つのタプル`test_tup1`と`test_tup2`があり、`test_tup2`の各要素が`test_tup1`の対応する要素よりも小さいかどうかを確認する関数を書く,"def check_smaller(test_tup1, test_tup2):
  return all(x > y for x, y in zip(test_tup1, test_tup2))"
リストの中の負の数を除去する関数を書いてください,"def remove_negs(num_list):
    return [i for i in num_list if i >= 0]"
指定されたアカウントオブジェクトを使ってtabwriter出力する,"func printAccount(w io.Writer, a *acme.Account, kp string) { tw := tabwriter.NewWriter(w, 0, 8, 0, '\t', 0) fmt.Fprintln(tw, a.ID, '\t', a.Name, '\t', kp) tw.Flush() }"
変数`queue`を使って、VncJobQueueの中の処理を行う,"while not QTAILQ_EMPTY(&queue->jobs):
    job = QTAILQ_FIRST(&queue->jobs)
    QTAILQ_REMOVE(&queue->jobs, job, entry)
    process_vnc_job(job)
    free_vnc_job(job)"
Google Sheetsの列の名称を変更する,"sheets = gspread.open('ファイル名') sheet = sheets.sheet1 sheet.update_cell(1, 2, '新しい列名')"
ファイル'src_file'をYAMLで読み込み、ディレクトリ'dst_dir'に分割して保存する,"src_content = YAML.load_file(src_file)
FilaUtils.mkdir_p(dst_dir) unless File.exist?(dst_dir)
filenames = []"
データベースの`Tags`テーブルから、パラメータ`TagName`に一致する行を取得する,SELECT * FROM Tags WHERE TagName = ##TagName:String?osx##
Xenのメモリ管理関数`xen_set_memory`の内部処理を1行のPythonコードで実装する,"def xen_set_memory(listener, section, add): state = container_of(listener, XenIOState, 'memory_listener')"
Fortran95ファイルの連続行をチェックする関数'continuous_line?'を実装する,"def continuous_line?(line):
    continuous = False
    if '&\s*(!.*)?$' in line:
        continuous = True
        if comment_out?(line.split('&')[0]):
            continuous = False
    return continuous"
現在の行に、アウトオブラインメソッド定義が含まれているかどうかを確認する,"def check_out_of_line_method(lines, line_num):
    for i in range(line_num, max(-1, line_num - 10), -1):
        if is_method_definition(lines[i]):
            return True
    return False"
Pythonでファイルの内容を文字列として読み込む,"with open('filename.txt', 'r') as f: content = f.read()"
スタックにバイト0x5をプッシュし、ebxをスタックレジスタに指す,"push 0x5
mov ebx, esp"
リスト`record_list`の各要素について、要素の長さを表示する,for item in record_list: print(len(item))
アナログ信号の回路内で、電圧が連続的に変化していることを示す,voltage_changes = True
データベースのスキーマを表示する,print(django.db.connection.introspection.get_table_list(django.db.connection.cursor()))
ファイル'test.htmlの内容をutf-8でprint出力する,"with open('test.html', 'r') as f: print(f.read().encode('utf-8'))"
文字列のリスト `tokens` を受け取り、Setに変換する,set(tokens)
印刷会社の営業担当との打ち合わせで、重量を90グラムに変更したいと提案する,print(f'やはり90グラムに変えたいのですが、大丈夫でしょうか?')
子供が自分のおもちゃを保管する場所を教えてください。,toy_box
RamdaScriptソースコードを、指定されたオプションに従ってチャンクに分割する,"function srcToChunks(src, opts, ctx) {
    opts = opts || {}
    var ast = transform(src, opts)
    var errors = semantic.checkAst(ast)
    return errors
}"
文字列'doc_id'の中の単語を取り出し、その長さを表示する,for word in doc_id.split(): print(len(word))
リストの中の要素を逆順に並べ替える,li[::-1]
JTextAreaの末尾に行を追加し、スクロールを底部まで移動する。上部の行を必要に応じて削除する。,"if count >= nlines: remove = min(removeIncr, count - nlines); textarea.append(line + '\n'); textarea.setCaretPosition(textarea.getDocument().getLength());"
辞書型オブジェクト`obj`の各キーと値をきれいに表示する,"for k, v in obj.items(): print(f'{k:25s}: {v}')"
入力の文字列から不要な文字を削除し、出力する,"import re
text = re.sub(r'[\s/]', '', input_string)"
githubのPRの変更点を取得する,"def get_pr_changes(org, repo, pr_num):
    return f.PullRequestChanges(org, repo, pr_num)"
行列Aの近似的なnull空間基底を計算する,"_, _, vh = np.linalg.svd(A) tol = max(atol, rtol*np.max(s)) nullspace = vh[np.abs(s) <= tol].T"
ラベル付きの混同行列`cm`を見やすく表示する,"def print_cm(cm, labels, hide_zeroes=False, hide_diagonal=False, hide_threshold=None):"
入力された文字列`str`から最後の1文字を除いた部分を取得する,str[:-1]
VirtIODevice オブジェクト`vdev`と VRingDesc オブジェクト`desc`を使用して、物理アドレス `desc_pa` の i番目の VRingDesc レコードを読み取る,"vring_desc_read(vdev, desc, desc_pa, i)"
新聞Akhbar el-Yomが配布されている地域の通貨を特定する,Egyptian pound
StackOverflowの質問の内容から、関数のドキュメンテーションを生成する,"def get_argument_metadata(arguments, argument_list, out_list, return_dict, overloaded=False):
    """"""Get metadata for the arguments of the function.

    Args:
        arguments (dict): A dictionary of arguments.
        argument_list (dict): A dictionary of argument lists.
        out_list (dict): A dictionary of output lists.
        return_dict (dict): A dictionary of return values.
        overloaded (bool, optional): Whether the function is overloaded. Defaults to False.

    Returns:
        dict: A dictionary of metadata for the function arguments.
    """""""
ソースコード文字列`source`から数行の抜粋を取得する,"def getSourceExcerpt(source='', line=1, plus=1, format=False):
    excerpt = []
    return excerpt"
ファイル'test.xlsx'に新しいシートを作成し、データを書き込む,"workbook = Workbook.new('test.xlsx') worksheet = workbook.add_worksheet() worksheet.write_string(0, 0, 'データ')"
ネストされたリスト`nested_list`から、最も長い文字列の長さを求める,max(len(x) for l in nested_list for x in l)
Jpeg2000EncoderContext構造体の中にある変数`ncomponents`の値を表示する,print(s.ncomponents)
FFmpegのAVResampleContextを使って、入力のショートデータ配列`src`から出力のショートデータ配列`dst`に変換する,"av_resample(c, dst, src, consumed, src_size, dst_size, update_ctx)"
ファイル'numbers.txt'から数値を読み込み、偶数の合計を表示する,with open('numbers.txt') as f: print(sum(int(line) for line in f if int(line) % 2 == 0))
ネストされたリスト'li'の中の単語数を数える,sum(len(word) for words in li for word in words)
リモートパスが`remote_path`、ローカルパスが`local_path`のフォーマット文字列のSCPコマンドを実行し、各ホストからコピーする,for entry in entries: hname = entry.hostname or ''; local_path_fmt = local_path.format(hname=hname); commands.append(f'scp {remote_path} {local_path_fmt}')
ジェネレータを使って、入力をElasticsearchオブジェクトにマッピングする,"def get_pipe(self, object_type):
    for line in sys.stdin:
        data = json.loads(line.strip())
        obj = object_type(**data)
        yield obj"
Prolog変数と関数子の名前空間を設定し、Prologインタプリタを起動する,"VariableAndFunctorInterner interner = new VariableAndFunctorInternerImpl(""Prolog_Variable_Namespace"", ""Prolog_Functor_Namespace"")"
ロシア語のテキスト'support_text'の中で、作者の名前を見つける,"import json
data = json.loads('{""support_text"": ""\""'\\u0414\\u043e\\u043c \\u0432 \\u0442\\u044b\\u0441\\u044f\\u0447\\u0443 \\u044d\\u0442\\u0430\\u0436\\u0435\\u0439' \\u2014 \\u0444\\u0430\\u043d\\u0442\\u0430\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0439 \\u0440\\u043e\\u043c\\u0430\\u043d-\\u0430\\u043d\\u0442\\u0438...""'}
print(json.loads(data['support_text'])['passage'][0]['segment'])"
関数'cow_set_bits'の機能を1行のPythonコードで実装する,"bitmap[start//8:start//8+((start+nb_sectors-1)//8-start//8+1)] = b''.join(bytes([1<<(i&7) for i in range(start,start+nb_sectors)]) for _ in range(start//8,start//8+((start+nb_sectors-1)//8-start//8+1)))"
リーフの表皮に存在する開口部の名称を示す,stomata
キャッシュキーの名前空間を取得する,def namespace(key): return '#' if Tml.config.disabled? else Tml.config[key][0] or Tml.config.application[key][0]
データベースのテーブル`users`から、ユーザーの名前と年齢を取得する,"Users.objects.values('name', 'age')"
リスト`word_list`内に含まれる単語の出現頻度を表示する,"from collections import Counter
Counter(word_list)"
指定された名前空間に属するオブジェクトの一覧を取得する,for obj in dir(namespace): print(obj)
スタックにアドレス0x6873732fと0x6374652fを積み、ebxレジスタをスタックポインタに設定する,"push 0x6873732f
push 0x6374652f
mov ebx, esp"
指定したリポジトリ'fulldecent/structured-acceptance-test'の'implementations/ruby/lib/process.rb'ファイル内にある'StatModule.Process.print'関数のドキュメントを表示する,print(formatted=None)
ビットレートを下げることでストレージ容量を節約するデータ圧縮の方式,lossy_compression
ファイル'filename'の'linenum'行目にVirtual関数指定子が冗長かどうかを確認する,"def CheckRedundantVirtual(filename, clean_lines, linenum, error):
    line = clean_lines.elided[linenum]
    virtual = Match(""virtual"", line)"
文字列'nmt_output'に含まれる単語の確率を表示する,"import ast
word_probas = ast.literal_eval('""[-2.8788, -1.6874, -0.2198, -0.1547, -1.7997, -1.1949, -0.2927, -0.2678, -1.1392, -0.5491, -0.2911, -0.1289, -0.6727, -0.457, -1.9251, -2.5949, -1.0784, -0.4005, -1.7188, -1.1649, -0.7111, -0.767, -1.0771, -0.9937, -0.1231, -0.2558, -0.2024]""')
print(word_probas)"
Meaniesというおもちゃの特徴を説明する,Meaniesは1997年から2000年にかけてTopkat LLCが製造した小さな詰め物のぬいぐるみである。Meaniesはぬいぐるみのおもちゃの一種でビーンバッグの形をしている。
AST(抽象構文木)から評価器を取得し、文字列`constraint`を解析する,"constraint_expression(ceEval, factory, clauseFactory, constraint)"
POSIX規則に従ってストリング`s`を分割し、結果のリストを得る,s.split()
リスト`nl_tokens`から、`output`と`code`の値を取り出して表示する,"import json
nl_tokens = json.loads(""""""['ret', 'is', '{', 'output', ':', 'string', 'code', ':', 'number', '}']"""""")
print(nl_tokens['output'], nl_tokens['code'])"
ファミリーフィード情報から、ある種のビジネスを検索し、後で取り上げるものを見つける,"['dry cleaner', 'photos', 'storage']"
QEMU のIOポートの書き込みを行う関数`cpu_outb()`を実装する,"def cpu_outb(addr, val):
        LOG_IOPORT(f'outb: %04{addr:04X} %02{val:02X}')
        trace_cpu_out(addr, val)
        ioport_write(0, addr, val)"
ネストされたリスト'scores'の平均値を計算する,sum(scores)/len(scores)
リストの要素を時間に変換する,"for i, t in enumerate(frame_times): print(f'{est_idxs[i]}: {t}')"
Praxis.Dispatcher.reset_cache!メソッドの機能を1行のPythonコードで実現する,return Praxis.Blueprint.cache.clear() if Praxis.Blueprint.caching_enabled() else None
ファイル`file.txt`の内容を一行ずつ読み込み、各行の長さを表示する,"with open('file.txt', 'r') as f: for line in f: print(len(line.strip()))"
ファイル'@path'の各行に対してブロックを実行し、行の内容を返す,"def each_line(*args, &block): File.open(@path, 'r') { |io| io.each_line(args, &block) }"
FFmpegプロジェクトのH264Contextインスタンスhから、decode_cabac_mb_transform_size関数を使って、transform_sizeを取得する,return decode_cabac_mb_transform_size(h)
2つの文章`context_1`と`context_2`に現れる`target_word`の位置を表示する,"print(f'context_1: {context_1[target_word_location_1.char_start:target_word_location_1.char_end]}')
print(f'context_2: {context_2[target_word_location_2.char_start:target_word_location_2.char_end]}')"
ファイル'data.csv'を読み込み、各行のデータを変数'rows'に格納する,"with open('data.csv', 'r') as f: rows = f.readlines()"
テキストファイル`text.txt`から単語`word`を含む行を抽出する,"with open('text.txt', 'r') as f: for line in f: if word in line: print(line)"
文字列`word`を含むリストの要素をカウントする,sum(1 for x in li if word in x)
入力された文字列'text'を使って、文字列内の'space'の出現箇所を返す,for i in range(len(text)): if text[i:i+5] == 'space': print(i)
2つのリストの要素を交互に取り出して新しいリストを作る,"list(itertools.chain(*zip(list1, list2)))"
文字列`context_1`と`context_2`から、`target_word`の位置を特定し、その長さを取得する,"start = int(target_word_location_1.char_start)
end = int(target_word_location_1.char_end)
print(len(context_1[start:end]))
start = int(target_word_location_2.char_start)
end = int(target_word_location_2.char_end)
print(len(context_2[start:end]))"
カーソルオブジェクトをリストに変換する,list(cursor)
赤ちゃんの部屋にありそうなものを1つ挙げる,crib
リストの中から最大の和を持つサブリストの長さを求める関数を書いてください。,"def max_sub_array_sum(a, size):
        max_so_far = -sys.maxsize - 1
        max_ending_here = 0
        start = 0
        end = 0
        s = 0
        for i in range(size):
            max_ending_here += a[i]
            if max_so_far < max_ending_here:
                max_so_far = max_ending_here
                start = s
                end = i
            if max_ending_here < 0:
                max_ending_here = 0
                s = i + 1
        return end - start + 1"
ファイル'sample.txt'の行数を数え、その結果を表示する,print(sum(1 for line in open('sample.txt')))
NetCDF-3ファイルに文字列型の変数を追加する。定義モードでなければならない。その変数はCHAR型として保存される。,"with Dataset('file.nc', 'a') as nc: nc.createVariable('stringVar', 'S1', dims)"
リスト`numbers`内の要素を昇順にソートする,sorted(numbers)
オブジェクトをバイト列にシリアル化する,pickle.dumps(obj)
文字列'gradient-editor-action'を含む翻訳テキストを表示する,"print(""Dibenn a-zehou an amezeg a-_gleizgradient-editor-action"")"
ネストされたリスト'li'の中にある'odd change up'という単語を含むアイテムを見つける,[item for item in li if 'odd change up' in item]
データベースに保存されているユーザー情報を取得する,User.objects.all()
アナトリー・レズニコフが監督した映画の舞台となった場所を特定する,"Zollingen, Germany"
FFmpegのコードにおいて、静的インラインの関数`RENAME(nvXXtoUV)`を実装する,"def RENAME_nvXXtoUV(dst1, dst2, src, width):
    # 関数の実装コードを記述する
    pass"
リストの要素を逆順に表示する,li[::-1]
ファイル名`filename`で、メールの内容`this.smtp.log()`をディスクに保存する,"f = open(filename, 'w') f.write('\n'.join(this.smtp.log()))"
与えられた単語の翻訳テキストを表示する,print(translation.en)
メッシュの区画内に文房具があるかどうかを確認する,"if 'writing utensils' in mesh_compartment: print('Yes, there are writing utensils inside the mesh compartment')"
UCD Libraryの`quick_print`の現在の値を返す,print(quick_print)
ネストされたリスト'scores'内の要素を降順に並び替えて表示する,"sorted(scores, reverse=True)"
リスト`points`内の地理座標が矩形の範囲に収まっているかを確認する,"for point in points:
    if Geokit.Bounds.contains?(point):
        print(point)"
文字列`text`を逆順に表示する,print(text[::-1])
データ`data`から、Numpyの関数を使って平均値を計算する,np.mean(data)
ユーザーの入力した興味のあるプロセスから情報を抽出し、タプルのリストとして出力する,"procs = input.split('; ') result = [] for proc in procs: ends = proc.split('/') name = (ends[0], ends[1]) result.append(name)"
オブジェクト'GrundstueckWohnenMiete'を生成する,"@XmlElementDecl(namespace=""http://www.immobilienscout24.de/immobilientransfer"", name=""GrundstueckWohnenMiete"", substitutionHeadNamespace=""http://www.immobilienscout24.de/immobilientransfer"")"
BELグラフ`graph`の中から、名前が正しくないネームスペースを集めたリストを返す,"return [exc.namespace for _, exc, _ in graph.warnings if isinstance(exc, ValueError)]"
二つの個別の乗換経路セグメント(パターンと停留所の配列)の違いを計算する,"def segmentDissimilarity(s1: Segment, s2: Segment, {patterns, stops}: {patterns: List[Pattern], stops: List[Stop]}):
    # パターンと停留所の違いを計算する処理を実装する"
リスト`cell_list`の各要素のtoString()メソッドを呼び出し、結果を表示する,[str(cell) for cell in cell_list]
システムコールの書き込み番号を変数`al`に格納する,al = write_syscall
リストから重複を除いて表示する,list(set(li))
リスト`numbers`に含まれる偶数を見つけ、リスト`even_numbers`に格納する,[n for n in numbers if n % 2 == 0]
リストのインデックスを使って要素を取り出す,list[index]
リストのある要素の値を変更する,li[index] = new_value
指定されたパターンの文字列を、対応するフィールドの値に変換する,"def formatKey(d, key):
    year = d.get(""year"")
    month = d.get(""month"")
    date = d.get(""day"")"
空間が主に占めるものはなんですか,print('empty space')
分単位の時間間隔`$interval`を受け取り、それに対応するCarbonの最小値と最大値を取得する,min = Carbon::parse($this->getMin()); max = Carbon::parse($this->getMax());
リスト`restaurants`内の要素を逆順に表示する,print(list(reversed(restaurants)))
整数の配列`a`を受け取り、その要素を昇順にソートして表示する,a.sort() print(a)
リスト`translation`に含まれる翻訳テキストを表示する,for t in translation.values(): print(t)
リスト`arr`から最小数の要素を削除し、amax-amin<=kを満たすようにする,"def find_removals(arr, k):
        arr.sort()
        n = len(arr)
        min_removals = float('inf')
        for i in range(n):
            j = find_ind(arr[i], i, n, k, arr)
            if j != -1:
                min_removals = min(min_removals, n - (j - i + 1))
        return min_removals"
データベースにアクセスし、テーブル'point'の情報を取得する,cursor = connection.cursor() cursor.execute('SELECT * FROM point') rows = cursor.fetchall()
データベースの設定を表示する,print(settings.DATABASES)
リストデータ`data`から標準偏差を計算する関数を作成する,"import math
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean = sum(data) / n
    variance = sum((x - mean)**2 for x in data) / (n - 1)
    return math.sqrt(variance)"
ActiveAdminのApplicationクラスのroutesメソッドの機能を説明し、Pythonのコードで実現する,"def create_routes(rails_router):
    load_application()
    Router(rails_router, namespaces).apply()"
リスト`func_code_tokens`内の要素を空白で連結した文字列を出力する,'.join(func_code_tokens)
FAIファイルから長さ統計を取り出す,"def stats_from_fai(infile):
    lengths = sorted([int(line.split('\t')[1]) for line in utils.open_file_read(infile)])
    return {'longest': max(lengths), 'shortest': min(lengths), 'mean': sum(lengths) / len(lengths), 'total_length': sum(lengths), 'N50': lengths[len(lengths) // 2], 'number': len(lengths)}"
ステージのライトを修理するために倉庫に登る,lights
ネストされたリスト`li`をフラットなリストに変換する,[item for sublist in li for item in sublist]
リストのアイテムを昇順にソートする,sorted(li)
スタックにアドレス0x6475732fと0x6374652fをプッシュし、ecxレジスタをスタックポインタに設定する,"push 0x6475732f
push 0x6374652f
mov ecx, esp"
ホールの中に立っていたホストの種類を特定する,type(host)
古いアナログ電話の留守番電話に録音するには、何を入れる必要があったか,tape
Ruby関数 'Aerogel::Render.BlockHelper.render'の機能を説明し、その関数を呼び出すPythonコードを生成してください。,"def render_block_helper(args, block):
    content = output_capture(block)
    content_wrapped = output_capture(lambda: wrap(content))
    output_concat(content_wrapped)"
指定されたリストのインデックスの要素を取得する,li[index]
"Инсар ( ) — река в России, правый приток реки Алатырь. С какой рекой сливается река, в которую впадает Салминка?",print(main_answers)
Pythonでメモリ割り当てを行う関数`av_realloc`を定義する,"def av_realloc(ptr, size):
        if not ptr:
            return av_malloc(size)
        diff = ((char*)ptr)[-1]
        return realloc(ptr, size)"
リストの各要素を指定された数だけ繰り返し表示する,"def ntimes_list(nums, n):
    return list(map(lambda x: x*n, nums))"
整数`num`の最小の素因数を求める,"def smallest_prime_divisor(num):
    if num % 2 == 0:
        return 2
    i = 3
    while i * i <= num:
        if num % i == 0:
            return i
        i += 2
    return num"
文字列`word_probas`からリストを生成し、各要素の絶対値の平均を計算する,"import json
word_probas = json.loads(word_probas)
mean_abs = sum(abs(x) for x in word_probas) / len(word_probas)"
ネストされたリスト'li'の各要素の長さを表示する,[len(x) for x in li]
2つのタプル`test_tup1`と`test_tup2`が与えられたとき、`test_tup2`の各要素が`test_tup1`の対応する要素より大きいかどうかを確認する。,"def check_greater(test_tup1, test_tup2):
    return all(x < y for x, y in zip(test_tup1, test_tup2))"
SSHKitの設定クラスでformatを指定する,SSHKit.configuration.use_format(:pretty)
ターミナルテーブルライブラリのメソッド`headings=`を使って、テーブルのヘッダーを設定する,"table = Terminal::Table.new
table.headings = ['Name', 'Age', 'City']"
データベースに接続し、ユーザー情報を取得する,users = User.objects.all()
与えられた年から中国の干支を表示する関数を書いてください,"def get_chinese_zodiac(year):
    zodiac = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']
    return zodiac[(year - 1900) % 12]"
辞書`d`に指定されたキー`x`が存在するかどうかを確認する,x in d
メモリ上に変数`b`を作成し、値を0に初期化する,b = 0
QEMU のバージョンを設定する関数を作成する,"def qemu_set_version(version):
    global qemu_version
    qemu_version = version"
ファイル名`filename`を取得し、そのベース名を表示する,print(os.path.basename(filename))
リストの中に重複した要素がないかチェックする,len(set(li)) == len(li)
リストの中に含まれるキーワードを含むコンフィグ名を取得する,"def as_namespace(self, namespace=None):
    key = self.key
    if namespace and key.startswith(namespace):
        key = key[len(namespace)+1:]"
リストの中にある数値を昇順に並び替える,sorted(num_list)
データベースの設定を表示する,print(settings.DATABASES)
音源の反射の種類によってエコーが発生する,echo = 'Single'
リスト`nums`から奇数要素を先に、偶数要素を後に並べた新しいリストを作る,"odds = [x for x in nums if x % 2 != 0] 
 evens = [x for x in nums if x % 2 == 0]
new_list = odds + evens"
カウンターの値をバーチャート形式で横に表示する。最長のバーの長さはMAX_BAR_SIZEに設定する。,"import matplotlib.pyplot as plt
from collections import Counter

counter = Counter()
# ここにカウンターの値を追加する

plt.figure(figsize=(10, 6))
max_bar_size = 50
plt.barh(list(counter.keys()), list(counter.values()), height=0.6, color='blue')
plt.xlim(0, max_bar_size)
plt.show()"
ファイルパス`filePath`と変数名`varName`を使って、指定のアセットソースをコンパイルして、ソースファイルの変数に格納する,"Compile(sources, filePath, pkgName, varName, opts)"
リストの中にあるネストされたリストの要素の数を数える,sum(len(x) for x in li)
文字列`in`から数値を抽出し、その位置を返す,"pos, _ := strconv.Atoi(in)"
リストの中から重複する要素を削除する,list(set(li))
配列`A`の中から最大の和を持つ、隣り合う要素を含まないサブシーケンスを見つける,"def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
    return look_up[n - 1]"
環境変数から`block`オブジェクトの保存先パスを取得する,"storageRoot, err = StorageRootFromEnv() if err != nil: return """", err return storageRoot + ""/"" + block.String(), nil"
ファイル'test.txt'の内容を読み込み、その中に'python'という単語が含まれているかを確認する,with open('test.txt') as f: print('python' in f.read())
データベースの設定を表示する,print(settings.DATABASES)
リストのメソッド`append()`を使って、要素`x`をリスト`li`に追加する,li.append(x)
リストの中のリストから重複を削除する関数を書いてください。,"import itertools
def remove_duplicate(list1):
    list1.sort()
    remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
    return remove_duplicate"
ファイル内の変更履歴を取得し、リストで表示する,"change_logs = []; files.each { |file| p = PrettyPrinter.from_file(file); new_text, change_log = p.diff; change_logs << change_log }"
Липецкая область является субъектом в составе Российской Федерации. Кто возглавляет администрацию региона?,"print(""Артамонов, Игорь Георгиевич"")"
単語を含むツイートを検索し、結果をリストとして得る,api.search(q=word)
与えられた文字列の中で最も頻出する文字を返す関数を書く,"from collections import Counter
def max_char(str1):
    return max(Counter(str1), key=Counter(str1).get)"
辞書 `dict` を使って、文字列 `string` 内の `{key}` をvalueで置換する,"for key, value in dict.items(): string = string.replace('{'+key+'}', str(value))"
残留オーステナイトが下部ベイナイトに変態する際に膨張するものは何ですか?,print('体積')
"関数 ""print_version"" の説明を表示する","print(""Outputs the application name and version."")"
ディレクトリ `Rails.root` の中にある `file` というファイルにJSON形式で `translations` を保存する,"file = Rails.root.join(file) FileUtils.mkdir_p(File.dirname(file)) File.write(file, translations.to_json)"
"リスト`words`の中から、指定のタイプ(MemberOf, MadeOf, Synonym, Entails, HasA, HasProperty, PartOf, Antonym)の関係を持つ単語ペアを抽出する","from nltk.corpus import wordnet as wn
for w1 in words:
    for w2 in words:
        for rel in ['member_of', 'made_of', 'synonym', 'entails', 'has_a', 'has_property', 'part_of', 'antonym']:
            if wn.synsets(w1, w2, rel):
                print(w1, rel, w2)"
一つの数値リストを入力として受け取り、その要素を逆順に並べ替えて出力する,print(list(reversed(input)))
引数`drop`がTrueの場合、データベースの全テーブルを削除し、新しく作成する,if drop: db.drop_all() db.create_all()
整数xを因数分解し、その結果を表示する,"def factors(x):
    t = 0
    ways = 0
    for i in range(1, x+1):
        if x % i == 0:
            t += 1
            ways = t
    print(ways)"
چگالی به چه چیزی بستگی دارد که تغییر می کند؟,چگالی با تغییر دما و فشار تغییر می کند.
چگالی به چه چیزی بستگی دارد که تغییر می کند؟,چگالی با تغییر دما و فشار تغییر می کند.
ファイル名'test.json'を読み込み、そのデータをJSON形式で表示する,"import json
with open('test.json', 'r') as f:
    data = json.load(f)
    print(data)"
ノードの幅を指定された幅に調整する関数を作成する,"def set_pin_width!(node, width):
    _, left, right = parse_pin_name(get_pin_name(node))
    left = 0 if left is None else left
    right = 0 if right is None else right
    # Adjust the 'bounds' of the given bus so the bus is of the provided width
    # by modifying the bus's upper bound. If the node is not a bus, it will be
    # made into a bus whose right bound is 0."
ファイルIDから名前を抽出する関数を作成する,"def getName(fileId, isFile):
    splitted = fileId.split('/')
    filename = splitted[-1]
    return filename"
ファーストオーダーロジックとプロポジショナルロジックの違いを説明する,ファーストオーダーロジックはプロポジショナルロジックと比べて、変数を含む文を使用することが特徴です。
一階述語論理とコンピューサイエンスでの違いを説明する,first_order_logic_vs_propositional_logic()
コーヒーカップの近くにある小さな容器に入っているものを取得する,"container_contents = ['sugar', 'creamer', 'stirrers']"
リスト`nl_tokens`内の単語をマークダウン形式に変換する,for word in nl_tokens: if word == '#h1': print('# ' + word) elif word == '#h2': print('## ' + word) else: print(word)
リスト`func_code_tokens`内の要素を空白で連結して出力する,' '.join(func_code_tokens)
Vagrant サブコマンド `subcommand` とその引数 `arguments` を実行するコマンドを生成する,"args = [vagrant, subcommand.to_s, arguments].flatten
args.map {|a| Shellwords.escape a }.join(' ')"
整数のリスト`nums`を受け取り、その要素を昇順にソートする,nums.sort()
与えられた素数リストからnth番目のsuper ugly numberを見つける,"import heapq

def nth_super_ugly_number(n, primes):
    uglies = [1]
    heap = [x for x in map(lambda p: p, primes)]
    heapq.heapify(heap)
    while len(uglies) < n:
        next_ugly = heapq.heappop(heap)
        uglies.append(next_ugly)
        for p in primes:
            heapq.heappush(heap, next_ugly * p)
        while heap and heap[0] <= uglies[-1]:
            heapq.heappop(heap)
    return uglies[-1]"
ファイルパス'path'にあるファイルの内容を読み込み、それをデコードしたテキストを取得する,"with open(path, 'r') as f: text = f.read().decode()"
リスト`word_list`内の単語をアルファベット順に並び替える,sorted(word_list)
スタックに単語'0x1b6'を追加する,stack.append(0x1b6)
指定されたタイムスタンプをTimestampに変換する,"def parseTimestamp(format): time = int(format); year = date(""Y"", time); month = date(""n"", time); day = date(""j"", time); hour = date(""G"", time); minute = date(""i"", time); second = date(""s"", time); return datetime(year, month, day, hour, minute, second)"
レジスタ`al`の値が`0xaa`と等しい場合は`decode_insertion`ラベルにジャンプし、そうでない場合は`al`レジスタと`bl`レジスタの論理XOR演算を行い、結果を`al`レジスタに格納する,"if al == 0xaa:
    jump decode_insertion
else:
    al ^= bl"
リストの要素を指定した数だけ右に移動させる,"def rotate_right(lst, m, n):
  return lst[-m:] + lst[:-m]"
ファイルパス 'lib/cloud_crooner/storage.rb' の内容を表示する,"with open('lib/cloud_crooner/storage.rb', 'r') as f: print(f.read())"
ファイル'test.txt'の内容を読み込み、各行を要素とするリストを作成する,"with open('test.txt', 'r') as f: lines = f.readlines()"
データベースの変更を検知し、変更されたフィールドのみを通知する,"if hasattr(self, 'saved_changes'): changes = self.saved_changes.transform_values(lambda x: x[1]) else: changes = self.changes"
ファイル'test.txt'の内容を文字列変数'content'に読み込む,"with open('test.txt', 'r') as f: content = f.read()"
git branch -vv コマンドを使い、ローカルブランチの状態を表示する,"def get_upstream_branches(command_to_a('git branch -vv')).map do |line| line.gsub!(LEADING_STAR_REGEX, '') branch_name = line.split(BRANCH_NAME_REGEX)[0].strip {branch_name => line} end"
リストから重複する要素を削除する,list(set(li))
スペースで区切られた入力`text`を変数に格納し、各単語の長さを表示する,for word in text.split(): print(len(word))
パラメータ名に接頭辞を追加してクエリ文字列を生成する,"def encode_parameter_string_with_prefix(params, prefix):
    if params is None or len(params) == 0:
        return ''"
AWS SDK for Rubyのリポジトリ'aws/aws-sdk-ruby'にある'gems/aws-sdk-rds/lib/aws-sdk-rds/db_parameter_group.rb'の'Aws::RDS.DBParameterGroup.delete'メソッドを呼び出す,db_parameter_group.delete()
ネットワークのアドレス範囲を表示する,print(ipaddress.ip_network('192.168.1.0/24'))
リストの要素の長さを数える,len(lst)
リストの中から指定された位置の要素を削除する,"def remove_element(lst, index):
    return lst[:index] + lst[index+1:]"
データベースに接続し、テーブル`users`の内容を表示する,with connection.cursor() as cursor: cursor.execute('SELECT * FROM users') print(cursor.fetchall())
MOVTrack構造体`trk`を使って、チャンクのサイズと数を計算する,"for i in range(1, trk.entry): 
    if trk.cluster[i].size + chunkSize <= chunk.size:
        chunkSize += trk.cluster[i].size
    else:
        chunk.chunkNum = i
        trk.chunkCount += 1
        chunk = &trk.cluster[i]
        chunkSize = chunk.size"
長さの等しい2つの文字列`str1`と`str2`を入力として受け取り、各文字の並び順が同じかどうかを判定する,"a = len(str1)
b = len(str2)
if a != b:
    print('NO')
else:
    for i in range(a-1):
        for j in range(a-1-i):
            if str1[j] != str2[j]:
                print('NO')
                break
    else:
        print('YES')"
リストから出身地が'Pnompenh'である人物の名前を表示する,for person in people: if person['birthplace'] == 'Pnompenh': print(person['name'])
文字列`text`内の単語数を数える,len(text.split())
リストから重複した要素を削除する,list(set(li))
ネストされたリスト`data`内の各リストの平均値を計算する,"import numpy as np
list(map(np.mean, data))"
ファイル'parser.rb'のメソッド'TaskList.Parser.unglobify'を使ってglobを正規表現に変換する,unglobify(glob)
リスト`sample_names`内の名前のうち、先頭が大文字のものの長さの合計を求める,"def sample_nam(sample_names):
  sample_names = list(filter(lambda el: el[0].isupper() and el[1:].islower(), sample_names))
  return sum(len(name) for name in sample_names)"
リストに格納された単語の長さの合計を求める。ただし、小文字で始まる単語は除外する。,"def soln(word_list):
  filtered_words = [w for w in word_list if w[0].isupper() and w[1:].islower()]
  return sum(len(w) for w in filtered_words)"
"整数`n`, `x`, `y`を受け取り、nの範囲内で kmodx = y を満たす最大のkを返す関数を作成する","import sys
def find_max_val(n, x, y):
	ans = -sys.maxsize
	for k in range(n + 1):
		if (k % x == y):
			ans = max(ans, k)
	return (ans if (ans >= 0 and
					ans <= n) else -1)"
リスト`river_list`内に含まれる川の名前を表示する,for river in river_list: print(river)
無人の列車が線路の間を移動している最中だった,print('The empty train was in the process of being moved between sets of tracks.')
英語のテキスト'Road closures and bus diversions are in place and motorists have been advised to avoid the area.'をグジャラート語に翻訳する,"translate('Road closures and bus diversions are in place and motorists have been advised to avoid the area.', 'en', 'gu')"
データフレーム'df'の列'category'の値を、'old_to_new'辞書に従って変換する,df['category'] = df['category'].map(old_to_new)
ファイル'data.csv'を読み込み、各列の平均値を計算する,"import pandas as pd
df = pd.read_csv('data.csv')
print(df.mean())"
Ruby関数'Featureflow.EventsClient.register_features'の機能を説明する,"def register_features(with_features):
    features = []
    for feature in with_features:
        features.append(key=feature['key'], variants=feature['variants'])"
指定されたURLのリストを取得し、それぞれのURLの日本語タイトルを取得する,"urls = ['https://www.wikihow.com/Change-a-Verb-to-a-Noun', 'https://www.wikihow.com/Change-a-Verb-to-a-Noun', 'https://www.wikihow.com/Change-a-Verb-to-a-Noun'] for url in urls: response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string print(title)"
ファイル 'data.txt' から読み取った内容を stdout に出力する,"with open('data.txt', 'r') as f: print(f.read())"
リスト`items`から、要素が重複しないリストを作る,list(set(items))
辞書`d`をきれいにフォーマットした文字列に変換する,"def msgDict(d, matching=None, sep1=""="", sep2=""\n"", sort=True, cantEndWith=None): msg = """"; if ""record"" in str(type(d)): for k, v in sorted(d.items()): if cantEndWith is None or not str(k).endswith(cantEndWith): msg += f""{k}{sep1}{v}{sep2}""; return msg"
スタックに'0x2f656c2d'を積む,stack.append(0x2f656c2d)
現在の行に継承された関数が含まれているかどうかを確認する,"def IsDerivedFunction(clean_lines, linenum):
    for i in range(linenum, max(-1, linenum - 10), -1):
        pass"
表のデータを一括で更新するためのショートカットキーを教えてください,df.to_excel('updated_file.xlsx')
データベースの接続情報を取得する,print(settings.DATABASES)
ストップワードを使って、文字列`sentence`を文章の部分に分割する,"def splitOnWords(sentence, stopwords):
    splitSentences = []
    for word in sentence.split():
        if word not in stopwords:
            splitSentences.append(word)"
ファイル'sample.txt'を読み込み、各行をリストに格納する,"with open('sample.txt', 'r') as f: lines = f.readlines()"
Сухая Чевардаがどの川に合流しているか示すコードを生成してください,print('Сухая Чевардаは Алатырь 川に合流している')
スタックに'0x7372656f'をプッシュする,stack.append(0x7372656f)
Istanbulが属する国の通貨は何か,"print(""Turkish lira"")"
fetchedAdsCount変数を使って、ソースポジションを実際のアダプターラッパー内のポジションに変換する,"def translateSourceIndexToWrapperPosition(sourcePos, fetchedAdsCount):
    adSpacesCount = 0
    if sourcePos >= getOffsetValue() and getNoOfDataBetweenAds() > 0:
        adSpacesCount = sourcePos // getNoOfDataBetweenAds() + 1
    return sourcePos + adSpacesCount * fetchedAdsCount"
メソッド`parse_message`を使って、文字列`msg`を解析し、その結果を表示する,"msg = msg.to_s
re = /([A-Z_]+) ({.*})$/
msg_split = re.match(msg)
if msg_split.nil?
  re = /^([A-Z_]+)$/
  msg_split = re.match(msg)
  raise ""Error: Malformed Message"" if not msg_split
print(msg_split)"
指定の文字列`word`を含むファイルの一覧を取得する,"import os
for root, dirs, files in os.walk('.'): 
    for file in files:
        if word in file:
            print(os.path.join(root, file))"
リストの中のネストされた文字列を一つの文字列に結合する,' '.join([' '.join(w) for w in sentence_words])
変数`messagesPerSec`、`bytesPerSec`、`totalMessages`、`totalBytes`の値を標準出力に表示する,"print(messagesPerSec, bytesPerSec, totalMessages, totalBytes)"
リスト`num_list`の3番目の要素をスタックにプッシュし、ebxレジスタをスタックポインタに設定する,"num_list = [1, 2, 3, 4, 5]
push(num_list[2])
ebx = esp"
列車をケーブルに取り付けるために、シャンティングロコモーティブが駅から切り離し場所まで運ぶ,"train = train.replace(to_station, from_station)"
ファイル'agent_controller.rb'の関数'parse_other_args'のドキュメントを表示する,"print(""Parse other arguments used by infrastructure agents\n\n === Parameters\n opts(OptionParser):: Options parser with options to be parsed\n options(Hash):: Storage for options that are parsed\n\n === Return\n true:: Always return true"")"
ファミリーフューズの質問「車のグローブボックスに何を入れていますか?」に対する回答を生成する,"responses = ['registration', 'map', 'insurance card', 'flashlight', 'gloves', 'tissues', 'car manual']
print(', '.join(responses))"
テキストファイル'data.txt'を圧縮し、圧縮後のファイルサイズを表示する,"import gzip
with gzip.open('data.txt.gz', 'wb') as f:
    f.write(open('data.txt', 'rb').read())
print(os.path.getsize('data.txt.gz'))"
Тульская область - субъект Российской Федерации. Кто является главой администрации в регионе?,governor = Dyumin
ファイルリスト`files`から`CacheElement.CacheFile`オブジェクトのリストを作成し、表示する,allFiles = [CacheElement.CacheFile(f) for f in files]
OMDBクライアントを使って、映画のタイトルを検索し、結果を表示する,"title = 'The Shawshank Redemption'
result = OMDB.Client.title(title)"
リストに含まれる重複した要素を削除して表示する,list(set(li))
メモリ位置`[bp+0x3e]`に格納されているレジスタ`ax`の内容を移動する,"mov [bp+0x3e], ax"
データベースの設定を表示する,print(settings.DATABASES)
RubocopでLineLength制限を有効にする,rubocop -e LineLength
FFmpegのキャッシュエントリの比較関数を実装する,"def cmp(key, node):
    return key - node.logical_pos"
ファイル'ng5-slider/README.md'をライブラリディレクトリにコピーする,"import os
from shutil import copyfile

sourceReadmeMd = 'ng5-slider/README.md'
targetReadmeMd = os.path.join(os.path.dirname(__file__), '../src/ng5-slider/README.md')
copyfile(sourceReadmeMd, targetReadmeMd)"
リストに格納されているコンテナのタイプとそのcapacityを表示する,"for container in containers: print(container.type, container.capacity)"
辞書のリスト`models`を、ラムダ関数を使って色でソートする,"sorted(models, key=lambda x: x['color'])"
データベースの`User`モデルから、メールアドレスが'example@example.com'のユーザーを取得する,User.objects.get(email='example@example.com')
空のテーブロー列に対して、何かをムーブする,tableau.move_to_empty_slot()
リスト内の各要素を割る,"import numpy as np
a = np.array(input_a)
b = np.array(input_b)
print(a / b)"
変数`tar_file`に圧縮されたTarファイル(.tar.lrz)を読み込む,"with open(tar_file, 'rb') as f: tar = tarfile.open(fileobj=f, mode='r:lrz')"
GSL::Vectorオブジェクトを作成するメソッド'to_gsl'の機能を説明する,"def to_gsl
    raise NoMethodError, 'Install gsl-nmatrix for access to this functionality.' unless Daru.has_gsl?
    if dtype == :gsl
        @data.data
    else
        GSL::Vector.alloc(reject_values(*Daru::MISSING_VALUES).to_a)
    end
end"
ファイル'test.py'を読み込み、ドキュメンテーションを表示する,with open('test.py') as f: print(f.doc())
データベース設定を使って、SQLiteデータベースの名前を表示する,print(settings.DATABASES['default']['NAME'])
リスト`nl_tokens`の単語を1つずつ表示する,for word in nl_tokens: print(word)
リポジトリ'piotrmurach/github'のIssuesクラスのeditメソッドの機能を説明し、そのPythonでの実装を書いてください。,"def edit_issue(user, repo, number, title=None, body=None, assignee=None):
    url = f'/repos/{user}/{repo}/issues/{number}'
    params = {}
    if title:
        params['title'] = title
    if body:
        params['body'] = body
    if assignee:
        params['assignee'] = assignee
    response = patch_request(url, params)
    return response"
"座標`minX`, `minY`, `maxX`, `maxY`の範囲内にあるデータをリストとして取得する","featureIds = ManualFeatureQueryResults(minX, minY, maxX, maxY)"
スタックトレースを取得し、イベントループの後に追加する,def fixStack(stackTrace):if stackTrace: error.stack += '\n  (event loop)\n' + stackTrace.substr(stackTrace.indexOf('\n'))
文字列のリスト`items`を列で表示する,"def _format_as_columns(self, items, separator='  '): width = self._control.viewport().width() char_width = self._control.font_metrics().width(' ') num_cols = width // char_width return separator.join(items)"
リスト`text_list`内の文章を並列処理して処理する,"with concurrent.futures.ProcessPoolExecutor() as executor: executor.map(process_text, text_list)"
プロジェクトのパッケージ名を変数`project.package_name`から取得し、`bundle.wxs.erb`テンプレートファイルを使ってbundle.wxsファイルを`staging_dir`ディレクトリに書き出す,"render_template('bundle.wxs.erb', destination: '#{staging_dir}/bundle.wxs', variables: { name: project.package_name })"
FFmpegのrtcp_send_sr関数の引数`s1`と`ntp_time`の型を表示する,"print(type(s1), type(ntp_time))"
与えられた長方形を含むように境界ボックスを拡張する,LatLonRect.extend(r)
スペースで区切られた単語のリスト`word_list`から、頻度の高い上位n個の単語を表示する,Counter(word_list).most_common(n)
プリント基板(PCB)上で金属の白い髪の毛状の成長を引き起こす現象を説明する,electrochemical migration
リスト`specimen`と`template`を受け取り、specimentのpositionをtemplateに追加する,"def add_position_to_specimen_template(specimen, template):
    pos = specimen.position
    pas = pos.class.nondomain_attributes
    template.position = pos"
リストの中から最初の奇数と偶数の数を見つけ、それらの和を求めるPythonの関数を書いてください。,"def sum_first_even_odd(lst):
    first_even = next((x for x in lst if x % 2 == 0), -1)
    first_odd = next((x for x in lst if x % 2 != 0), -1)
    return first_even + first_odd"
サブグラフ内のエンティティ間に因果関係のエッジを追加する,"expand_internal_causal(universe, graph, edge_predicates=is_causal_relation)"
リスト`nl_tokens`内の単語を連結して1つの文字列として表示する,' '.join(nl_tokens)
リスト`data`の各要素の長さを計算し、その結果をリストとして返す,[len(x) for x in data]
ファイル 'test.txt' を開き、内容を変数 'text' に読み込む,"with open('test.txt', 'r') as f: text = f.read()"
リスト`river_list`の中にある固有名詞を抽出する,[item for item in river_list if item.isupper()]
スーパーマーケットで最も時間を費やすアイルを答えてください,"print(['produce', 'meat', 'frozen foods', 'magazines', 'dairy products', 'cereal'])"
ネストされたリスト`li`の最大値と最小値を求める,"max(li), min(li)"
指定された16進数の値をEAXレジスタにロードする,eax = 0x0b
URLを提供する際にプレフィックスを追加する,"def func(s, prefixPipeline):
    url, err = s.AssetPipeline.AssetUrl(name)
    if err != nil:
        return '', err
    return prefixPipeline + url, nil"
ファイル`file.txt`の内容を読み出し、行毎の長さを表示する,"with open('file.txt', 'r') as f: for line in f: print(len(line))"
ダウンロードしたJSONデータの'translation.en'フィールドの内容を表示する,print(data['translation.en'])
2つの整数の最大公約数(GCD)を再帰的に求める関数を書いてください,"def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)"
データベースの設定を表示する,print(settings.DATABASES)
リストの各要素に対して、ソケットを設定する,for s in sockets: s.setSocket(socket)
リストの要素を逆順に表示する,reversed(li)
線形回帰を使い、SamplePairsからスロープと切片の値を計算する,"slope, intercept = linearRegression(SamplePairs, interceptTime)"
リストの要素の平均値を計算する,sum(li) / len(li)
指定されたデータベースの設定を表示する,print(settings.DATABASES)
ある王朝の系譜を表示する。このとき、前の王朝は'Liu Song dynasty'、次の王朝は'Liang dynasty'である。,"query = '''
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX : <http://rdf.freebase.com/ns/>
SELECT ?x0 WHERE {
  ?x0 :type.object.type :royalty.royal_line .
  ?x0 :royalty.royal_line.preceded_by :m.0fpw1 .
  ?x0 :royalty.royal_line.succeeded_by :m.027tqs .
}
'''
result = execute_sparql_query(query)
print(result['x0'])"
設定ファイルから見つかった引数を解析する。settings.trueをTrueに、settings.falseをFalseに変換する,"def parseargs(self, argstr):
    argv = shlex.split(argstr, comments=True)
    if len(argv) != 1:
        raise BadNumberOfArguments(1, len(argv))
    return self.true if argv[0].lower() == 'true' else self.false if argv[0].lower() == 'false' else argv[0]"
リストの要素数を求める,len(li)
tweepyインスタンス`api`を使い、ユーザー`user_name`のタイムラインを取得する,api.user_timeline(screen_name=user_name)
リスト内の重複した要素を削除し、一意の要素のみを持つリストを作成する,list(set(li))
ツリーの高さを計算する関数を書いてください,"def max_height(node):
    if node is None:
        return 0
    else:
        left_height = max_height(node.left)
        right_height = max_height(node.right)
        return max(left_height, right_height) + 1"
リストdocumentsの長さを取得する,len(documents)
文字列`str`からアルファベットだけを抽出し、大文字に変換して表示する,"import re
print(''.join(re.findall(r'[a-zA-Z]', str)).upper())"
リバーに流れ込むリバーの名称を答えてください,Vychegda
16進数`0x37373333`をスタックにプッシュする,push 0x37373333
ネパール語からの翻訳文を出力する,print(translation.ne)
ある国の第二レベルの行政区分にSalcedoが含まれている場合、その国の通貨は何か,print(pycountry.countries.get(name='Dominican Republic').currency_name)
ディクショナリ`data`から'translation.bs'の値を取得する,data['translation.bs']
文字列`pkey_string`をハッシュに変換する,"def pkey_string_to_hash(pkey_string):
    # https://github.com/gomo/dynamic_scaffold/pull/9/commits/ff5de0e38b3544347e82539c45ffd2efaf3410da
    # Stop support multiple pkey, on this commit.
    # Convert ""key:1,code:foo"" to {key: ""1"", code: ""foo""}"
曲線の軌道が時空間に現れるとき、それはどのような線として見えるか,geodesic
ファイル'test.txt'の内容をリストとして読み込む,"with open('test.txt', 'r') as f: content = f.readlines()"
Тюмень является административным центром какой области в России?,Тюменской области
ロシアの川「Большая Кокшага」が流れる流域を特定する,print('Большая Кокшага')
モデルの外部コンパートメントを見つける,"def find_external_compartment(model):
    if model.boundary:
        counts = pd.Series([r.compartments[0] for r in model.boundary])"
ファイル'data.txt'から読み取った文字列`s`について、出現頻度の高い上位`a`個の文字とその出現回数を取得する,"from collections import Counter
def most_common_elem(s, a):
  return Counter(s).most_common(a)"
ファイル'test.jpg'の画像サイズを変更する,"from PIL import Image
img = Image.open('test.jpg')
img.resize((800, 600)).save('test_resized.jpg')"
リストのアイテムを昇順でソートする,sorted(li)
指定されたスコープから`module.exports`の参照を取得する,"def getModuleExportsNodes(scope):
    variable = scope.set.get(""module"")
    if variable == None:
        return []
    return variable.refe"
リストの子要素を反復処理し、各要素をレンダリングする,"for child in flattened_children: render_child(child, options)"
ブロックハッシュ`blockhash`が既にチェーンに含まれているか、キューに含まれているかを確認する,"if blockhash in @chain or any([(b.header.full_hash == blockhash) for b, p in @block_queue.queue])"
文中第三个空白处应该填写的词语是：,尽管……但是……
リストの中の辞書オブジェクト`obj`の各要素の`_wStyle`、`_cLine`、`_dxMin`プロパティを表示する,for item in obj: print(f'  ._wStyle: {item._wStyle}\n  ._cLine: {item._cLine}\n  ._dxMin: {item._dxMin}')
Javaの配列`javaArray`をイテレーターを使ってストレージにコピーする,for aJa in javaArray: iter.setNext(aJa)
Android Widgetの中のTextBoxからテキストを取得する,"editText = findViewById(R.id.yourId)
editTextStr = editText.getText().toString()"
リスト`arr`の中から最大の連続しない3つの要素の和を求める,"def max_sum_of_three_consecutive(arr, n):
    dp = [0] * n
    if n >= 1:
        dp[0] = arr[0]
    if n >= 2:
        dp[1] = max(arr[0], arr[1])
    for i in range(2, n):
        dp[i] = max(dp[i-1], dp[i-2] + arr[i])
    return dp[n-1]"
JSON オブジェクト内の 'translation.en' フィールドの値を表示する,print(json_obj['translation.en'])
Java配列を文字列として出力する,print(Arrays.toString(array))
リストの中から最大値を求める,max(li)
カスタムリソースに使用するネームスペースを返す,"func (c *ClusterClient) Namespace() string {
    if c.CustomData != nil && c.CustomData[namespaceClusterKey] != """" {
        return c.CustomData[namespaceClusterKey]
    }
    return ""default""
}"
リスト`array`の中にある要素のタプルを展開する,tuple(array)
リスト`inputs`内の重複する要素を削除し、対応するリスト`outputs`の中から最大の値を出力する,"inputs_set = set(map(tuple, inputs)) outputs = [max(out for inp, out in zip(inputs, outputs) if tuple(inp) in inputs_set)]"
ネストされているリスト'li'を見やすく表示する,pprint.pprint(li)
2次元リスト`rows`の各行を空白で連結し、1つの文字列にする,"'
'.join([' '.join(row) for row in rows])"
Pythonで、リストli内の要素の頻度をカウントする,"from collections import Counter
Counter(li)"
Липецкой области находится в составе какого региона России?,"print(""Липецкая область - субъект в составе Российской Федерации."")"
ツイート内の単語の出現回数を調べる,"from collections import Counter
text = tweet.text
word_counts = Counter(text.split())"
指定されたデータベース設定を表示する,print(settings.DATABASES)
リスト`numbers`から最小値を見つける,min(numbers)
ベラルーシの河川「スリチ」について、その流入河川を特定する,print('Pripyat')
メソッド'modify'を使い、辞書型'tree'の既存のエントリを変更し、成功したかどうかを示すブール値を返す,"def modify(key, value, tree):
    if key in tree:
        tree[key] = value
        return True
    return False"
データベースのテーブル'users'の全てのレコードを取得する,User.objects.all()
一つの場所を挙げてください。その場所で他人にアプローチするのは失礼とみなされるでしょう。,courtroom
FFmpeg関数`sub_left_prediction`の引数`w`と`left`の値を使って、適切なPythonコードを生成する,"def sub_left_prediction(s, dst, src, w, left):
    if s.bps <= 8:
        if w < 32:
            for i in range(w):
                pass"
"対話IDが'111'の発話`""draw the line across an--""`を表示する","print(Dialogue_ID == '111' and Utterance == '""draw the line across an--""')"
リストのアイテムを昇順にソートし、その結果を表示する,sorted(li)
ファイル'test.txt'を開き、その内容を表示する,"with open('test.txt', 'r') as f: print(f.read())"
共有フォルダの状態を変更する関数`SetSharedFolderState`を使う,"SetSharedFolderState(name, hostpath, options)"
リスト`nums`から3つの数の最大積を求める,"import heapq
a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
座標リスト`coordinates`の緯度経度を入れ替える,"def swap_lat_lon(coordinates):
    return [[y, x] for polygon in coordinates for x, y in polygon]"
データベースのテーブル`user`から、`name`列の値が`'John'`のレコードを取得する,User.objects.filter(name='John')
データベースの設定を表示する,print(settings.DATABASES)
辞書`data`の値を昇順でソートし、結果をリストで返す,sorted(data.values())
ファイル名`name`と辞書型`hash`を受け取り、ファイル名.jsonとしてハッシュをjsonエンコードして書き込む,"file_name = os.path.join(@db_dir, name + '.json')
try:
    with open(file_name, 'w') as f:
        json.dump(hash, f)"
Slovene文字列`sentence_words`に含まれるMetaphoric Roleの種類を表示する,"import json
met_type = json.loads(""""""[{'type': 'MRWi', 'word_indices': [9]}, {'type': 'MRWi', 'word_indices': [13]}, {'type': 'MRWi', 'word_indices': [19]}]"""""")
print([m['type'] for m in met_type])"
リポジトリ'fnichol/campy'のライブラリ'lib/campy/room.rb'にあるメソッド'Campy.Room.send_message'の機能を説明し、そのメソッドを呼び出すためのPythonコードを1行で書いてください。,"msg = 'message to send'; type = 'TextMessage'; response = requests.post(f'/room/{room_id}/speak.json', json={'message': {'body': msg, 'type': type}})"
データベースの接続情報を表示する,print(db.connection.settings)
単語の重要度を表す確率の配列`word_probas`から、最も重要な単語を3つ表示する,"sorted(word_probas, reverse=True)[:3]"
クラス`Expectacle::Thrower`の`previewed_host_param`メソッドのコードを生成する,"def previewed_host_param
      host_param = @host_param.dup
      enable_mode = @enable_mode
      @enable_mode = false
      host_param[:username] = embed_user_name
      host_param[:password] = embed_password
      host_param[:ipaddr] = embed_ipaddr
      host_param
end"
コマンドラインオプションを解析する,"import argparse
parser = argparse.ArgumentParser()
# パーサにオプションを追加する
args = parser.parse_args()"
ファイル'river.txt'に記述されているリバーネームの中から、'Tapsu'という単語を含むリバーネームを探し出す,"with open('river.txt', 'r') as f:
    for line in f:
        if 'Tapsu' in line:
            print(line)"
リストに格納されているファイル名を表示する,for file in file_list: print(file)
Markdownのテキストからヘッダーをスプリットする,"def splitHeader(content):
    lines = content.split('\n')
    if lines[0].strip():
        return lines[0], lines[1:]"
指定のディレクトリ内の画像ファイルを読み込み、リサイズして保存する,"for file in os.listdir(directory): img = Image.open(os.path.join(directory, file)) img = img.resize((width, height)) img.save(os.path.join(directory, file))"
リポジトリ内の相対パスから、ファイル情報のディクショナリを取得する,"def get_file_info(self, relativePath): relativePath = self.to_repo_relative_path(path=relativePath, split=False) fileName = os.path.basename(relativePath)"
ネストされているリストのフラット化,"import itertools
flattened_list = list(itertools.chain(*nested_list))"
Tumen'という都市の行政の長は誰か,Ruslan Nikolaevich Kukharuk
リストから重複する要素を削除する,list(set(my_list))
リスト`nums`の中から重複する要素を削除する,list(set(nums))
リポジトリ'slideshow-s9/slideshow'の'slideshow-models/lib/slideshow/helpers/capture_helper.rb'にある'Slideshow.CaptureHelper.content_for'関数の説明を表示する,"print(""""""Called in pages and partials to store up content for later use. Takes a\n string and/or a block. First, the string is evaluated, and then the\n block is captured using the capture() helper provided by the template\n languages. The two are concatenat..."""""")"
コンテナラッパーをスタックにプッシュする,containerStack.addFirst(container)
メモリ位置ebp+var_aの内容が0かどうかを比較する,"cmp [ebp+var_a], 0"
Rubyのコンテナレジストリのビルドステップを作成する,"Azure::ContainerRegistry::Mgmt::V2018_02_01_preview.BuildSteps.create(resource_group_name, registry_name, build_task_name, step_name, build_step_create_parameters)"
リストlから、mまたはnで割り切れる数を見つける,"list(filter(lambda x: x % m == 0 or x % n == 0, l))"
文字列`context_1`と`context_2`から、`target_word`の品詞`pos`と位置を抽出する,"print(f'target_word: {target_word}, pos: {pos}, location1: ({target_word_location_1.char_start}, {target_word_location_1.char_end}), location2: ({target_word_location_2.char_start}, {target_word_location_2.char_end})')"
データベースの設定を表示する,print(settings.DATABASES)
二つの線分`lineSegment1`と`lineSegment2`の交点を求める,"def intersect(lineSegment1, lineSegment2):
    x1, y1 = lineSegment1.point1
    x2, y2 = lineSegment1.point2
    x3, y3 = lineSegment2.point1
    x4, y4 = lineSegment2.point2
    
    denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
    if denom == 0:
        return None
    
    px = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) / denom
    py = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) / denom
    return (px, py)"
二つの線分の交点を返す,"def intersect(line1, line2):
    x1, y1 = line1[0]
    x2, y2 = line1[1]
    x3, y3 = line2[0]
    x4, y4 = line2[1]
    
    denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
    if denom == 0:
        return None
    
    x = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) / denom
    y = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) / denom
    return (x, y)"
SCons.Variablesモジュールを使って、リストから選択する変数を定義する,"opts = Variables() opts.AddVariables(('var1', 'description of var1', ['option1', 'option2', 'option3']))"
ロシア語の文字列を解析し、正解の選択肢を出力する,"import json
data = json.loads('{""text"": ""\\u041c\\u043d\\u043e\\u044e \\u0431\\u044b\\u043b\\u0430 \\u043f\\u0440\\u0435\\u0434\\u043b\\u043e\\u0436\\u0435\\u043d\\u0430 \\u0434\\u0440\\u0443\\u0433\\u0430\\u044f \\u043a\\u043e\\u043d\\u0441\\u0442\\u0440\\u0443\\u043a\\u0446\\u0438\\u044f \\u0444\\u0440\\u0430\\u0437\\u044b, \\u..."", ""label"": ""\""correct\"""", ""options"": ""\""['\\u043a\\u043e\\u043d\\u0441\\u0442\\u0440\\u0443\\u043a\\u0446\\u0438\\u044f', '\\u0444\\u0440\\u0430\\u0437\\u044b']\""""}')
print(data['answer'])"
ロシア語のテキスト内で同音異義語の正しい意味を見つける,"options = eval(options)
if reference in options:
    print(reference)
else:
    print(options[0])"
ファイル'utemp.sort'から整数の配列を取得し、その配列の最大値と最小値を表示する,"import numpy as np
a = np.loadtxt('utemp.sort')
print(f'Max: {a.max()}, Min: {a.min()}')"
プロジェクト'qemu'のコミット'69ef1f36b0f882fc5ba9491fb272fa5f83ac1d3d'にある関数'qmp_migrate_set_parameters'の引数を表示する,"print(""void qmp_migrate_set_parameters(bool has_compress_level,\n                                int64_t compress_level,\n                                bool has_compress_threads,\n                                int64_t compress_threads,\n       ..."")"
関数'term_eol'の中身を表示する,"print(""""""static void term_eol(void)\n\n{\n\n    term_cmd_buf_index = term_cmd_buf_size;\n\n}\n"""""")"
データベースの設定を表示する,print(settings.DATABASES)
Rubyのクラスメソッド`Jets::Resource::ApiGateway::BasePath.Role.rest_api_id`を呼び出し、その結果を表示する,print(Jets::Resource::ApiGateway::BasePath.Role.rest_api_id())
リスト'li'をpretty printする,"import pprint
pprint.pprint(li)"
リストの中の素数の合計を計算する,"def sum_of_primes(n):
    primes = [True] * (n + 1)
    primes[0] = primes[1] = False
    for i in range(2, int(n ** 0.5) + 1):
        if primes[i]:
            for j in range(i * i, n + 1, i):
                primes[j] = False
    return sum(i for i in range(n + 1) if primes[i])"
ネストされたリスト`nested_list`の中から、特定の文字列`'Dressing to Create Curves'`を含むリストを抽出する,[l for l in nested_list if 'Dressing to Create Curves' in l]
スタックに 16 進数 '0x45525649' を push する,push(0x45525649)
データベースの設定を表示する,print(settings.DATABASES)
ロシアのツルスカヤ州の行政長官は誰か,"print(""Aleksey Dyumin"")"
ファイル名'test.txt'の文字列を変数`content`に読み込む,"with open('test.txt', 'r') as f: content = f.read()"
メンバーの役割を一括で設定する,"def set_roles(role, reason=None):
    role_ids = role_id_array(role)
    API.Server.update_member(self.bot.token, self.server.id, self.user.id, roles=role_ids, reason=reason)"
コンテナの名前と指定のパターンに一致する次のスナップショットのインデックスを返す,"func (c *Cluster) ContainerNextSnapshot(project, name, pattern string) int {
	base := name + shared.SnapshotDelimiter
	length := len(base)
	// 処理ロジックを記述
	return index
}"
カウンターを減らし、カウントが0でない場合にfillラベルにジャンプする,while count > 0: count -= 1 goto fill
リストに含まれる単語の出現頻度を表示する,"from collections import Counter
print(Counter(word_list))"
ツリー`ivt`に、指定された区間`ivl`とその値`val`を持つノードを挿入する,"ivt.Insert(ivl, val)"
GitHubリポジトリのURLを引数として受け取り、リポジトリ内のファイル一覧を出力する,g = Github() repo = g.get_repo(url.split('/')[-2] + '/' + url.split('/')[-1]) for file in repo.get_contents(''): print(file.path)
ファイル'sample.txt'を開き、内容を変数'content'に読み込む,"with open('sample.txt', 'r') as f: content = f.read()"
リスト`card_list`の中から空白のフィールドを見つけ、それを空のタロットカードの位置に移動させる,"for i, card in enumerate(card_list): if card == '': card_list[i] = card_list[-1]; card_list.pop()"
データベースの設定を表示する,print(settings.DATABASES)
リストの要素を昇順に並べ替える,sorted(li)
数値`n`を入力として受け取り、1から`n`までの数字の最小公倍数を求める,"def smallest_multiple(n):
    if n <= 2:
        return n
    i = n * 2
    factors = [num for num in range(n, 1, -1) if i % num == 0]
    while True:
        if all(i % f == 0 for f in factors):
            return i
        i += n"
関数`fill_gv_table`の引数の意味と処理内容を説明してください,"この関数は、256 + 2 * YUVRGB_TABLE_HEADROOM 要素の整数配列を埋めるものです。引数 table は埋めるべき配列、elemsize は要素のサイズ、inc は増分を表します。この関数は、各要素に対して以下の計算を行います:

int off = -(inc >> 9);

これによって、各要素の値が off によってシフトされます。この処理の目的は、YUVからRGBへの変換テーブルを作成することだと考えられます。"
Жаленка-нейを含む河川を特定する,"print([s for s in ['Тверца', 'Волги'] if 'Жаленка' in s])"
クラス`Effigy.ExampleElementTransformer`のメソッド`clone_and_transform_each`の機能を説明し、そのメソッドを1行のPythonコードで実現する,"def clone_and_transform(collection, func): return [func(item) for item in collection]"
"与えられた2次元平面の原点から点(d, 0)までの最小ジャンプ回数を求める関数を書いてください。","def min_Jumps(a, b, d):
    temp = a
    a = min(a, b)
    b = max(temp, b)
    if (d >= b):
        return (d + b - 1) // b
    if (d == 0):
        return 0
    if (d == a):
        return 1
    else:
        return (d + a - 1) // a"
"Малый Улужай - река в России, протекает в Республике Алтай. С какой рекой сливается река, в которую впадает Малый Улужай?",print('Кокса')
スリランカ語の文章を英語に翻訳し、その訳文の単語確率を表示する,"translate = translator.translate(text, src='si', dest='en') print(translate.word_probas)"
ヒンディー語の記事から、英語のURLとセクション名を取得する,"english_urls = json.loads(article.english_url)
print(english_urls)
english_sections = json.loads(article.english_section_name)
print(english_sections)"
ネストされたリスト`xhci`のインターラプタ`intr`の`er_start`と`er_size`を設定する,"intr = xhci.intr[v]
intr.er_start = 0
intr.er_size = 0"
ファイル'test.txt'の内容を読み込み、各行を要素とするリストを作成する,"with open('test.txt', 'r') as f: lines = f.readlines()"
ドキュメント'newstest2019'の'335'番目の文の参照を表示する,print(doc_ref)
ロシアの川「Солоная」が別の川に流れ込む,print('Вятки')
ファイルパス'file_path'の文字列をWindows形式に変換する,"import shlex
result = shlex.quote(file_path)"
StackOverflowの日本語の質問を解決するために、y軸とx軸をラベル付けし、データをプロットする,"plt.figure() plt.xlabel('x') plt.ylabel('y') plt.plot(x, y)"
ディクショナリ`VAR_1`の中から`STRING_1`というキーを持つ要素を`b`という値で更新する,self.VAR_1[STRING_1] = b
ネストされたリスト`li`内の単語の出現頻度を辞書形式で表示する,"from collections import Counter
flat_list = [item for sublist in li for item in sublist]
print(dict(Counter(flat_list)))"
ネストされたリスト`nested_list`の各要素の長さを表示する,[len(x) for x in nested_list]
指定されたメトリクスをキューから取得する,"def get_metrics_data_queue(self, name, queue_name, metric, rollup, filter_expresssion):
    response = self._perform_get(self._get_get_metrics_data_queue_path(name, queue_name, metric, rollup, filter_expresssion))"
データベースの設定を表示する,print(settings.DATABASES)
リストに含まれる単語の数を数える,len(set(word_list))
リストの要素を指定した数だけ右に回転させる,"def rotate_right(lst, m):
  return lst[-m:] + lst[:-m]"
ドキュメントID 'Solar sail'内の'nmt_output'の値を表示する,print(nmt_output)
Obter o nome de todas as classes definidas em um módulo Python,dir(__import__('module_name'))
リストストアを使って、指定された主題に関するフォームをレンダリングする,"def render_forms(store, subject):
    kb.fetcher.nowOrWhenFetched(store.uri, subject, lambda ok, body: ..."
時間の長さを表す自然言語の文字列`str`を受け取り、その時間の長さを表すTimeオブジェクトを返す,"def parse_age(str):
    ord, word = str.split(maxsplit=1)
    ord = int(ord)
    word = word.rstrip('s')
    
    for mag, term in TIME_INTERVALS:
        if term == word:
            return now - timedelta(seconds=ord * mag)
    
    return None"
"Тирасполь является городом, расположенным на левом берегу реки Днестр. Кто является главой администрации этого города?","Dovgopol, Oleg Anatolievich"
"Тирасполь, столица Приднестровской Молдавской Республики, является городом на левом берегу Днестра. Кто является главой администрации в этом городе?",print(mayor_of_tiraspol)
ロシア語の「Урзюмка」という語を含む文字列を変数に格納し、その値を表示する,"text = '""Урзюмка — река в республике Марий Эл и Кировской ...""' 
print(text)"
ロシアの川である'Elbashe'が'Berdya'川に流れ込む,print('Elbashe is a river in Russia that flows into the Berdya river.')
ファイルを出力ストリームにコピーする,"with open(src, 'rb') as fin, open(fileOut, 'wb') as fout: fout.write(fin.read())"
リストの中身を逆順にする,li[::-1]
リストの各要素に数値を割り当てる,"for i, x in enumerate(lst): lst[i] = float(x)"
ファイル'test.txt'の内容を読み込み、各行の最初の2文字を表示する,"with open('test.txt', 'r') as f: for line in f: print(line[:2])"
リストに含まれる文字列をカンマ区切りで表示する,"print(','.join(list))"
リストデータ `product.imprints` から最初のインプリントオブジェクトを取得し、それがnilでない場合は新しいインプリントオブジェクトを作成する,composite = product.imprints.first if not composite.nil? composite = ONIX::Imprint.new() product.imprints << composite end
JAXBElement<TypenHaus>オブジェクトを作成する,"@XmlElementDecl(namespace=""http://www.immobilienscout24.de/immobilientransfer"", name=""TypenHaus"", substitutionHeadNamespace=""http://www.immobilienscout24.de/immobilientransfer"", substitutionHeadName=""TypenHaus"")"
画像`image`内の線の座標を抽出する,extract_from_image(image)
HTML特殊文字を読みやすい文字に置き換える,"def replace_entities(ustring, placeholder=' '):
    def _repl_func(match):
        try:
            if match.group(1):
                # Numeric character reference
                return unichr(int(match.group(1)))
        except ValueError:
            pass
        return placeholder"
ターゲットアドレス`vaddr`に対応するメモリリージョンのセクション`section`を取得し、インデックス`index`を表示する,"section = memory_region_find(env->address_space_memory, vaddr, size) index = section.offset_within_region"
スタックに文字列'0x8223'を追加する,stack.append('0x8223')
カラムのサイズに基づいてテーブルヘッダーを出力する,"def printFieldsHeader(self, f, d):
    fstr = ""Field Name""
    dstr = ""Description""
    f = f'{f:>{len(fstr)}}'
    d = max(d, len(dstr))
    print(f'{fstr:{len(fstr)}} {dstr:{d}}')"
関数`tcg_region_reset_all()`内のコードをPythonで1行で表現する,for i in range(n_tcg_ctxs): tcg_region_initial_reset(i)
座標系`from_proj`から座標系`to_proj`への変換を行う,"from pyproj import Transformer
transformer = Transformer.from_crs(from_proj, to_proj)
x, y = transformer.transform(latitude, longitude)"
座標`lat/lon`をプロジェクション座標に変換する,"latLonToProj(lat, lon, latIndex, lonIndex)"
リスト`points`の中心点を計算する,"import math
def get_center(points):
    x_sum = sum(p.x for p in points)
    y_sum = sum(p.y for p in points)
    return Point(x_sum / len(points), y_sum / len(points))"
リスト`rivers`内に含まれる川の名前を表示する,for river in rivers: print(river)
リストの中からランダムに要素を選択する,"import random
random.choice(my_list)"
パスワードの長さが6文字以上12文字以下、英小文字と数字を含む場合にTrueを返す関数を作成する,"import re
def is_valid_password(password):
    if len(password) < 6 or len(password) > 12:
        return False
    if not re.search(r'[a-z]', password):
        return False
    if not re.search(r'[0-9]', password):
        return False
    return True"
Listează toate verbele neregulate din engleză cu forma de infinitiv,"irregular_verbs = ['be', 'have', 'do', 'say', 'go', 'can', 'will', 'shall', 'may', 'must', 'ought', 'will', 'would', 'should', 'could', 'may', 'might', 'must', 'shall', 'will', 'would']"
グラフの部分グラフを作成する,"def sub_graph(name, attrs={}): graph = component SubGraph, [name], attrs yield graph if block_given() return graph"
ニジニー・ノヴゴロド(ゴーリキーと呼ばれることもある)の立法機関は何ですか?,Городская думы Нижнего Новгорода
URLパスから位置引数と名前付き引数を抽出する,parse_qs(urlparse(url).path)
データベースのテーブル名を取得する,print(connection.introspection.get_table_list(connection.cursor()))
テンプレート内でコンテキストを利用可能なように、pdbのset_traceを実行する,"try:
    import ipdb
    set_trace(context)
except ImportError:
    import pdb
    print(""For best results, pip install ipdb."")
    set_trace(context)"
与えられた文字列`text`を逆順にして表示する,print(text[::-1])
与えられた分数を小数に変換する,"fractions.Fraction(分子, 分母).as_float()"
ファイルシステムにディレクトリを作成し、そのパスを表示する,os.makedirs('new_directory') print(os.path.abspath('new_directory'))
ツイートの文字列`text`から、ハッシュタグを含む単語のリストを取得する,hashtags = [word for word in text.split() if word.startswith('#')]
ファイル'data.json'から'main_text'フィールドの内容を取り出し、その中に含まれる'Мологи'という単語の位置と長さを表示する,"import json
with open('data.json', 'r') as f:
    data = json.load(f)
    text = data['main_text']
    start = text.index('Мологи')
    length = 6
    print(f'Мологи is found at position {start} with length {length}')"
ファイル'test.txt'の内容を読み込み、各行の単語数をカウントしてリストで返す,"with open('test.txt', 'r') as f: return [len(line.split()) for line in f]"
指定された文字列を含むデータベースのエントリを検索する,entries = MyModel.objects.filter(field__contains=string)
データベースのテーブルの列名を取得する,print([col.name for col in Table.__table__.columns])
ヤレヴァン (Yerevan) の立法機関の名称は何ですか?,ヤレヴァン市議会
ヴァルタン・ルベノヴィッチ・グリゴリアンという人物の生年月日と出身地を教えてください。,"Vartan Rubenovič Grigorjan (26 января 1929, Diližan, Армения)"
ドキュメント'test.txt'の内容を表示する,"with open('test.txt', 'r') as f: print(f.read())"
ロシアのチュラ市の行政長官を表示する,print('Евгений Авилов')
ストレージに`bucket`を保存する,"def set(bucket): @queries['set'].execute(bucket.name, bucket.current, bucket.max, bucket.min, bucket.cost)"
バクテリアにインスリンを生成させるためのプロセスを説明する,bacteria.insert(human_insulin_gene)
文字列`ax`の値をメモリ位置`[ebp+22]`に移動する,"mov [ebp+22], ax"
リストに含まれる河川の名称を表示する,for river in river_list: print(river)
ロシア語の記事から、地域の行政長官の名前を抽出してください,"import re
name = re.search(r'[А-Я][а-я]+ [А-Я][а-я]+', main_text).group()"
"Эне-Термотъега (""устар."" Большая Термоть-Ега) и Пывъях (""устар."" Пыв-Ях) - какие реки сливаются?",Пывъях и Эне-Термотъега
カロリー消費の記録を表形式で整理する,"df = pd.DataFrame(activities, columns=['activity', 'calories'])"
ツイートのテキストから特定の単語を含むツイートを抽出する,tweets = [tweet.text for tweet in api.search(q='特定の単語') if '特定の単語' in tweet.text]
ツメニの生年月日と出身地を表示する,"print(f'{viktor_evgenevich_leonenko.birth_date}, {viktor_evgenevich_leonenko.birth_place}')"
ワードリストの各単語を反復処理する,"def each_word(&block):
    if @path:
        with open(@path) as file:
            for line in file:
                yield line.strip()
    elif @words:
        for word in @words:
            yield word"
リスト`instance_variables`の各要素に対して、`@#{name}` という形式の変数名を使って値を設定し、最後にselfを返す,"def set_variables(instance_variables): instance_variables.each {|name, value| instance_variable_set(""@#{name}"", value)} yield(self)"
RandomDistributed エンコーダのパラメータを正しく設定する,"def tune_random_encoder_params(params, min_val, max_val, min_resolution):
    params['modelConfig']['modelParams']['sensorParams']['encoders']['RandomDistributed'] = {'minVal': min_val, 'maxVal': max_val, 'resolution': min_resolution}"
"Мариуполь - город в Приазовье Донецкой области, законодательный орган которого называется",горсовета
データベース'test_db'の設定を表示する,print(settings.DATABASES['test_db'])
ファイル'test.csv'を読み込み、各行をリストに保存する,"with open('test.csv', 'r') as f: data = [line.strip().split(',') for line in f]"
ファミリーフューズのデータベースから、turnstileが使われる場所を検索し、Pythonコードで表示する,"places = ['subway', 'amusement park', 'stadium', 'grocery', 'department store', 'movie theater', 'drugstore', 'zoo']
print(places)"
固体の性質を表す日本語の文を受け取り、それに対応するPythonコードを生成する,"def is_solid(text):
    if '固体' in text and '形状' in text and '体積' in text:
        return True
    else:
        return False"
FilemakerLayoutDocumentオブジェクトをJAXBで読み込み、その内容をコンソールに出力する,doc = FilemakerLayoutDocument.fromObject(layout)
リストの要素を昇順にソートする,sorted(li)
文字列`str`を40文字以内に切り詰め、末尾に'..'を付けて表示する,"str = mb_strimwidth(str, 0, 40, '.. ')"
リスト`color`にあるRGB値を持つデータを、write_spark_color関数を使って書き出す,"for c in color:
    write_spark_color(element, c)"
リスト`river_names`内にある、別の川の名称を見つける,set(river_names) - {river_name}
ファイルの内容を読み込み、各行を要素とするリストを作る,"with open('file.txt', 'r') as f: lines = f.readlines()"
リストから重複する要素を削除する,list(set(my_list))
ウォーズ博士の研究について説明する,print('ウォーズ博士の研究は、自然言語処理における重要な貢献の1つです。博士は機械学習とディープラーニングのアプローチを用いて、言語の意味理解や文書要約などの課題に取り組んできました。その研究成果は、様々な自然言語処理のアプリケーションに活用されています。')
文字列`str1`と`str2`を部分文字列として含む最短の文字列の長さを求める,"def super_seq(str1, str2):
        m, n = len(str1), len(str2)
        if m == 0:
            return n
        if n == 0:
            return m
        if str1[-1] == str2[-1]:
            return 1 + super_seq(str1[:-1], str2[:-1])
        return 1 + min(super_seq(str1[:-1], str2), super_seq(str1, str2[:-1]))"
TextRankグラフから単語ペアを生成する,"def get_tiles(graf, size=3):
    keeps = list(filter(lambda w: w.word_id > 0, graf))
    keeps_len = len(keeps)
    for i in range(keeps_len):
        for j in range(i+1, min(i+size, keeps_len)):
            yield (keeps[i].word, keeps[j].word)"
リスト`river_list`に含まれる河川名を表示する,for river in river_list: print(river)
QEMU内のvmxnet3ドライバ内の`vmxnet3_rx_need_csum_calculate`関数の定義を説明するPythonコードを1行で生成してください,"def vmxnet3_rx_need_csum_calculate(pkt, pkt_data, pkt_len):
    vhdr = pkt.virtio_net_hdr"
同じ間隔のRangeオブジェクト`r`と交差するようなRangeオブジェクトを作成する。ただし、両方のRangeに間隔がある場合の交差はまだサポートされていない,r.intersect(r)
"Государство, описанное в тексте, было формой правления",print('абсолютная монархия')
ネストされたリスト'li'からカテゴリーに関する情報を抽出する,for item in li: if 'category' in item: print(item['category'])
ネストされているディクショナリ`data`の各要素の値を表示する,"for k, v in data.items(): print(v)"
HTMLファイル'test.html'を開き、テキストオブジェクト'text'をutf-8で保存する,"with open('test.html', 'w', encoding='utf-8') as f:
    f.write(text)"
ファイル'speech.rb'内のメソッド'bytes'で、Text-to-Speechの変換結果をmp3ファイルのバイト列として取得する,"def bytes_to_mp3():
    speech = bytes_wav
    res = IO.popen(std_lame_command(command_options), 'r+') do |process|
        process.write(speech)
        process.close_write
        process.read
    end
    res.to_s"
データベースの表`table_name`の空き容量を取得する,exec sp_spaceused 'table_name'
カディラックの新しいスローガンを作成する,"""Dare Greatly"""
データベースの設定を表示する,print(settings.DATABASES)
ファイル'zip_file'の内容をテンポラリーの場所に書き込み、抽出できるようにする,"with tempfile.NamedTemporaryFile() as tmp_file:
    tmp_file.write(zip_file)
    tmp_file.seek(0)
    yield tmp_file"
esi レジスタに格納されているアドレスの先頭バイトが 0xD より小さい場合は wrap_around ラベルにジャンプし、そうでない場合はそのバイトから 0xD を減算する,"if byte[esi] < 0xD: goto wrap_around
else: byte[esi] -= 0xD"
動的な間隔でスライスを反復処理するジェネレータを作成する,"def partitionAtIntervals(data, intervals):
    assert sum(intervals) <= len(data)
    start = 0
    for interval in intervals:
        end = start + interval
        yield data[start:end]
        start = end"
PluginInfoProviderクラスのインスタンスをオプションに設定する,options.pluginInfoProvider = options.pluginInfoProvider or PluginInfoProvider()
数値を固定小数点表記で整形する,"def format_number(value, precision):
    if (isToFixedBroken):
        precision = precision or 0
        pow = Math.pow(10, precision)
        return (Math.round(value * pow) / pow)"
GTK Notebookの子ウィジェットを指定した位置に移動する,"v.gtk_notebook_reorder_child(child.toWidget(), position)"
Pythonを使って、リストの中に含まれる単語の出現回数を数える,"from collections import Counter
word_counts = Counter(word_list)"
ネストされたリスト'li'の中にある文字列をすべて大文字に変換する,[[s.upper() for s in inner_list] for inner_list in li]
データベースのテーブル構造を表示する,print(models.get_models())
ファイルから読み取った文字列'text'をutf-8でエンコードして表示する,print(text.encode('utf-8'))
リストli内に含まれる重複のない要素を取り出す,list(set(li))
ファイル内のすべてのリンクを抽出し、リストとして出力する,"import re
links = re.findall(r'<a href=""(.*?)""', text)"
データベースの設定を表示する,print(settings.DATABASES)
引数`workspace_id`、`input`、`intents`、`entities`、`alternate_intents`、`context`、`output`、`nodes_visited_details`を使って、Assistantサービスのメッセージを送信する,"message(workspace_id, input, intents, entities, alternate_intents, context, output, nodes_visited_details)"
InputStream`is`から読み取った内容をbyte配列として取得する,"return getFileByteContent(is, 'UTF-8')"
DataObjectInterfaceオブジェクト`$dataObject`の行タイプを変更する,dataObject.changeLineType($dataObject)
ネパールに存在する5つの季節的な地域の詳細を表示する,print(translation.en)
Ruby関数 `MiniCache.Store.load` の説明に従って、与えられたデータを保存する,"data.each { |key, value| check_key!(key); set(key, value) }"
クラスに`type`という整数型のフィールドがあり、そのクラスのToStringメソッドを実装して、`type(数値)`という形式の文字列を返す,"def __str__(self):
    return f'type({self.type})'"
データベースに保存されている`user`テーブルの`name`カラムの値を取得する,"User.objects.values_list('name', flat=True)"
"Агитке реке, в которую впадает река Вагай","Агитка - река в Тюменской области России, правый приток Иртыша"
2つの整数`a`と`b`が同じ桁数かどうかを判断するPythonの関数を書く,"def same_length(a, b):
    return len(str(a)) == len(str(b))"
"Кемь - река, в которую впадает река Туренояя",print('Туренояя')
ランダムな初期値を設定する際に、-2から2の一様分布を使用する,"sample_uniform_initial_state(parameter, return_constrained=True, init_sample_shape=(), seed=None)"
リスト`river_list`内にある河川の名称を表示する,for river in river_list: print(river)
次の曲の歌詞を完成させる: 「The Beatles 'Penny Lane'」,Behind the shelter in the middle of a roundabout
与えられたリスト`li`の中から偶数の要素のみを抽出して新しいリストに格納する,[x for x in li if x % 2 == 0]
リストに含まれる 'Локчим' という単語を含むツイートを検索する,search = api.search(q='Локчим')
リストの中にある単語の出現回数を表示する,"from collections import Counter
words = ['the', 'promoter', 'segment', 'be', 'inactive', 'when', 'introduce', 'into', 'the', 'rat', 'glioma', 'cell', 'line', 'c6b4', 'the', 'rat', 'submandibular', 'cell', 'line', 'rsmt-a5', 'and', 'the', 'rat', 'pancreatic', 'beta', 'cell', 'lin']
print(Counter(words))"
ファイル 'data.csv' を読み込み、各行をリストとしてプリントする,"with open('data.csv', 'r') as f: for line in f: print(line.strip().split(','))"
ファイル'data.csv'を読み込み、各行のデータを変数'rows'に格納する,"with open('data.csv', 'r') as f: rows = f.readlines()"
文字列`s`をスプリッタ`splitter`で分割し、その結果をシャッフルして表示する,"a = s.split(splitter if isinstance(splitter, str) else '') ; random.shuffle(a) ; print(' '.join(a))"
ノードマップ`nmap`とオフセット`@offset`を使い、バッファ`@buffer`内の名前空間を解析する,"def update_partition(nmap, node): amap = nil beginning = @offset copied = False while @offset < @length: if @buffer[@offset] == ':': # Parse namespace. names..."
与えられたファイル名'test.txt'のテキストを読み込み、文字数を表示する,"with open('test.txt', 'r') as f: print(len(f.read()))"
ファイル名`fileName`、新しいログ`newLog`、ヘッダーラインの数`headerLineCount`を受け取り、ログをファイルにappendする関数を書く,"def appendLogToFileStream(fileName, newLog, headerLineCount):
    filePath = os.path.join(__dirname, '../../', fileName)
    with open(filePath, 'a') as f:
        f.write(newLog)"
StackOverflowの投稿から、文字列`'()'`を含むメソッドを持つクラスのPythonコードを生成する,"def toFormulaString(self):
    return '()'"
地域内のツイートを検索し、指定の単語を含むツイートを取得する,"api.search(q=keyword, geocode='地域の緯度,経度,半径')"
"文字列 ""0x6d6f646e"" をスタックに積む",push(0x6d6f646e)
リストの要素を逆順に並べ替える,list_name[::-1]
メモリに大エンディアンで値`value`を格納する,"self.memory.write_BE(value, size)"
リスト`river_list`から、'Tuntor'という名前の河川を抽出する,[river for river in river_list if river == 'Tuntor']
ロシアの河川'Shekhman'の流れ込む河川を特定する,print('Петровском')
データベースの設定を表示する,print(settings.DATABASES)
ネストされたリスト`li`から、リスト内の単語の出現回数を辞書形式で取得する,"from collections import Counter
Counter(word for words in li for word in words)"
リスト`river_list`内に出現する川の名称を数える,Counter(river_list)
GdkAtomInternを使ってatom名を取得し、それをプリントする,"atom = GdkAtomIntern(atomName, True) print(atom)"
リストにある外国語の翻訳を日本語に変換する,print([translation.get('hi') for translation in data])
データベースのテーブル`products`から価格が高い順にデータを取得し、ファイル`products.csv`に保存する,products = Product.objects.order_by('-price') products.to_csv('products.csv')
データベースの設定を表示する,print(settings.DATABASES)
配列`arr`の要素を倍の値に変換する,arr * 2
リスト`nums`から重複した数字を除いて新しいリストを作る,list(set(nums))
ロシア語の文字で書かれた地理情報から、リストとして地域名を抽出する,"import re
regions = re.findall(r'[ВадакстеВе\u043dта]+', main_text)"
リスト`rivers`に含まれる河川名を表示する,for river in rivers: print(river)
リスト`food_list`内の食べ物の種類を表示する,set(food_list)
リストのインデックス`index`から`removeCount`個の要素を削除し、`insert`リストを挿入する,array[index:index+removeCount] = insert
ツイッターの検索API`tweepy`を使って、文字列`'エレバン'`を含むツイートを取得する,api.search(q='エレバン')
データベースの設定を表示する,print(settings.DATABASES)
リストliにある数値の合計を求める,sum(li)
リスト`values`から離散的な範囲のリストを生成する,"def discrete_ranges(values, succ=lambda x: x + 1):
    ranges = []
    last = None
    for v in sorted(values):
        if last is None or succ(last) != v:
            ranges.append([v])
        else:
            ranges[-1].append(v)
        last = v
    return ranges"
"Dmitriy Aleksandrovich Burmistrov (14 октября 1983, Тула) является главой администрации в городе, где он родился",print(Dmitriy Aleksandrovich Burmistrov)
ファイル'data.txt'から読み取った数値リストを、降順にソートして表示する,nums = [int(line.strip()) for line in open('data.txt')] nums.sort(reverse=True) print(nums)
入力リスト`data`の各要素の絶対値を表示する,[abs(x) for x in data]
Ruby関数 `RDL::Typecheck.Env.bind`のドキュメントを表示する,"print(""force should only be used with care! currently only used when type is being refined to a subtype in a lexical scope"")"
"Пенюх - река в России, которая впадает в реку Клязьму?",print('Пенюх впадает в Клязьму')
ネストされた辞書`data`内の値を表示する,"for k, v in data.items(): print(k, v)"
Тульской области является главой региональной администрации,Алексей Дюмин
ファイル'data.txt'の内容を変数'content'に読み込む,"with open('data.txt', 'r') as f: content = f.read()"
リスト内の各要素の長さを表示する,[len(item) for item in li]
データベースに接続し、テーブル'users'の全てのレコードを取得する,cursor.execute('SELECT * FROM users')
Excelファイルを開き、指定したシート名のデータを取得する,"import openpyxl
workbook = openpyxl.load_workbook('file.xlsx')
sheet = workbook['シート名']"
"Валерий Эдмундович Берлин (род. 23 мая 1944, Тула, СССР) - кто является главой администрации города, где он родился?",print('Тула')
ファイルやディレクトリの変更を監視し、変更があったときにコールバック関数を呼び出すRubyのメソッド'watch'を実装する,"def watch(path, *flags, &callback):
    recursive = :recursive in flags
    flags = [flag for flag in flags if flag != :recursive]
    if not flags:
        @flags = [:all_events]
    else:
        @flags = flags"
Ivanov Oblast'は誰が統治しているか？,Stanislav Voskresenskiy
ロシア語で書かれた文章から、主要な人物の名前を抽出する,"import re
names = re.findall(r'""([^""]+)""', text)"
リスト`river_list`内に出現する河川の名前を表示する,for river in river_list: print(river)
リスト'li'の要素を逆順に表示する,print(list(reversed(li)))
ロシアの河川「ドムギリ」と「ヴィレジ」の関係を説明する,ドムギリ川はロシアの河川で、ヴィレジ川に流れ込む。
ロシアの河川の中で、エルギリ川がヴィレゴッド川に流れ込む,print('ヴィレゴッド川')
"2つの文字列 a, b を受け取り、b の文字が a に含まれるかどうかを判定する","for i in range(len(a)):
        if b[i] in a:
            continue
        else:
            print('False')"
ロシア国内の河川「ルトカ」がどの河川に合流しているかを示す,print('Рутка впадает в Волгу')
ネストされたディクショナリ`food_dict`の中のキー'type'の値を表示する,print(food_dict['type'])
流れ込む河川の名称を特定する,print(main_answers)
ネストされたリストをテーブル形式で表示する。ヘッダーがある場合は先頭に表示する。数値の書式は'%g'を使う。,"def print_table(table, header=None, sep='   ', numfmt='%g'): justs = [if_((isnumber(x)), 'rjust', 'ljust') for x in table[0]] print('
'.join(sep.join(format(x, numfmt).ljust(w) for x, w in zip(row, [max(len(format(x, numfmt)) for x in col] for col in zip(*row)))) for row in ([header] if header else []) + table))"
カウンターオブジェクト`counter`からキーと値のリストを取得する,list(counter.items())
データベースの設定を表示する,print(settings.DATABASES)
Тюменской областиにある河川Иртышの流域にある河川Туртасを特定する,Иртыш
リスト`river_list`内に出現する川の名前を見つける,for river in river_list: print(river)
ロシアの河川 Tondoshkaに流れ込む河川は何か,print('Biya')
ロシアの河川「トンドシカ」がどの河川に注ぐか説明せよ,"main_text = ""Тондошка — река в России, протекает в Республике ...""
for word in main_text.split():
    if word == 'Бия':
        print(f""トンドシカ川はビヤ川に注ぐ"")"
ロシア語のテキストから、最も高い場所を表す言葉を抽出する,"re.search(r'\u0412\u0435\u0440\u0448\u0438\u043d\u0430', text).group()"
文字列`aa`と`bb`の長さが同じかどうかを確認し、異なる場合は'NO'を出力する,if len(aa) != len(bb): print('NO')
ネストされたリスト'scores'の平均値を求める,sum(scores) / len(scores)
Databázovou tabulku `table` upravit a změnu oznámit,table.save() print('Tabulka byla změněna')
ロシアにある川「ビセルチ」の流入先を特定する,print('ビセルチ川はウフィ川に流入する')
現在のディレクトリにあるファイルの数を取得する,len(os.listdir())
リスト`rivers`内の各要素の長さを表示する,for river in rivers: print(len(river))
カスタムの入力/出力インターフェースを作成する,"class IOInterface: def __init__(self, output=None, input=None): self._output = output or (lambda: None) self._input = input or (lambda done: done())"
リストから重複する要素を削除する,list(set(li))
データベースの設定に含まれる'segid'の値を表示する,print(settings.DATABASES['segid'])
スライド内の画像を高解像度で保存する,"pptx = openpyxl.load_workbook('presentation.pptx') for slide in pptx.slides: for shape in slide.shapes: if hasattr(shape, 'image'): shape.image.save(f'{shape.name}.png')"
HTMLファイル'test.html'の内容からmanifest属性を削除する,$ = cheerio.load(contents); $('html').removeAttr('manifest')
"Ивановской области, кто является главой администрации в регионе?",Станислав Воскресенский
リストの中から最も小さい欠けている数を見つける,"def find_smallest_missing(arr):
    for i in range(len(arr)):
        if i not in arr:
            return i
    return len(arr)"
リストの中から最大値を取得する,max(li)
文字列`date_str`を'YYYY-MM-DD'形式の日付に変換する,"import datetime
datetime.datetime.strptime(date_str, '%Y-%m-%d').date()"
スタックにダブルワード0x2f2f2f2fとダブルワード0x7273752fをプッシュし、eaxレジスタをスタックレジスタに指すようにする,"push 0x2f2f2f2f
push 0x7273752f
mov eax, esp"
プラグインの`ReceiveComment()`関数を呼び出して、コメントを受け取る,o.plugin.ReceiveComment(comment)
ネストされたリスト'li'の各要素に含まれる単語の頻度を計算する,"from collections import Counter
Counts = [Counter(item) for item in li]"
"Диксонская Рассоха - река в России, протекает по Республике Коми. Сарёда - река в России, протекает по Республике Коми. С какой рекой сливается река, в которую впадает Диксонская Рассоха?","print(""Сарёда"")"
ロシアの河川「チクシナ」が流れ込む水域の名称を教えてください,print('Кожвы')
指定されたデータをJSON形式で返すPythonの関数を書く,"def as_json(data={}): session_id = parameters.delete(':session_id') or Thread.current[':keas_session_id'] return {'type': type, 'action': action, 'session_id': session_id}"
Ким является главой администрации в городе Душанбе?,Рустам Эмомали
ソースコード内の指定位置を示す,"def point_to_source(source, position, fmt=(2, True, '~~~~~', '^'), surrounding_lines, show_line_numbers, tail_body, pointer_char=fmt)"
MemoryRegion構造体`mr`のdirty_log_maskフィールドの値を返す,mr.dirty_log_mask
数値`0x4`をレジスタ`eax`に格納する,"push 0x4
pop eax"
リストから特定のパターンに一致する要素を検索し、その要素のインデックスと長さを取得する,"def search_pattern(li, pattern, searchPattern=MatchingStrategy.STARTS_WITH, index=0, size=10):
    return [i for i, x in enumerate(li) if searchPattern(str(x), pattern)]"
ロシアのどの川が、「Izver」という川に流れ込んでいますか?,"print(main_text.split('Izver')[0].split('река в России, протекает в Калужской обл')[1].split('в')[1].strip())"
オニオンの球根に食べ物がどこに保存されているか説明する,"As the onion matures, food reserves begin to accumulate in the leaf bases and the bulb of the onion swells."
収監中の人が時間を過ごす方法を挙げる,"print(['reading', 'lifting weights', 'watching tv', 'writing', 'making lic. plates', 'playing cards'])"
Футбольный клуб 'Линкольн Сити' играет в какой лиге,print('Лига 1')
"二次方程式の係数a, b, cから判別式を計算して、その結果を出力する","def discriminant(a, b, c):
        return b**2 - 4*a*c"
16進数の値'0x79616c70'をスタックにプッシュする,push 0x79616c70
異なる列サイズの行がある場合、欠落した列をNAで埋めて列サイズを等しくする,"def equalize_rows(rows):
    column_sizes = rows.collect{|r| r.size}
    return rows if column_sizes.uniq.size == 1
    max_size = column_sizes.max
    rows.map{|r| r + [nil] * (max_size - r.size)}"
"Большой Урал (""Большой Чуран"") - река в Оренбургской области, куда впадает река Самара",print('Самара')
FFmpegの`mjpeg_decode_scan`関数の引数について説明する,"def mjpeg_decode_scan(s, nb_components, Ah, Al):
    data = [None] * MAX_COMPONENTS
    linesize = [None] * MAX_COMPONENTS
    for i in range(nb_components):
        # 各コンポーネントのデータとラインサイズを取得する
    # 残りの処理を行う"
データベースに格納されているリスト'li'のデータを見やすく表示する,pprint.pprint(li)
与えられた文字列`str`と部分文字列`substr`から、`str`の中で最小の文字の位置を見つけ、その位置から3文字を`substr`に置き換えた新しい文字列を生成する,"def p_s(str, substr):
    min_idx = min(range(len(str)), key=str.__getitem__)
    return str[:min_idx] + substr + str[min_idx+3:]"
"SegID ""938""のデータを使って、単語の確率を表示する",print(word_probas)
"Русском городе Мариуполе законодательный орган, принимающий законы?",print(горсовета)
ロシア語のウィキペディアの記事から、マリウポリの地方議会について説明されている部分を抜き出してください,print(main_answers)
ロシア語の入力テキストから、マリウポリの立法機関の名称を抜き出してください,горсовета
マリウポリの立法機関は何か,"print(""горсовета"")"
Марииуполь (Mariupol) — город в Приазовье Донецкой области. Какой законодательный орган принимает законы в Донецкой области?,print(settings.DATABASES)
マリウポリ市の法制度機関は何か,print(settings.DATABASES)
ウクライナの都市マリウポリの議会について説明する,print('マリウポリの議会はマリウポリ市議会です。')
Тульская область является субъектом Российской Федерации. Кто является главой администрации в этом регионе?,print(settings.DATABASES['default']['NAME'])
ネストされたリスト`data_dict`の各要素の`z_scores`属性を表示する,for item in data_dict: print(item['z_scores'])
"""\u041f\u0430\u0440\u0430\u0431\u0435\u043b\u044c (\""\u0436\u0435\u043d.\"") (\u044e\u0436\u043d\u043e\u0441\u0435\u043b\u044c\u043a\u0443\u043f\u0441\u043a. \""\u041f\u0430\u0440\u0430\u0431\u0435\u043b\u044c\u0497 \u043a\u044b\u0433\u0435\"") \u2014 \u0432\u043e\u0434\u043e\u0442\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0440\u0435\u043a\u0430 \""\u041e\u0431\u0438\"" \u0438 \""\u041e\u0431\u044c""","print('Паrabель - водоток, в который впадает река ""Оби"" и ""Обь""')"
リストのネスト構造'li'を深さ5まで表示する,"from pprint import pprint; pprint(li, depth=5)"
上記のデータセットから、「単語の確率」を表示する,print(word_probas)
バッチ画像`images`を平坦な画像に変換し、`grid`に基づいてマージンを挿入する,"flat_images(images, grid=grid, bfill=1.0, bsz=(1, 1))"
クラス`Rib`の`Completion`クラスの`before_loop`メソッドのコードを表示する,print(Rib.Completion.before_loop.__doc__)
リストの中身をカウントして出力する,"from collections import Counter
print(Counter(li))"
文字列`str`の中で単語の数を数える,len(str.split())
データフレーム'df'の特定の列'col'の値を降順に並び替える,df[col].sort_values(ascending=False)
文字列`pattern`を使ってパスの置換を行い、結果を返す,"def sub(pattern, *rest, &block): path = @path.sub(pattern, '<mask>') do |*args| old = Thread.current[:pathname] end"
ロシアの河川'Малка'がどの河川に合流するかを示す,print('Малка (Свежая рыба) — река в России. Главный приток — река Терека.')
ネストされたリストの中にある文字列の長さを計算する,[len(s) for l in li for s in l]
リストの中から最も長い文字列を見つける,"max(li, key=len)"
Java コードのリストを受け取り、それぞれのコードをファイルに書き出す,"with open('output.txt', 'w') as f: for line in code_list: f.write(line + '\n')"
リスト内のエントリーをURLエンコーディングする,"import urllib.parse
[urllib.parse.quote(entry) for entry in li]"
リスト`item_list`から、世代を経て受け継がれてきた家庭の品物を出力する,for item in item_list: if 'generation' in item or '代' in item: print(item)
ロシア語のテキストから、質問に答えるためのPythonコードを1行で生成する,"import json
data = json.loads(""""""[{""label"": ""passage"", ""length"": 25, ""offset"": 537, ""segment"": ""\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435""}]"""""")
print(data[0]['segment'])"
リスト`temperature_list`の最小値と最大値を表示する,"print(min(temperature_list), max(temperature_list))"
データベースにテーブル `flor_traps` を作成する,create_table('flor_traps')
URLにリクエストを送り、レスポンスのrawデータを取得する,response.text
文字列に含まれる単語を1つずつ表示する,for word in input().split(): print(word)
リポジトリ 'codeplant/simple-navigation' の 'lib/simple_navigation/item_container.rb' ファイルにある 'SimpleNavigation.ItemContainer.renderer_instance' 関数のドキュメントを表示する,"""FIXME: raise an exception if :rederer is a symbol and it is not registred\n        in SimpleNavigation.registered_renderers"""
リスト`word_probas`内の負の対数確率の最も高い単語を表示する,"print(sorted(word_probas, reverse=True)[0])"
リスト`river_list`内にある川の名前を表示する,for river in river_list: print(river)
システムコール0x10をeaxレジスタに格納する,eax = 0x10
ロシアの川である「シヤ」川に流れ込む川を特定する,search = api.search(q='Сия')
"Алитус, город на юге Литвы, находится внутри какого административно-территориального образования?",Алитусского уезда
FFmpegコンテキスト`s`内のHEVCパラメータ設定`sps`を変更する,"set_sps(s, sps)"
"Большой Реват (устар. Агват) - река в России, протекающая в Республике Башкортостан. В какую реку впадает река, притоком которой является Большой Реват?",print('Зилим')
Виситеの出身地を表示する,print('Тистла')
"Гюмри (в некоторых дореволюционных источниках - Александрополь) - город в Армении, административный центр Ширакской области. Кто является главой администрации в этом городе?","Баласанян, Самвел Мисакович"
RowIndex が指定された場合、その行の CellValueRecordInterface の配列を取得し、それをループして処理する,for cell in records[rowIndex]: # do something with cell
文字列`word_probas`から、最も高い確率の単語を取り出す,"max(word_probas, key=float)"
ロシア語の文章から、その都市の行政長官の名前を抜き出す,main_answers[0]['segment']
データベースの接続設定を表示する,print(settings.DATABASES)
整数`num`が奇数かどうかを判定するPythonの1行のコード,bool(num & 1)
データベースの設定を表示する,print(settings.DATABASES)
ある数値`n_states`と、その数値に基づいてローカライズされた遷移行列を作成する,"def transition_local(n_states, width, window='triangle', wrap=False):
    if not isinstance(n_states, int) or n_states <= 1:
        raise ParameterError('n_states must be an integer greater than 1')
    # 遷移行列の作成処理"
ロシアの河川「Большой Лез」が「Сысола」川に合流する地点を特定する,print('Сысола')
ファイルの先頭から日付を検出し、見つからない場合はNilを返す,"def guess_date_format(data):
        line = data.readline()
        if not line:
            return None
        date = line[:len(line)-1]
        guessed_format = next((fmt for fmt in Qif::DateFormat::SUPPORTED_DATEFORMAT if datetime.strptime(date, fmt)), None)
        return guessed_format"
C#の`char[]`を受け取り、その内容をStringとして表示する,print(new string(chars))
Pythonで、ロシア語のテキストから、行政の最高責任者の名前を抽出してください,"import re
match = re.search(r'\u041f\u0451\u0442\u0440 \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u0438\u0447 \u0422\u0443\u043b\u0442\u0430\u0435\u0432', text)
if match:
    print(match.group())"
レジスタ`cl`の値がレジスタ`dl`の値と等しい場合は`init`ラベルにジャンプし、そうでない場合はレジスタ`cl`の値をインクリメントする,"if cl == dl:
    goto init
else:
    cl += 1"
JSONSerializerを使ってレコードのJSON表現を取得する,DS.JSONSerializer.html()
リスト`li`内の値を昇順に並び替える,sorted(li)
データベースのテーブル名を取得する,print(connection.introspection.get_table_list(connection.cursor()))
ネストされたリスト'scores'の平均値を計算する,sum(scores) / len(scores)
スタックにダブルワード0x2f2f2f2fと0x7273752fをプッシュし、ebxレジスタをスタックレジスタを指すようにする,"push 0x2f2f2f2f
push 0x7273752f
mov ebx, esp"
AWS EC2インスタンスのPlacementGroupを取得する,ec2.placement_groups()
ネストされているリスト`segid`の中身を表示する,print(segid)
16進数の値`0x64687373`をスタックにプッシュする,push 0x64687373
ROS TCPROSモジュールの`write_msg`関数の動作を説明し、Pythonで同様の機能を持つ1行のコードを生成する,"def write_to_socket(socket, msg):
    sio = StringIO()
    msg.serialize(sio)
    sio.seek(0)
    data = sio.read()
    socket.write(struct.pack(f'L{len(data)}', len(data)) + data)"
ロシアの都市チューラの市長は誰か,print('Юрий Цкипури')
データベースの接続情報を辞書形式で取得する,db_config = settings.DATABASES
"Where was the founder of the ""Miss World"" competition born?","print(""Holborn"")"
Олененский залив в Якутии впадает в какую реку?,print(main_answers)
二つのリストを受け取り、それらを要素ごとにzip化したリストを返す,"def zip_list(list1, list2):
    return list(map(list.__add__, list1, list2))"
ロシアの河川'Серёжа'の名称は何ですか?,print('Серёжа')
"Туле город в России, административный центр Тульской области. Кто является главой администрации в этом месте?",print(settings.DATABASES)
アルメニアの首都の名称は何か,Erevan
英語の文章'shrank from the attempt to alter them. In another instance of his'をピッグラテン語に変換する,ank-shray om-fray e-thay attempt-ay o-tay alter-ay em-thay. In-ay another-ay instance-ay of-ay is-hay
指定されたデータベースの設定を表示する,print(settings.DATABASES)
ロシアの河川「Терек」と「Малка」の関係を示す,"print('Терек и Малка - это реки, которые сливаются в России.')"
ロシア語の文字列`support_text`を英語に翻訳する,print(support_text.encode('utf-8').decode('utf-8'))
ピリャティン市の立法機関の名称を教えてください,городской совет
MethodVisitorインスタンス`mv`を使い、メソッド情報`methodInfo`からアノテーション情報`anns`を取り出して表示する,for ann in methodInfo.getAnnotations(): print(ann)
ネストされたJSON形式のデータを、インデントを付けて表示する,"import json
json.dump(data, indent=4)"
"ファイル名が'<ipython console>', '<input>', '<string>', '<console>', '<BackgroundJob compilation>'のいずれかであるかどうかを判断し、その場合にTrueを返す関数を作成する","def _should_recompile(self, e):
    return e.filename in ('<ipython console>', '<input>', '<string>', '<console>', '<BackgroundJob compilation>', None)"
リストの長さ`n`を超えるデータをスキップする,if len(data) > n: data = data[n:]
指定したタグのスコアの平均を計算する,"from django.db.models import Avg
Tag.objects.aggregate(AvgScore=Avg('score'))"
ネストされたリスト 'scores' 内の要素の平均値を求める,sum(scores) / len(scores)
ファイル'test.vcard'のvCardフィールドをRFC2425の形式でエンコードする,"def rfc2425encode(name, value, parameters=None, charset=""utf-8""):
    if not parameters:
        parameters = {}
    if type(value) is unicode:
        value = value.encode(charset)"
リストAから数値の左疑似逆行列を計算する,"import numpy as np
np.linalg.pinv(A)"
データベースの設定を表示する,print(settings.DATABASES)
データベースから受け取った`id`を使って、`prmFieldSet`と`args`を引数にした関数`func`を実行する,"func(s, id, prmFieldSet, args)"
ユシェンコフスカヤ川はウダイ川の支流である,print('ユシェンコフスカヤ')
オブジェクト`obj`を安全にブール値に変換する,"def safeJsonToBoolean(obj):
    str = safeJsonToString(obj)
    return str != None and Boolean.parseBoolean(str)"
ツイートの中に含まれる文字列'Mr. Mike Knight'を検索し、結果をリストで得る,api.search(q='Mr. Mike Knight')
ネストされているリストliの要素数を取得する,len([x for l in li for x in l])
入力された文字列`locale`、`format`、`match`、`variant`を使って、`locale.compiledFormats`にフォーマットを追加する,"def addDateInputFormat(locale, format, match, variant): locale.compiledFormats.insert(0, {'variant': variant, 'locale': locale, 'reg': regexp(format, match)})"
チェコのプロサッカーチーム'スパルタ'の所属リーグを特定する,print('Sparta is a Czech professional football club')
ランダムフォレストモデルの特徴量重要度をグラフィカルに表示する,"from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt

rf = RandomForestRegressor()
rf.fit(X, y)
plt.figure(figsize=(10, 6))
plt.bar(range(len(rf.feature_importances_)), rf.feature_importances_)
plt.xticks(range(len(rf.feature_importances_)), X.columns, rotation=90)
plt.show()"
ロシアの地域、ウリヤノフスク州の行政の長は誰か,s.i.morozov
Rodger Spottiswoodが生まれた場所を表示する,"print('Ottava, Ontario')"
Ruby関数 'get_io' の機能を説明し、Pythonのコードで同様の処理を行う,"def get_io(io, offset=0):
    if not isinstance(io, (IOBase, StringIO)):
        io = open(io, 'rb')
    io.seek(offset, 0)
    return io"
ロシア語のテキストから、ニジニ・ノヴゴロドの立法機関の名称を抽出する,print([x['segment'] for x in json.loads(main_answers)][0])
ファイル'data.txt'の内容を読み込み、単語の出現頻度をカウントする,"from collections import Counter
with open('data.txt', 'r') as f:
    text = f.read()
    word_counts = Counter(text.split())"
リストにある文字列を連結して表示する,print(''.join(li))
欠損値を指定の値に置き換える,df.fillna(value)
"Очаковка(«Тропарёвка», в верховьях также «Тарасовка») - с какой рекой сливается река, в которую впадает Кукринский ручей?",Очаковка сливается с рекой Раменки.
ロシア語の文章から、地名を抽出する,"import re
pattern = r'[А-Я][а-я]+ [А-Я][а-я]+'
locations = re.findall(pattern, text)"
GTKのスケールウィジェットを作成するための関数'ScaleNewWithRange()'の定義を書く,"func ScaleNewWithRange(orientation Orientation, min, max, step float64) (*Scale, error) {
    c := C.gtk_scale_new_with_range(C.GtkOrientation(orientation), C.gdouble(min), C.gdouble(max), C.gdouble(step))
    return &Scale{c}, nil
}"
リスト`grid`内の座標を、`border_grid`の範囲内に収まるように調整する,"border_origin = np.zeros(2)
border_origin[0] = np.mean(border_grid[:, 0])
border_origin[1] = np.mean(border_grid[:, 1])
grid_shifted = grid - border_origin"
ロシアの河川「Большая Золотанка」と「Улс」が合流する位置を特定する,"print('Большая Золотанка and Улс rivers meet at', 'Вишера')"
リストの中にあるURLをタイトルに変換する,"titles = [url.split('/')[-1].replace('-', ' ').title() for url in url_list]"
既存のimagemosaicからグラニュールを削除する,"def delete_granule(self, coverage, store, granule_id, workspace=None)"
"Иван Иванович Бедняков является главой администрации в регионе, где расположена Ивановская область?",Станислав Воскресенский
辞書オブジェクト`store`、インスタンス`institute_obj`、インスタンス`case_obj`、クエリ`variants_query`、ページ数`page`、1ページあたりの件数`per_page`を使って、バリエーションのリストを取得する,variant_count = variants_query.count() skip_count = (page - 1) * per_page variants = variants_query[skip_count:skip_count+per_page]
ロシア語のテキストを含むデータベースから、指定された長さのテキストを抽出する,"import json
data = json.load(open('database.json'))
text = data['support_text'][195:201]"
データベースのテーブル'user'から'name'列の値を取得する,"User.objects.values_list('name', flat=True)"
ファイルから1行ずつ読み取り、その行をリストに保存する,"with open(file_path, 'r') as f: lines = [line.strip() for line in f]"
ロシアの川の名前である'Песочня'の流域を特定する,print('Волга')
ロシアの都市Tulaの行政の長は誰か,"print(""Yuri Tskiripurin"")"
Tula市の行政の長は誰か,"print(""Evgeny Avilov"")"
ロシアの川「Нившера」の流域に関する情報を提供する,"print('Нившера - река в России, протекает в Республике Коми. Впадает в реку Вишера.')"
リスト`rivers`内に含まれる川の名称を表示する,for river in rivers: print(river)
ロシア語の文字列からアスキー文字列に変換する,"text.encode('ascii', 'ignore')"
ロシアの川 Biserть とどのような関係があるか,print(f'Biserть は Большой Ирмиз という川に流れ込む')
ツイッターAPIの`api`インスタンスを使って、ツイートに含まれる単語`word`を検索し、その結果をリストで取得する,"search = api.search(q=word, count=100)"
ツアーガイド'tour'を使って、エレバン市の立法機関を表示する,print(tour.Yerevan.legislative_body)
原子核の分裂によって放出される核エネルギーについて説明する,print('Nuclear energy is released when the nucleus of an atom is split.')
ロシアの川の名前を表示する,print('Кузобъю')
データベースの設定を表示する,print(settings.DATABASES)
ロシアの大きな河川「テレクト」がどの河川に注ぐか答えてください,print('Katuni')
データベースのエンジンを表示する,print(settings.DATABASES['default']['ENGINE'])
ルガンスカヤ州の行政単位の長を表示する,print(Luganskaya_Oblast.head)
VirtualBox.NATForwardedPort.destroyメソッドを使ってNATフォワーディングポートを削除する,"def destroy(update_collection=true):
    if not self.new_record():
        previous_name = self.name_was() if self.name_changed() else self.name
        self.parent.modify_engine(lambda nat: nat.remove_redirect(previous_name))
        self.parent_collection.delete(self)"
データベースの表`table_name`から特定の列`column_name`の値を取得する,cursor.execute('SELECT column_name FROM table_name') data = cursor.fetchall()
ヤムソベイ川に流れ込む河川を特定する,print('Ямсовей')
コマンドラインの引数`args`をリクワイアメントのセットに変換する,"def populate_requirement_set(requirement_set, args, options, finder, session, name, wheel_cache):
    for req in args:
        requirement_set.add_requirement(req)"
リストに含まれる単語の出現頻度をカウントする,"from collections import Counter
Counter(word_list)"
ボリス・クストディエフが描いた「グループ肖像画」の題材について説明する,キストディエフは1927年にアストラハンで生まれた画家で、「グループ肖像画」の作品で知られている。
ネストされたリスト`data`の中から、'label'が'passage'で'segment'が'Рустам Эмомали'である要素を見つける,next(item for item in data if item['label'] == 'passage' and item['segment'] == 'Рустам Эмомали')
statsmodels内のfdrcorrectionメソッドを使って、p値の配列`pvals`にBenjamini-Hochberg FDR補正を適用する,"from statsmodels.stats.multitest import fdrcorrection
fdrcorrection(pvals)"
StackOverflowの質問を解決するためのPythonコードを生成する。入力は、erevan (МФА: [jɛrɛˈvɑn]) — столица и крупнейший город Армении。,"import re
text = ""ереван (МФА: [jɛrɛˈvɑn]) — столица и крупнейший город Армении""
ans = re.search(r'(.*) — (.*)', text)
print(f""The capital city is {ans.group(1)} and it is the largest city in Armenia."")"
QEMU プロジェクトのomap_sti_writeファンクションの引数を解説する,"def omap_sti_write(opaque, addr, value, size):
        s = opaque
        if size != 4:
            return omap_badwidth(addr, size)"
1から n までの総セットビット数を数えるPythonの関数を書いてください,"def count_Set_Bits(n):
    n += 1
    powerOf2 = 2
    cnt = n // 2
    while powerOf2 <= n:
        totalPairs = n // powerOf2
        cnt += (totalPairs // 2) * powerOf2
        if totalPairs & 1:
            cnt += n % powerOf2
        powerOf2 <<= 1
    return cnt"
データベースの設定を表示する,print(settings.DATABASES)
ネストされているリスト'li'を見やすく表示する,pprint.pprint(li)
ファイル`test.txt`の内容を読み込み、各行をリスト`lines`に格納する,"with open('test.txt', 'r') as f: lines = f.readlines()"
インデントレベルに合わせて段落をフォーマットし、ヘルプ出力に含める,"def _format_text(self, text):
    text_width = min(self.width - self.current_indent, 11)
    indent = ' ' * self.current_indent
    return textwrap.fill(text, text_width, initial_indent=indent, subsequent_indent=indent)"
Linguistクラスの`tokens_probability`メソッドの説明を表示する,"print(""""""Internal: Probably of set of tokens in a language occurring - P(D | C)

 tokens   - Array of String tokens.
 language - Language to check.

 Returns Float between 0.0 and 1.0."""""")"
リスト`li`の要素を昇順でソートする,sorted(li)
指定された文字列から、対応するPythonコードを生成する,"import re
text = """"""\u0428\u044f\u0443\u043b\u044f\u0439 ( , \u0434\u043e 1917 \u0433\u043e\u0434\u0430 \u2014 \u0428\u0430\u0432\u043b\u0438, \u0428\u0430\u0432\u0435\u043b\u044c) \u2014 \u0433\u043e\u0440\u043e\u0434 \u043d\u0430 \u0441\u0435\u0432\u0435\u0440\u0435 ...""""""
matches = re.findall(r'\u0428\u044f\u0443\u043b\u044f\u0439', text)
print(len(matches))"
ティラスポルの市長の名前を表示する,"print('Dovgopol, Oleg Anatolievich')"
"Тирасполь, также ""Тирасполь"" - город на левом берегу Днестра. Кто является главой администрации в этом городе?","Довгопол, Олег Анатольевич"
リストli内の要素の合計値を求める,sum(li)
Нижний Новгородの立法機関は何ですか?,print(settings.DATABASES)
スタックに文字列'0x6567772f'をプッシュする,push 0x6567772f
ヨーロッパ最古の首都の名称を表示する,print('Ереван')
ヨーロッパ最古の首都の1つであるエレバンの特徴を説明する,print('エレバンは、アルメニアの首都で、ヨーロッパ最古の首都の1つです。古くから重要な都市で、歴史的建造物や文化的遺産が多数残されています。')
ファイル'test.txt'の内容を文字列として読み込む,"with open('test.txt', 'r') as f: text = f.read()"
パワースペクトログラムを対数スケールのデシベル(dB)に変換する,"import numpy as np
def power_to_db(S, ref=1.0, amin=1e-10, top_db=80.0):
    S = np.asarray(S)
    if amin <= 0:
        raise ValueError(""'amin' must be greater than 0"")
    S = 10 * np.log10(np.maximum(amin, S))
    if top_db is not None:
        S[S < S.max() - top_db] = S.max() - top_db
    return S"
ロシアの河川Okshaの名称を含む文章を表示する,"print(""\u041e\u0445\u0430\u043d \u2014 \u0440\u0435\u043a\u0430 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u043f\u0440\u043e\u0442\u0435\u043a\u0430\u0435\u0442 \u043f\u043e \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0425\u0430\u043d..."")"
エレバンの立法機関は何か,print('エレバン市議会')
ヨーロッパの首都であるエレバンの立法機関は何か,print('エレバン市議会')
"Что за законодательный орган работает в городе, столице Армении?",городским советом
単語確率`word_probas`の平均値を計算する,mean(eval(word_probas))
リストに含まれるロシア語の単語を数える,len([word for word in li if word in cyrillic_alphabet])
関数'Incline.SessionsController.new'の関数文書を表示する,"print(""GET /incline/login"")"
ロシアの都市チュメニの市長は誰か,print(settings.DATABASES['CITY_MAYOR'])
ロシアの都市Tyumenの行政の長は誰か,Ruslan Nikolaevich Kukharuk
ネストされた辞書 'data' の中にある 'segid' キーの値を表示する,print(data['segid'])
リストに格納されたコンテナの数を取得し、表示する,len(c)
リストに含まれる河川の名称を表示する,"print(['Нюролька', 'Васюгана'])"
2つのリスト内のタプルが同一かどうかを確認する関数を書いてください,"def check_identical(list1, list2):
    return list1 == list2"
リストの要素`item`を予備の場所に移動する,reserved_items.append(item)
ネストされているリスト`li`を見やすく表示する,pprint.pprint(li)
設定オブジェクト`config_obj`からセクション`section`内の全てのルール文字列を抽出する,"rule_strings = {k:v for k, v in config_obj.items(section)}"
レジスタ`al`の値が`0xf2`と等しければ`fillOnes`ラベルにジャンプし、そうでなければ`eax`レジスタに`0x59935193`を代入する,"if al == 0xf2:
    goto fillOnes
else:
    eax = 0x59935193"
"Кот-д'Ивуарийский законодательный орган, который принимает законы","print(""Национальное собрание Кот-д'Ивуара"")"
ロシアにある河川「ホブザ」と「アダグム」が合流する場所を特定する,"print('ホブザ(ホプス, コプス)とアダグム(アディクム, アダギム, アタクマ, アタグム)が合流する')"
単語リストから出現頻度の高い単語を10個抽出する,Counter(word_list).most_common(10)
文字列`text`をUTF-8でエンコードし、ファイル'test.txt'に書き込む,"with open('test.txt', 'w', encoding='utf-8') as f:
    f.write(text)"
オブジェクト`data`の中身を表示する,print(data)
ロシアのイレニ川が流れる場所を特定する,"print('Иренъ - река в Пермском крае, левый приток Сылвы.')"
"Тюмень является административным центром, где расположена администрация города. Кто является главой администрации в Тюмени?",Руслан Николаевич Кухарук
ネストされたリスト`scores`の平均値を計算する,sum(scores) / len(scores)
ファイルパス`func_code_url`のRubyの関数`Raca.Container.delete`を表示する,print(func_code_string)
ルーマニア人の作家Cornelius Platalisの出身地は何ですか?,print('Šiauliai')
コマンドラインツールの引数を追加する,"parser.add_argument('-e', '--environment', help='Environment name', required=True)
parser.add_argument('-w', '--wait', help='Wait for deployment to finish', action='store_true')"
リスト内の重複した要素を削除する,list(set(li))
カナル・グリボエドフを通過する川の名前を特定する,print('Фонтанка')
ロシアの河川'Fortanga'の流入先を示す,print('Fortanga は Ingushetia に流入する')
FFmpeg ライブラリの `mpeg4_is_resync` 関数の動作を示すPythonコードを1行で書く,def mpeg4_is_resync(s): return not (s.workaround_bugs & FF_BUG_NO_PADDING) and s.gb.size * 8 - get_bits_count(s.gb) <= 8
リストから最も長い文字列を見つける,"max(li, key=len)"
"Михаил Васильевич Авдеев, уроженец Оренбурга, занимал какую должность в Российской империи?",print('Император Всероссийский')
ロシアの川「Вахчилка」の流れ先を特定する,Вахчилка は Клязьмы に流れ込む
ロシアの地図上で、Тхачという川がMos...にある川に流れ込むのはどの川か,Ачешбок
"Русской реки, в которую впадает река Медников",Войтоловка
ネストされたリストのスコアの平均を計算する,mean(scores)
キューの名前`queue_name`、交換の名前`exchange_name`、ルーティングキーのリスト`routing_keys`を使ってキューをバインドする,"bind(queue_name, exchange_name, *routing_keys)"
ネストされたリスト`nested_list`を平坦化してリストとして返す,def flatten(nested_list): return [item for sublist in nested_list for item in sublist]
データベースの設定を表示する,print(settings.DATABASES)
リストの中から2番目に大きい数を見つける,"a = sorted(li, reverse=True)[1]"
ファイル'text.txt'の内容を読み込み、単語の出現頻度をカウントする,"from collections import Counter
with open('text.txt', 'r') as f:
    text = f.read()
    words = text.split()
    word_counts = Counter(words)"
リストからランダムに要素を1つ選択する,random.choice(li)
2つの数値`a`と`b`のXORを計算する,a ^ b
ロシアの「Сордук」という川と「Фёдоровка」という川が合流する場所を特定する,print('Сордук и Фёдоровка')
ロシア・スヴェルドロフスク州の河川「サウマ」に流れ込むもう1つの河川の名前を求めよ,リスト['passage']の中から'Лозьва'を見つける
リスト`li`の中の各要素のタイプを表示する,[print(type(x)) for x in li]
データベースの設定を確認する,print(settings.DATABASES)
リスト`food_list`から食べ物を直接容器から食べられるものを選んで表示する,"for food in food_list:
    if food in ['ice cream', 'yogurt', 'chips', 'tuna', 'soup', 'peanut butter']:
        print(food)"
テキストから'Тюмень'という単語を見つけ、その単語を含む文章を表示する,for line in main_text.split('\n'): if 'Тюмень' in line: print(line)
ロシアのヨーロッパ部に位置する大河川の名称を特定し、その支流を表示する,print('Вятка')
データベースの設定を表示する,print(settings.DATABASES)
ロシア語の文字列を含むデータベースの設定を表示する,print(settings.DATABASES)
リスト`color_list`から重複する要素を削除し、ユニークな値のみを持つリストを作成する,list(set(color_list))
ロシアにあるTapsuiという川の流域は何の川に属していますか?,Tapsuiは北ソシュワ川の支流です
ロシアの川「Сёвъя」の流域を表示する,print('Сёвъя')
ファイル'sample.txt'のテキストを読み取り、その内容を表示する,"with open('sample.txt', 'r') as f: print(f.read())"
ロシアのイヴァノフ州の州長は誰か,Stanislav Voskresenskij
Robertaの「Bobbie」Kevelzoの生年月日と出身地を表示する,"print('1931年11月4日, Foll-River')"
ロシアの川「ペチョラ」について、それがどこに流れているかを示す,print('ペチョラ川はロシアのコミ共和国とネネツ自治管区を流れる')
リストに格納されている文字列を1つずつ表示する,"for item in ['Removal of the Used Diaper', 'Placing the New Diaper', 'Setting Up a Changing Space']: print(item)"
リストの要素`item`をスペース区切りで表示する,"print(' '.join(map(str, item)))"
メンテナンス担当者が新しいトイレを取り付けに来ていたが、完了前に退出してしまったため、やむを得ず流し台で用を足した。その後、担当者が戻ってきて、目が合ってしまった。,"try:
    pass
except:
    print('メンテナンス担当者に見つかってしまった。')"
CSV 'data.csv'ファイルを読み込み、各行の先頭と末尾の空白文字を削除する,"import csv
with open('data.csv', 'r') as f:
    reader = csv.reader(f)
    for row in reader:
        print([col.strip() for col in row])"
辞書`inflFormTranslations`を使って、文字列`s`の変化形の翻訳を取得する,return inflFormTranslations.get(s)
ファイル'data.txt'内の単語を数え、頻度順に出力する,"from collections import Counter
with open('data.txt', 'r') as f:
    words = f.read().split()
    word_counts = Counter(words)
for word, count in word_counts.most_common():
    print(f'{word}: {count}')"
ロシア人設計者の名前を取り出す,print(main_text.split('\n')[0])
ネットワークAPIを使って、Twitterのユーザー情報を取得し、その情報を表示する,"api = tweepy.API(auth) user = api.get_user('username') print(user.screen_name, user.followers_count, user.friends_count)"
ファイル名が指定されていない場合のデフォルトのファイル名を設定し、ファイルにYAMLデータを書き込む,"if filename is None:
    filename = self.filename
with open(filename, 'w') as f:
    f.write(self.to_yaml())"
ドイツ出身の人物Anita Berberの出身地を特定する,print(main_text.split('Анита Бербер')[1].split('была')[0].strip())
ロシアにある川の名前を出力する,print('Лемзер')
ロシアのウリャノフスク州を流れる川の名前を返す,print('Барыш')
データベースのテーブル名を取得する,print(connection.introspection.table_names())
ネストされた辞書`data`内の'city'キーの値を表示する,print(data['city'])
"""Onepu""という河川がどこの地域を流れているか説明してください",Onepu is a river in Russia that flows through the Sverdlovsk region.
ロシアの河川 Sosva の上流に位置する河川は何か,Bolshaya Sosva
入力サイズ`n`に応じて、適切な関数を使ってfitを行う,"def fit_at(type, slope=None, intercept=None, n=None):
    if n <= 0:
        raise ArgumentError, ""Incorrect input size: #{n}""
    if type == 'logarithmic':
        # logarithmic fit code
    elif type == 'linear':
        # linear fit code
    elif type == 'exponential':
        # exponential fit code"
Pythonを使って、データベースの設定を表示する,print(settings.DATABASES)
リスト`instructions`内のアセンブリ命令を実行し、その結果を表示する,for instruction in instructions: exec(instruction)
ネストされたリスト内の最大値を求める,max([max(x) for x in li])
ロシア語の文章から、町の名称を抽出する,"import re
pattern = r'\u0411\u0430\u0442\u0443\u043c\u0438'
match = re.search(pattern, text)
if match:
    print(match.group())"
ソ連時代の有名なアニメ作品『トラ模様』の監督の出身地は何ですか？,print(Podpomogov.birthplace)
"座標グリッド`grid_arcsec`を(y,x)ピクセル値のグリッドに変換する","grid_util.grid_arcsec_1d_to_grid_pixels_1d(grid_arcsec_1d=grid_arcsec, shape=self.shape, pixel_scales=self.pixel_scales)"
ファシリティ文字列'facilityStr'を使って、ファシリティ設定を行う,"def setFacility(facilityStr):
    if facilityStr is not None:
        facilityStr = facilityStr.strip()
    self.facilityStr = facilityStr"
Rubyのリポジトリ'alexdovzhanyn/rydux'の'lib/rydux/store.rb'にある'Rydux.Store.dispatch'メソッドのドキュメントを表示する,"print(""Dispatches an action to all reducers. Can be called any of the following ways:\n Takes in an action and an optional callback proc, which will be called after the\n dispatch is finished.\n The action can be passed in either as a hash or as two sepera..."")"
Exchange APIを使ってアイテムの属性を更新する,update_item(opts)
Костромской области является главой администрации,Ситников Сергей Константинович
"Индийский двухпалатный парламент, состоящий из Лок Сабхи и Раджья Сабхи, является законодательным органом страны","print('Индийский двухпалатный парламент, состоящий из Лок Сабхи и Раджья Сабхи, является законодательным органом страны')"
データベースに保存されているユーザーの情報を取得する,User.objects.all()
ロシアの河川「Большая Нюню」に入る河川は?,print('Брюзля')
Замантыという川がTurkey(トルコ)にある。この川の長さはどれくらいですか?,print(308)
ファイル'test.txt'の内容を変数'content'に格納する,"with open('test.txt', 'r') as f: content = f.read()"
ファイル`f`から`logStr`を受け取り、`logChan`に送信し、ファイルに出力する,"func(f *FileLogger) logWriter() {
  defer func() {
    if err := recover(); err != nil {
      log.Printf(""\n"", err)
    }
  }
  f.Write(logStr)
}"
ファイル'data.csv'から特定の列'name'と'age'を抽出し、pandasデータフレームとして取得する,"df = pd.read_csv('data.csv', usecols=['name', 'age'])"
ヤレヴァンの立法機関はどのようなものか,"print(""ヤレヴァンの立法機関は、ヤレヴァン市議会です。"")"
どのような川が'Нягуяха'(古い呼称'Няга-яха')に流れ込んでいますか?,Малхояха(古い呼称'Малхой-яха')に流れ込む
リストに含まれる単語の重複を削除し、その単語の出現回数をカウントする,collections.Counter(set(word_list))
データベースの設定を表示する,print(settings.DATABASES)
DEFAULTS辞書の内容をpretty printする,pprint.pprint(DEFAULTS)
リストオブジェクト`li`の各要素について、その要素がEpiMath.Vectorクラスのインスタンスであれば、translate関数を使って要素を平行移動する,"for v in li: v.translate(par1, par2, par3)"
リストの中にある重複した要素を削除する,list(set(my_list))
ロシアの川「トリパニェリ」が流れる場所を特定する,print('Пеchora')
リスト`rivers`に含まれる河川の名称を表示する,print(rivers)
Тирасполь является столицей какого региона?,Тирасполь является столицей Приднестровской Молдавской Республики.
リスト`river_list`に含まれる川の名称を表示する,for river in river_list: print(river)
ロシアの川 Пе́чпан-я́х (устар. Ай-Пе́чпан-я́х)が流れ込む川を見つける,Нёгусях
リスト`scores`内の数字の平均値を計算する,sum(scores) / len(scores)
データベースのプリファレンスの値を新しい値に設定する,"write_preference(name, value, group=None)"
ファイル'data.csv'からデータを読み込み、列'age'の平均値を計算する,"import pandas as pd
pd.read_csv('data.csv')['age'].mean()"
"Карта Ставропольского края показывает, кто является главой администрации в регионе?","print(""Владимир Владимирович Владимиров"")"
データグリッドの要素が変更された後、テーブルの幅を更新する,self._updateTableWidth()
ロシアの地図に表示されている2つの川の名前を出力してください,"print('Белая', 'Рамитница')"
ロシアの河川`Belaya`が`Volmanga`に流れ込む,print('Belaya')
ロシアの河川Пурсовカの情報を表示する,"print(""Пурсовка - река в России, протекает в Кирсановском и Инжавинском районах Тамбовской области."")"
ネストされたリスト'data'の各要素の長さを表示する,[len(x) for x in data]
オブジェクト`selectedValues`から、AnalyticsのためのX-Search-Filtersの文字列を生成する,"def getFilterString(selectedValues):
    if selectedValues and len(list(selectedValues.keys())):
        return ', '.join([f'{k}:{v}' for k, v in selectedValues.items()])"
TLS-wrapped ソケットにデータを書き込む,"def write(self, data):
    if self._context_handle_pointer is None:
        self._raise_closed()
    if not self._encrypt_data_buffer:
        self._encrypt_data_buffer"
Tiraspolの市長は誰か,print(Tiraspolの市長)
ネストされたリスト`nested_list`の各要素の平均値を取る,"import numpy as np
np.mean(nested_list, axis=1)"
ロシア語の文章からNIZHNIY NOVGORODという都市名を抽出し、その都市の立法機関を表示する,"text = '""\u041d\u0438\u0436\u043d\u0438\u0439 \u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434 (\u0432 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043d\u043e\u0439 \u0440\u0435\u0447\u0438 \u0447\u0430\u0441\u0442\u043e \u2014 \""\u041d\u0438\u0436\u043...'
print(re.search(r'\u041d\u0438\u0436\u043d\u0438\u0439 \u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434', text).group())"
ロシア語の文章からアルメニアの町の名称を抜き出す,"re.search(r'\u0413\u044e\u043c\u0440\u0438', text).group()"
ある人物の出身地を表示する,"print(main_text.split('(')[1].split(',')[0])"
ggplotを使って、`mtcars`データセットのシリンダー数の棒グラフを作成し、デフォルトのテーマと`theme_bw()`テーマを切り替えて表示する,"from ggplot import *
p = ggplot(mtcars, aes('cyl')) + geom_bar()
print(p)
plt.show(1)
print(p + theme_bw())"
ファイル'test.txt'の内容を変数'content'に読み込む,"with open('test.txt', 'r') as f: content = f.read()"
データベースからリスト`data`を取得し、ソートして表示する,sorted(data)
データベースのインスタンス`db_instance`を読み取りレプリカから昇格させる,db_instance.promote()
ロシアのボロゴダ州にある河川「ユーザ」の情報を表示する,"print(""Юза - река в Вологодской области России."")"
コート・ジボワールの立法機関は何ですか?,コート・ジボワールの立法機関はNational Assembly(国民議会)です。
ロシア語のテキストから、ツイートの検索に使用できるキーワードを抽出する,"text = main_text + ' ' + support_text
keywords = [word for word in text.split() if len(word) > 3]"
Eryvanda bulunan yasama organının adını belirtin,Erevanın şehir meclisi
ネストされているリスト`li`を見やすく表示する,pprint.pprint(li)
カレンダーIDが`calendar_id`、イベントIDが`event_uid`、ステータスが`status`の参加状況を変更する,"def change_participation_status(calendar_id, event_uid, status):
    body = {
        'status': status
    }
    url = f'/v1/calendars/{calendar_id}/events/{event_uid}/participation_status'
    post(url, body)"
Podolsk市の市長は誰か？,Nikolay Pestov
Дата рождения Тахмины Пулоджоновны Раджабовой,"print(29, 'июня', 1982)"
与えられたタイトルの文字列を持つ記事を検索し、その内容を表示する,article = wikipedia.page(title).content
"Пуритей - река в России, протекает по Ямало-Ненецкому округу. С какой рекой сливается река Пуритей?",print('Пуритей сливается с рекой Янгноя')
Usoro na mmasi iji kwusi omumu nwa site na onuogu nke umuka di ndu,"chart_type = 'Line chart'
pprint.pprint(table_data)"
ダイアログボックスからSRI言語で書かれた文字列を取得し、それをPythonの変数に格納する,"import tkinter as tk
root = tk.Tk()
string = tk.simpledialog.askstring('入力', '文字列を入力してください')"
ロシアの川「Епельпетьях」が「Айкмельюль」という川に流れ込む,print('Епельпетьях является притоком Айкмельюль')
fname_to_idディクショナリーのキーを使って、別々のtarballの内容を1つのtarballにまとめる,"import tarfile

work_dir = job.fileStore.getLocalTempDir()
tar_paths = []
for fname, _ in fname_to_id.items():
    tar_path = os.path.join(work_dir, fname)
    tar_paths.append(tar_path)

with tarfile.open(os.path.join(work_dir, 'consolidated.tar'), 'w') as tar:
    for path in tar_paths:
        tar.add(path, os.path.basename(path))"
配列`arr`の中から最大値を取得する,max(arr)
Banachテンソル積のプロパティを説明する,A = B.tensor(C)
Banach空間の二つの元A、Bの代数テンソル積を求める,"tensor(A, B)"
ドミニカ共和国出身の作家'Vincent de Bove'が著した'大鏡'の出身地を特定する,print('Bove')
BlackBerryデバイスでSureTypeの入力言語を切り替える方法,Alt+Enter
ロシア語の文字列'Тоттенхэм Хотспур'を英語の文字列'Tottenham Hotspur'に変換する,print('Tottenham Hotspur')
ロシア語の文章からNIZHNIYNOVGORODの行政機関の名称を抽出する,Городской думы Нижнего Новгорода
2つのソート済み配列の中央値を見つける関数を書く,"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] < arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2) / 2"
コンポーザーの出身地を表示する,print(main_answers[0]['segment'])
環境変数をすべて読み取り、PERIを含むかどうかを確認する,"for k, v in os.environ.items(): print(k, v) if 'PERI' in v: print('PERI found')"
リストの要素`0x742f2f2f`をスタックにプッシュする,stack.append(0x742f2f2f)
Pythonで、ドキュメントから'Тула'という単語を抜き出して表示する,"print(re.findall('Тула', main_text)[0])"
データセット'wmt21.news'から'en-cs'の言語対のペアを使い、'doc_name'が'no-mqm'のドキュメントから'sent_id'が'317'の文章の英語の翻訳と、その文章の参照訳を表示する,print(f'英語翻訳: {translation.en}') print(f'参照訳: {ref-A}')
ロシアの川「ヴァフマ」が「ロバニ」川に流れ込む,print('ロバニ')
日本語のテキストを入力として受け取り、センテンスの構造を分析してパースツリーを出力する,"import nltk
sentence = input()
tree = nltk.ParentedTree.fromstring(sentence)
print(tree)"
ロシア語の文書から、エレバンの市議会の名称を抽出する,"print(re.search(r'\u0435\u0440\u0435\u0432\u0430\u043d\u0441\u043a\u0438\u043c \u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0438\u043c \u0441\u043e\u0432\u0435\u0442\u043e\u043c', text).group())"
ルドヴィグ・パピコヴィチ・ガリブジャニャンの生年月日と出身地を表示する,"print('1922年8月24日', '(エレバン)')"
ヤーヴァン市の立法機関は何か,"print(""ヤーヴァン市の立法機関は市議会です"")"
長さ10の整数リスト`li`から、最大値を取得する,max(li)
FFmpeg プロジェクトの `ff_cavsdsp_init_x86` 関数の内部処理を表示する,print(func)
ある河川の名称を取得する,"print(""Огурья"")"
ロシアの都市「トゥーラ」の行政の中心を示す,print('Тула')
ダネストル川が流入する黒海に注ぐ河川はどれか,print('Черное море')
ドラバ川はどの川に注ぐのか,print('ドナウ川')
データベースの設定を表示する,print(settings.DATABASES)
データベースの設定を表示する,print(settings.DATABASES)
ロシアの河川の名前を探し、その河川に注ぐ河川の名前を表示する,"for river in ['Тайлоково', 'Ивтурье']: print(river)"
リスト`river_list`に含まれる河川名を表示する,for river in river_list: print(river)
Подольск市の市長は誰ですか?,print(Nikolai Pestov)
書類の中から見つからないファイルを探す,"import os
for filename in os.listdir('.'):
    if filename.endswith('.txt') or filename.endswith('.pdf'):
        print(filename)"
Tiraspolの市長は誰ですか?,"Dovgopol, Oleg Anatolievich"
ファイルパスの配列`paths`を受け取り、ファイルの変更を監視する,"def require(paths, &block) if @reloader @reloader.require_dependencies(paths, block) else Unreloader.expand_directory_paths(paths).each { |f| # your code here } end"
ある日本語の地名から、その地名を含む河川を見つける,"import re
river_name = re.search(r'(.+)川', '日本語の地名').group(1)"
ネストされているリスト`li`の要素数を数える,"len([x for y in li for x in (isinstance(y, list) and y or [y])])"
ThrowableオブジェクトをStringオブジェクトの配列に変換する,ThrowableToStringArray.convert(t)
リストli内の要素をカウントし、最も多く出現する要素を表示する,Counter(li).most_common(1)
ソブチョガン川に流れ込むPильегান川について説明してください。,"Пильегáн (устар. «Пиль-Юган») — река в Приуральском регионе России, впадает в Собтыёган."
ネストされたリスト内の各要素の長さを取得する,[len(x) for y in li for x in y]
ネストされたリスト 'li' の要素をpprint.pprintを使って表示する,pprint.pprint(li)
データフレーム`df`のカラム名を表示する,print(df.columns)
ファイル'input.txt'の内容を1行ずつ読み込み、各行の文字数を表示する,for line in open('input.txt'): print(len(line.strip()))
ерeванский городской совет является законодательным органом города,print('Ереванский городской совет')
リストに含まれる項目の平均値を計算する,sum(items) / len(items)
リストから重複する要素を削除する,list(set(lst))
ロシア語の文字列から、ロシア人の名前を抽出する,"import re
names = re.findall(r'[А-Я][а-я]+', text)"
リスト`li`の中の重複した要素を削除する,list(set(li))
Окккервиль 川に注ぐ川の名前は何ですか?,Охты
リスト`nums`から重複した要素を削除し、新しいリストを作る,list(set(nums))
リストから重複する要素を除去して表示する,list(set(li))
ティラスポリの市長は誰か,"Dovgopol, Oleg Anatolievich"
ファイルから読み取った文字列をリスト化し、リスト内の各要素の長さを表示する,"text = open('file.txt', 'r').read().split()
for word in text:
    print(len(word))"
配列`chars`から指定された添字`y`の要素を取得する,chars[y]
データベースの設定を表示する,print(settings.DATABASES)
Ивановская область является субъектом Российской Федерации. Кто является главой администрации в этом регионе?,print(Voskresenskiy)
255バイトの変数ファイル名を予約する,filename = ' ' * 255
整数`k`を入力として受け取り、コラッツの問題を解く,"k = int(input()) 
while k != 1:
    print(k)
    if k % 2 == 1:
        k = k * 3 + 1
        print(f'*3+1={k}')
    else:
        k = k // 2
        print(f'/2={k}')"
リストの要素を昇順に並べ替える,sorted(li)
配列`nums`の中から、2つの要素の合計が`target`になるインデックスを返す,"for i in range(len(nums)): for j in range(i+1, len(nums)): if nums[i] + nums[j] == target: return [i, j]"
ファイルパス'file_path'から拡張子が'.java'のファイルを見つけ、それらのファイルのリストを返す,"def find_java_files(file_path):
    java_files = []
    for root, dirs, files in os.walk(file_path):
        for file in files:
            if file.endswith('.java'):
                java_files.append(os.path.join(root, file))
    return java_files"
ダミー文の中に登場する河川名を探し、その河川が他の河川に流れ込む位置を特定する,"import re
match = re.search(r'\u0427\u0435\u0431\u0435\u043d\u044c\u043a\u0430 \u2014 \u0440\u0435\u043a\u0430 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u043f\u0440\u043e\u0442\u0435\u043a\u0430\u0435\u0442 \u0432 \u041e\u0440\u0435\u043d\u0431\u0443\u0440\u0433\u0441\u043a\u0438\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438. \u0412\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0440\u0435\u043a\u0443 \u0421\u0430\u043a\u043c\u0430\u0440\u0430.', text)
if match:
    print(f'The river {match.group()} flows into the river Sakmara.')"
ファイル'data.json'の内容を読み込み、そこに含まれる'main_answers'の値を表示する,"with open('data.json', 'r') as f: data = json.load(f) print(data['main_answers'])"
ロシアの川「Синкьях」と「Нёгусьях」の関係について説明する,Синкьях (приток) впадает в Нёгусьях
リストの要素を行ごとに表示する,for item in li: print(item)
Тиберий Юлий Цезарь Август был братом кого?,Нерон Клавдий Друз Германик
スペースで区切られた入力`stdin`を変数に格納し、整数に変換して合計を表示する,"total = 0
for line in stdin.split():
    total += int(line)"
ネストされたリスト 'li' の中の単語の頻度を数える,"from collections import Counter
Counter(sum(li, []))"
ウリヤノフスカヤ州の長官は誰か?,S. I. Morozov
ネストされたリスト`li`の中に含まれる空間に関する情報を表示する,"for item in li: if isinstance(item, str) and 'space' in item: print(item)"
16進数'0x6e69622f'をスタックにプッシュする,stack.append(0x6e69622f)
Ruby関数 `get_instance_for_appending` のドキュメンテーションから、関数の目的を説明してください。,"""Returns ERB instance for appeding lacking tests"""
ディレクトリ`stopstalk_logs`が存在しない場合、そのディレクトリを作成し、そのディレクトリに移動する,"if not os.path.exists(stopstalk_logs):
    os.makedirs(stopstalk_logs)
os.chdir(stopstalk_logs)"
リストに含まれる単語の位置情報を取得する,"[(i, word) for i, word in enumerate(word_list)]"
データベースの設定を表示する,print(settings.DATABASES)
フランス語のテキストから、Garonna川が流れる場所を見つける,print(main_answers)
ネストされたリスト'scores'内の要素の平均値を計算する,sum(scores)/len(scores)
ファイル'test.txt'から文字列'Amanulla Gabdulhaevich Ramazanov'を抽出する,"with open('test.txt', 'r') as f: text = f.read() print(text.split('""')[1])"
タジキスタンの首都の名称と、その首長の名前を表示する,"print('首都: Dushanbe, 首長: Rustam Emomali')"
データベース設定ファイル内の'DATABASES'の値を表示する,print(settings.DATABASES)
データベースの設定を表示する,print(settings.DATABASES)
データベース'db'の'table'テーブルにある'column'列の値を一覧で表示する,cursor = db.cursor() cursor.execute('SELECT column FROM table') print(cursor.fetchall())
データベースの設定を表示する,print(settings.DATABASES)
Parallel.mapを使い、リスト`emulators`内の各エミュレータを起動する,"Parallel.map(emulators, in_threads: emulators.size) do |emulator| spawn(""emulator -avd #{emulator} -no-...) end"
ファイル'data.csv'のデータを読み込み、各列の平均値を計算して表示する,"import pandas as pd
pd.read_csv('data.csv').mean()"
ガラスの相転移における熱力学的変数について説明する,ガラスの相転移では、体積、エントロピー、エンタルピーなどの熱力学的変数が不連続にならず、連続的に変化する。これらの変数は相転移を通して集約的(intensive)である。
ロシアの河川の名称を含む文章から、その河川の名称を抽出する,"import re
pattern = r'\u0420\u0435\u043a\u0430 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u043f\u0440\u043e\u0442\u0435\u043a\u0430\u0435\u0442 \u0432 (\w+)'
river_name = re.search(pattern, text).group(1)"
ネストされた辞書`data`の中から、キー`'name'`の値が`'Tazawa'`であるオブジェクトを見つける,next(item for item in data if item['name'] == 'Tazawa')
ネストされたリスト'li'の中で'passage'のラベルを持つ要素のセグメントを表示する,for item in li: if 'label' in item and item['label'] == 'passage': print(item['segment'])
ロシア語の文章から、都市の立法機関の名称を抜き出して表示する,"print(re.search(r'\u0416\u0434\u0430\u043d\u043e\u0432', text).group())"
英語の動詞をどのようにして名詞に変換できますか?,suffixを使用して動詞を名詞に変換する
データベース設定を表示する,print(settings.DATABASES)
リストのデータを使って、ロシアの川の名前とその流域を表示する,"for river, basin in river_basin_data.items(): print(f'{river} - {basin}')"
リスト`c`に格納された整数を昇順にソートし、要素数が1つ以上の場合は要素を表示し、そうでない場合は'No'と表示する,"c.sort()
if len(c) > 0:
    print(', '.join(map(str, c)))
else:
    print('No')"
"Русланом Николаевичем Кухаруком является глава администрации в городе, где родился Ильнур Туфикович Альшин",print(f'Руслан Николаевич Кухарук')
ネストされたリスト'word_probas'の各要素を表示する,"import json
word_probas = json.loads(""""""[-0.1671, -1.2614, -0.5884, -0.2052, -0.1603, -0.0963, -0.2717, -0.2838, -1.2728, -0.2007, -1.0251, -0.3083, -0.6887, -1.3539, -1.3082, -1.5544, -0.4055, -1.6496, -0.4789, -0.5967, -0.8767, -0.8359, -0.1831, -0.2218, -0.1902, -0.4019, -1.9154, -1.43..."""""")
for prob in word_probas:
    print(prob)"
リストから最も大きな値を持つ要素を見つける,max(li)
データベースの設定を表示する,print(settings.DATABASES)
Tulaという都市の行政の長は誰か,print('Yuri Tskipuri')
ロシアの河川Tydeoottayahの流域に関する情報を表示する,print('Tydeoottayah is a river in Russia that flows into the Pur river.')
ロシアの川「Тыдэоттаяха」がどの川に合流するかを示す,print('Тыдэоттаяха')
ファイル'test.txt'の内容を表示する,"with open('test.txt', 'r') as f: print(f.read())"
リスト`support_text`内の単語の出現頻度を表示する,"from collections import Counter
Counter(support_text.split())"
リスト`word_probs`内の単語の確率を表示する,print(word_probas)
河川「テリュバイ」が流れる共和国を特定する,print('テリュバイ川が流れる共和国はアルタイ共和国である')
ストリーミングデータ`data`からリスト`li`を作成し、長さを表示する,li = list(data) print(len(li))
ネストされたリスト'li'の中の文字列を表示する,for item in li: print(item)
Ивановская область является субъектом Российской Федерации. Кто возглавляет администрацию в этом регионе?,Станислав Воскресенский
ロシアの川「Сухода」が「Ухтома」川に流れ込むことを示す,"print('Сухода', '流れ込む', 'Ухтома')"
リスト`animals`に含まれる動物の体重を合計する,sum(animal.weight for animal in animals)
日本語の文章を英語のYoda風に変換する,"text.replace('は', '-ay').replace('が', '-ay').replace('を', '-ay').replace('で', '-ay').replace('に', '-ay')"
指定されたプールが定義されているノードの名前を取得する,"nodes = storagePoolNodes(poolID)
print(nodes)"
ストリーム`stream`から、ネストされたリスト`li`を取り出し、pprint.pprintで表示する,"import pprint
li = [item for item in stream]
pprint.pprint(li)"
データベースの設定を取得し、表示する,print(settings.DATABASES)
FFmpegのMpegTSContext構造体のprg配列の長さを取得し表示する,print(len(ts.prg))
ツイートを検索し、その中からツイートIDを取得する,search_results = api.search(q='') for tweet in search_results: tweet_id = tweet.id
配列`src`からデータをコピーし、更新が他のスレッドで見られるようにする,src.copy()
ネストされたリスト'scores'の各要素の平均値を計算する,sum(scores) / len(scores)
リスト`river_list`内にある河川名を表示する,for river in river_list: print(river)
ホスト名を入力として受け取り、そのホストの設定情報を取得し、サービスの説明を表示する,"response = self.class.get(@base_uri + ""config/host/#{host}?format=json"", basic_auth: @auth, verify: false)
print(response.json['services'])"
ロシア語の文章から、Балашихаという都市の情報を抽出する,"text = '""\u0411\u0430\u043b\u0430\u0448\u0438\u0445\u0430 \u2014 \u0433\u043e\u0440\u043e\u0434 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u0432 \u0446\u0435\u043d\u0442\u0440\u0435 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431...""'
print(text[text.index('Балашиха'):text.index('.')+1])"
Banach空間'A'と'B'の代数テンソル積を計算する,"np.tensordot(A, B, axes=0)"
ロシアの川の名前`Hultymy`と`Sekvangsos`を表示する,"print('Hultymy', 'Sekvangsos')"
"Русском языке данной строки, в которой встречаются названия рек, какая река сливается с рекой Хултымъя?",Секвангсос
Окишева 川がどの川に流れ込むか示す,print('Окишева is a river in Russia that flows into the Васюган river')
リストからユニークな要素を抽出する,set(li)
"Тирасполь является городом, где располагается главная администрация. Напишите код, который выводит название этого города.",print('Тирасполь')
ロシア語の文章から、エレバンの市議会を表す語句を抽出する,"search = re.search(r'\u0435\u0440\u0435\u0432\u0430\u043d\u0441\u043a\u0438\u043c \u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0438\u043c \u0441\u043e\u0432\u0435\u0442\u043e\u043c', text)"
リスト`word_probs`内の単語の確率を降順にソートして表示する,"sorted(word_probs, reverse=True)"
Константин Петрович Сапожков изучал какую науку?,oncology
配列`$commands`から、Commandクラスのインスタンスの幅を取得する,"def getColumnWidth(commands):
    widths = []
    for command in commands:
        if isinstance(command, Command):
            widths.append(command.width)"
複数の単語を含む文字列'text'を受け取り、各単語の出現回数をディクショナリで返す,from collections import Counter; Counter(text.split())
Максимилиан Максимилианович Голлербах изучал какую науку?,Альгология
ファイル'data.csv'を読み込み、列'weight'の平均値を計算する,"import pandas as pd
df = pd.read_csv('data.csv')
print(df['weight'].mean())"
指定したバージョン範囲の分割を生成する,"def computeSeveralSnapshotVersions(latestVersionId):
    if latestVersionId < Base:
        return []
    k = math.log(latestVersionId / Base) / LogRate
    return [Base * (2 ** i) for i in range(int(k) + 1)]"
リストの中から最大値を求める,max(li)
対話履歴リストから、発言者が'user'で、テキストに'ムービー'が含まれる発言を取り出す,next(item for item in dialog_history if item['speaker'] == 'user' and 'ムービー' in item['text'])
QEMU デバイスの整数プロパティ `prop` の値を文字列として出力する,"def print_int32(dev, prop, dest, len):
    ptr = qdev_get_prop_ptr(dev, prop)
    return snprintf(dest, len, '%' PRId32, *ptr)"
Pythonで、データベースの設定を表示する,print(settings.DATABASES)
Nokogiriのドキュメントオブジェクト`doc`を使って、XPathによりリストを作成し、メタ情報を追加する,"def parse_with_meta(doc, xpath):
    groups = [prop.text for prop in doc.xpath(xpath)]
    meta = get_meta(doc)
    groups.meta = meta
    return groups"
ロシア語のテキストから、パネヴェジス市が位置する管轄区域を抽出する,"re.search(r'\u041f\u0430\u043d\u0435\u0432\u0435\u0436\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0439\u043e\u043d\u0430', text).group()"
日本語の質問から、ユーザーがアメリカで夢を追う場所を見つける,"import random
dreams_places = ['ニューヨーク', 'ロサンゼルス', 'ラスベガス', 'シカゴ']
print(random.choice(dreams_places))"
Костромская область является субъектом Российской Федерации. Кто является главой администрации в регионе?,Сергей Константинович Ситников
ネストされているリストliを見やすく表示する,pprint.pprint(li)
リスト`river_list`内に出現する河川名を数える,Counter(river_list)
指定されたバイト列`input`を圧縮形式として認識できるか判定し、該当する圧縮関数と残りの入力を返す,return DetectCompression(bytes.NewReader(input))
リストから選択された行の配列を得る,result = [this.selected().indexes()]
整数の入力を受け取り、その数字を一桁ずつ表示する,a = int(input()) while a > 0: print(a % 10) a //= 10
ニジニノヴゴロドの立法機関は何か,"print(""Городская дума"")"
"Березовском районе, какая река сливается с рекой Неркаю?",print('Керегшор')
リストの中から重複している要素を削除する,list(set(li))
リストからランダムに要素を選んでprint する,"import random
print(random.choice(li))"
映画「シャター」の舞台となった場所の通貨を表示する,print('Thai baht')
"Енисейский залив - река, в которую впадает река Елегост","print('{} впадает в {}'.format('Елегост', 'Енисейский залив'))"
ロシア語の文章から、その都市の首長の名前を抜き出す,"import re
match = re.search(r'([А-Я][а-я]+\s[А-Я][а-я]+)', main_text)
if match:
    print(match.group(1))"
ある街にある地域を表す文字列を見つけ、その街の議会を示す文字列を見つける,"import re
passage = re.search(r'\w+', support_text).group()
city_council = re.search(r'\w+', main_text).group()"
ロシアの河川Чугримについて説明する,"print('Чугрим - река в России, течет по территории Койго...')"
テキストファイル'data.txt'の各行を数値に変換し、リストとして取得する,with open('data.txt') as f: data = [int(line.strip()) for line in f]
"Чарыш (Чарас) — река в России, левый приток Оби. Какую реку она впадает?",print('Оби')
リストの範囲から`start`から`end`まで(非包含)のデータを削除する,"self._deleteRangeFromKNN(start, end)"
StackOverflowの日本語の質問ページから、ネストされたリストを見やすく表示するPythonコードを生成してください,"import pprint
li = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]
pprint.pprint(li)"
ネストされたリスト`li`内の要素数を表示する,for item in li: print(len(item))
vma_delete関数を使って、struct mm_structをメモリから削除する,"while (vma = vma_first(mm)) != None: TAILQ_REMOVE(&mm->mm_mmap, vma, vma_link) qemu_free(vma) qemu_free(mm)"
文字列`p`の各単語を逆順に表示する,p = p[::-1].split(' ') print(' '.join(p))
ネストされたリスト`nested_list`の中身を平坦化してリストで返す,"def flatten(nested_list):
    return [item for sublist in nested_list for item in sublist]"
ビット誤り率を使って要素を格納するタプルを計算する,tuple(bit_error_rate)
スクリプトからプロセスIDを取得する,os.getpid()
単語`word`を含むツイートをtweepyで検索し、結果をリストで取得する,search = api.search(q=word)
スリランカ語の文章を英語に翻訳する,"translate(text, src='si', dest='en')"
ロシアの作家Andrey Bulgakovについて説明する,Andrey Yakovlevich Bulgakov (1884-1906) was a Russian writer and playwright.
データベースの設定を表示する,print(settings.DATABASES)
I2Cラインを待機状態にする,"def _idle(self): self._ft232h.setup_pins({0: GPIO.OUT, 1: GPIO.OUT, 2: GPIO.OUT})"
リストから重複する要素を削除する,list(set(li))
リスト`river_list`から流れ込む河川の名称を取得する,for river in river_list: print(river)
データベースのクエリを実行し、結果を表示する,results = Model.objects.all() print(results)
スポーツユニフォームを着替えるときに、パンツが濡れてしまった,"try:
    # 濡れたパンツを脱いで、乾いたパンツに着替える
    # 先生に状況を説明する
except:
    print('着替えに失敗した')"
ログ設定に基づいて出力をリダイレクトし、指定のログファイルにstdout/stderrを再オープンする。log_pathがnilの場合は/dev/nullにリダイレクトして出力を抑制する,"if log_path = options[:log_path]:
    FileUtils.mkdir_p(File.dirname(options[:log_path]), mode=0o755)
    open(options[:log_path], 'w')"
土地の所有権の変更について説明する,"land_transfer = {'transfer of territory', 'revoking the citizenship of a people', 'gaining of new territory (settlement)'}"
データベースの接続情報を表示する,print(db.connection.get_dsn_parameters())
ネストされているリスト`data`を見やすく表示する,pprint.pprint(data)
データベースの設定を表示する,print(settings.DATABASES)
関数`dec_b`の中で、変数`dc->r0`の値によって出力される文字列を生成する,"if dc.r0 == R_RA:
    print('ret')
elif dc.r0 == R_EA:
    print('eret')
elif dc.r0 == R_BA:
    print('bret')"
異なる列サイズの行を持つリスト`rows`から、列サイズが等しい行を生成する,"from itertools import zip_longest
rows = [list(filter(None, r)) for r in zip_longest(*rows, fillvalue=None)]"
リストの中に含まれる地名'Северной Кельтмы'と'Воч'がどのような関係にあるか説明する,Северной Кельтмы は Воч という川に流れ込む
"река, приток которой является река Китат",print('Куербак')
ネストされたリスト`li`内の各要素の長さを表示する,[len(x) for x in li]
ツイートの本文から最も出現頻度の高い単語を見つける,Counter(tweet.split()).most_common(1)[0][0]
ロシア語の文章から、その都市の行政長官の名前を抽出する,"re.search(r'\u042e\u0440\u0438\u0439 \u0426\u043a\u0438\u043f\u0443\u0440\u0438', text).group()"
データベースの設定を表示する,print(settings.DATABASES)
Костанайская область является областью на севере Казахстана. Кто является главой администрации в этом регионе?,"Мухамбетов, Архимед Бегежанович"
リスト`river_list`内にある、別の河川から派生する河川の名称を見つける,"for river in river_list: if river in ['Вокырапъягун', 'Ингуягун']: print(river)"
ファイル'data.csv'を読み込み、データフレームに格納する,df = pd.read_csv('data.csv')
ファイルサイズが0のファイルを作成し、その情報をキャッシュに保存する,"with open(filename, 'w') as f: pass"
株主からの問い合わせ（大型案件検収遅延のプレスリリースに対して）,api.create_tweet(f'本日発表しました大型案件の検収遅延につきまして、株主の皆さまにご心配をおかけしております。詳細については後日プレスリリースをさせていただきますので、しばらくお待ちください。')
データベースの設定を表示する,print(settings.DATABASES)
文字列`text`の前後のスペースを削除する,text.strip()
データベースの設定を表示する,print(settings.DATABASES)
ネストされたリストのスコアを平均値と標準偏差で表示する,"import numpy as np
scores = eval(scores)
mean = float(mean)
z_scores = eval(z_scores)
z_mean = float(z_mean)
print(f'平均: {mean:.2f}, 標準偏差: {np.std(scores):.2f}')
print(f'Z-score平均: {z_mean:.2f}')"
リストの要素を昇順に並び替える,sorted(li)
ロシアのチェリャビンスクにある行政の長はだれか,print(settings.DATABASES)
チェリャビンスクの市長は誰か,print(settings.CITY_MAYOR)
チェリャビンスクの市長を表示する,print(settings.CITY_MAYOR)
